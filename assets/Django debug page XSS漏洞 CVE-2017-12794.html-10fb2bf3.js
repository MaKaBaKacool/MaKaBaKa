import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as e,e as s}from"./app-58e4a7d6.js";const t={},c=s(`<h2 id="漏洞描述" tabindex="-1"><a class="header-anchor" href="#漏洞描述" aria-hidden="true">#</a> 漏洞描述</h2><p>Django 发布了新版本 1.11.5，修复了 500 页面中可能存在的一个 XSS 漏洞，这篇文章说明一下该漏洞的原理和复现。</p><h2 id="补丁分析" tabindex="-1"><a class="header-anchor" href="#补丁分析" aria-hidden="true">#</a> 补丁分析</h2><p>因为官方说明是 500 页面中出现的 BUG，所以我们重点关注的就是 <code>django/views/debug.py</code>。</p><p>Github 上有 Django 的仓库，下载下来，用 1.11.4 和 1.11.5 进行比较：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/django/django.git
<span class="token builtin class-name">cd</span> django
<span class="token function">git</span> <span class="token function">diff</span> <span class="token number">1.11</span>.4 <span class="token number">1.11</span>.5 django/views/debug.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202221431270.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>The above exception ({{ frame.exc_cause }}) was the direct cause of the following exception:
-------------------------------------
The above exception ({{ frame.exc_cause|force_escape }}) was the direct cause of the following exception:
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可见，外部关闭了全局转义，然后在这两个地方增加了强制转义。那么，漏洞肯定是在这个位置触发的。</p><h2 id="功能点分析" tabindex="-1"><a class="header-anchor" href="#功能点分析" aria-hidden="true">#</a> 功能点分析</h2><p>如果要触发这两个输出点，就必须进入这个 if 语句：<code>{% ifchanged frame.exc_cause %}{% if frame.exc_cause %}</code>。</p><p>可以做个简单的测试，在 Django 命令行下，我们创建一个 username 为 phith0n 的用户，然后再次创建一个 username 为 phith0n 的用户，则会抛出一个 <code>IntegrityError</code> 异常。</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/sp170908_040738.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>见上图，原因是触发了数据库的 Unique 异常。</p><p>为什么 Django 会引入这样一个异常机制？这是为了方便开发者进行 SQL 错误的调试，因为 Django 的模型最终是操作数据库，数据库中具体出现什么错误，是 Django 无法 100% 预测的。那么，为了方便开发者快速找到是哪个操作触发了数据库异常，就需要将这两个异常回溯栈关联到一块。</p><p>我们可以看看代码，<code>django/db/utils.py</code> 的 <code>__exit__</code> 函数：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">__exit__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> exc_type<span class="token punctuation">,</span> exc_value<span class="token punctuation">,</span> traceback<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> exc_type <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span>
    <span class="token keyword">for</span> dj_exc_type <span class="token keyword">in</span> <span class="token punctuation">(</span>
            DataError<span class="token punctuation">,</span>
            OperationalError<span class="token punctuation">,</span>
            IntegrityError<span class="token punctuation">,</span>
            InternalError<span class="token punctuation">,</span>
            ProgrammingError<span class="token punctuation">,</span>
            NotSupportedError<span class="token punctuation">,</span>
            DatabaseError<span class="token punctuation">,</span>
            InterfaceError<span class="token punctuation">,</span>
            Error<span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">:</span>
        db_exc_type <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>wrapper<span class="token punctuation">.</span>Database<span class="token punctuation">,</span> dj_exc_type<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token builtin">issubclass</span><span class="token punctuation">(</span>exc_type<span class="token punctuation">,</span> db_exc_type<span class="token punctuation">)</span><span class="token punctuation">:</span>
            dj_exc_value <span class="token operator">=</span> dj_exc_type<span class="token punctuation">(</span><span class="token operator">*</span>exc_value<span class="token punctuation">.</span>args<span class="token punctuation">)</span>
            dj_exc_value<span class="token punctuation">.</span>__cause__ <span class="token operator">=</span> exc_value
            <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>exc_value<span class="token punctuation">,</span> <span class="token string">&#39;__traceback__&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                exc_value<span class="token punctuation">.</span>__traceback__ <span class="token operator">=</span> traceback
            <span class="token comment"># Only set the &#39;errors_occurred&#39; flag for errors that may make</span>
            <span class="token comment"># the connection unusable.</span>
            <span class="token keyword">if</span> dj_exc_type <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token punctuation">(</span>DataError<span class="token punctuation">,</span> IntegrityError<span class="token punctuation">)</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>wrapper<span class="token punctuation">.</span>errors_occurred <span class="token operator">=</span> <span class="token boolean">True</span>
            six<span class="token punctuation">.</span>reraise<span class="token punctuation">(</span>dj_exc_type<span class="token punctuation">,</span> dj_exc_value<span class="token punctuation">,</span> traceback<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>exc_type</code> 是异常，如果其类型是 <code>DataError,OperationalError,IntegrityError,InternalError,ProgrammingError,NotSupportedError,DatabaseError,InterfaceError,Error</code> 之一，则抛出一个同类型的新异常，并设置其 <code>__cause__</code> 和 <code>__traceback__</code> 为此时上下文的 <code>exc_value</code> 和 <code>traceback</code>。</p><p><code>exc_value</code> 是上一个异常的说明，<code>traceback</code> 是上一个异常的回溯栈。这个函数其实就是关联了上一个异常和当前的新异常。</p><p>最后，在 500 页面中，<code>__cause__</code> 被输出。</p><h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建" aria-hidden="true">#</a> 环境搭建</h2><p>Vulhub 编译及启动环境：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/docker-compose up -d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="漏洞复现" tabindex="-1"><a class="header-anchor" href="#漏洞复现" aria-hidden="true">#</a> 漏洞复现</h2><p>在使用 Postgres 数据库并触发异常的时候，psycopg2 会将字段名和字段值全部抛出。那么，如果字段值中包含我们可控的字符串，这个字符串其实就会被设置成 <code>__cause__</code>，最后被显示在页面中。</p><p>所以我们假设有如下场景：</p><ol><li>用户注册页面，未检查用户名</li><li>注册一个用户名为 <code>&lt;script&gt;alert(1)&lt;/script&gt;</code> 的用户</li><li>再次注册一个用户名为 <code>&lt;script&gt;alert(1)&lt;/script&gt;</code> 的用户</li><li>触发 duplicate key 异常，导致 XSS 漏洞</li></ol><p>访问 <code>http://your-ip:8000/create_user/?username=&lt;script&gt;alert(1)&lt;/script&gt;</code> 创建一个用户，成功；再次访问 <code>http://your-ip:8000/create_user/?username=&lt;script&gt;alert(1)&lt;/script&gt;</code>，触发异常：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202221459394.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202221501499.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可见，Postgres 抛出的异常为</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>duplicate key value violates unique constraint &quot;xss_user_username_key&quot;
DETAIL:  Key (username)=(&lt;script&gt;alert(1)&lt;/script&gt;) already exists.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个异常被拼接进 <code>The above exception ({{ frame.exc_cause }}) was the direct cause of the following exception</code>，最后触发 XSS。</p>`,33),o=[c];function p(i,r){return a(),e("div",null,o)}const u=n(t,[["render",p],["__file","Django debug page XSS漏洞 CVE-2017-12794.html.vue"]]);export{u as default};
