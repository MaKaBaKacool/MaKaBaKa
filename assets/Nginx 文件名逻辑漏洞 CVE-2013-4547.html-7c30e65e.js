import{_ as d}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as r,c,a as e,b as i,d as n,e as s}from"./app-58e4a7d6.js";const l={},o=e("h2",{id:"漏洞描述",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#漏洞描述","aria-hidden":"true"},"#"),i(" 漏洞描述")],-1),p=e("p",null,"参考链接：",-1),h={href:"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-4547",target:"_blank",rel:"noopener noreferrer"},u={href:"https://blog.werner.wiki/file-resolution-vulnerability-nginx/",target:"_blank",rel:"noopener noreferrer"},g={href:"http://www.91ri.org/9064.html",target:"_blank",rel:"noopener noreferrer"},m=s(`<h2 id="漏洞影响" tabindex="-1"><a class="header-anchor" href="#漏洞影响" aria-hidden="true">#</a> 漏洞影响</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Nginx 0.8.41 ~ 1.4.3 / 1.5.0 ~ 1.5.7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="漏洞原理" tabindex="-1"><a class="header-anchor" href="#漏洞原理" aria-hidden="true">#</a> 漏洞原理</h2><p>这个漏洞其实和代码执行没有太大关系，其主要原因是错误地解析了请求的URI，错误地获取到用户请求的文件名，导致出现权限绕过、代码执行的连带影响。</p><p>举个例子，比如，Nginx匹配到.php结尾的请求，就发送给fastcgi进行解析，常见的写法如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>location ~ \\.php$ {
    include        fastcgi_params;

    fastcgi_pass   127.0.0.1:9000;
    fastcgi_index  index.php;
    fastcgi_param  SCRIPT_FILENAME  /var/www/html$fastcgi_script_name;
    fastcgi_param  DOCUMENT_ROOT /var/www/html;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正常情况下（关闭pathinfo的情况下），只有.php后缀的文件才会被发送给fastcgi解析。</p><p>而存在CVE-2013-4547的情况下，我们请求<code>1.gif[0x20][0x00].php</code>，这个URI可以匹配上正则<code>\\.php$</code>，可以进入这个Location块；但进入后，Nginx却错误地认为请求的文件是<code>1.gif[0x20]</code>，就设置其为<code>SCRIPT_FILENAME</code>的值发送给fastcgi。</p><p>fastcgi根据<code>SCRIPT_FILENAME</code>的值进行解析，最后造成了解析漏洞。</p><p>所以，我们只需要上传一个空格结尾的文件，即可使PHP解析之。</p><p>再举个例子，比如很多网站限制了允许访问后台的IP：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>location /admin/ {
    allow 127.0.0.1;
    deny all;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以请求如下URI：<code>/test[0x20]/../admin/index.php</code>，这个URI不会匹配上location后面的<code>/admin/</code>，也就绕过了其中的IP验证；但最后请求的是<code>/test[0x20]/../admin/index.php</code>文件，也就是<code>/admin/index.php</code>，成功访问到后台。（这个前提是需要有一个目录叫“test ”：这是Linux系统的特点，如果有一个不存在的目录，则即使跳转到上一层，也会爆文件不存在的错误，Windows下没有这个限制）</p><h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建" aria-hidden="true">#</a> 环境搭建</h2><p>Vulhub启动漏洞环境：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker-compose up -d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>环境启动后，访问<code>http://your-ip:8080/</code>即可看到一个上传页面。</p><h2 id="漏洞复现" tabindex="-1"><a class="header-anchor" href="#漏洞复现" aria-hidden="true">#</a> 漏洞复现</h2><p>启动漏洞环境：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker-compose up -d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>环境启动后，访问<code>http://your-ip:8080/</code>即可看到一个上传页面。</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202270019835.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>访问<code>http://your-ip:8080/uploadfiles/1.gif[0x20][0x00].php</code>，即可发现PHP已被解析：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/02.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>注意，[0x20]是空格，[0x00]是<code>\\0</code>，这两个字符都不需要编码。</p>`,25);function v(x,b){const a=t("ExternalLinkIcon");return r(),c("div",null,[o,p,e("ul",null,[e("li",null,[e("a",h,[i("http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-4547"),n(a)])]),e("li",null,[e("a",u,[i("https://blog.werner.wiki/file-resolution-vulnerability-nginx/"),n(a)])]),e("li",null,[e("a",g,[i("http://www.91ri.org/9064.html"),n(a)])])]),m])}const w=d(l,[["render",v],["__file","Nginx 文件名逻辑漏洞 CVE-2013-4547.html.vue"]]);export{w as default};
