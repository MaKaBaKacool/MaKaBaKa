import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as n,o as r,c,a as e,b as i,d as t,e as d}from"./app-58e4a7d6.js";const p={},l=d('<h2 id="漏洞描述" tabindex="-1"><a class="header-anchor" href="#漏洞描述" aria-hidden="true">#</a> 漏洞描述</h2><p>pgAdmin 是一个著名的 PostgreSQL 数据库管理平台。</p><p>pgAdmin 包含一个 HTTP API 可以用来让用户选择并验证额外的 PostgreSQL 套件，比如 pg_dump 和 pg_restore。在 CVE-2022-4223 中，这个 API 可被用于执行任意命令，官方对此进行了修复，但在 7.6 版本及以前修复并不完全，导致后台用户仍然可以执行任意命令。</p><p>CVE-2023-5002 是一个针对 CVE-2022-4223 漏洞的补丁绕过漏洞。官方发布了下面两个修复补丁修复漏洞：</p><ul><li>给<code>validate_binary_path</code>函数增加<code>@login_required</code>装饰器，限制未授权的用户访问相关接口</li><li>使用<code>os.path.exists()</code>检查用户传入的路径是否有效</li></ul><p>只有第二个修复补丁可以被绕过，所以该漏洞仅是一个后台命令执行漏洞。</p><p>参考链接：</p>',7),s={href:"https://github.com/pgadmin-org/pgadmin4/commit/35f05e49b3632a0a674b9b36535a7fe2d93dd0c2",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/advisories/GHSA-ghp8-52vx-77j4",target:"_blank",rel:"noopener noreferrer"},h=d(`<h2 id="漏洞影响" tabindex="-1"><a class="header-anchor" href="#漏洞影响" aria-hidden="true">#</a> 漏洞影响</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pgAdmin 版本 &lt;= 7.6
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="网络测绘" tabindex="-1"><a class="header-anchor" href="#网络测绘" aria-hidden="true">#</a> 网络测绘</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;pgadmin&quot; &amp;&amp; icon_hash=&quot;1502815117&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建" aria-hidden="true">#</a> 环境搭建</h2><p>Vulhub 执行如下命令启动一个 pgAdmin 7.6 服务器：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker compose up -d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>服务器启动后，访问<code>http://your-ip:5050</code>即可查看到 pgAdmin 默认的登录页面。</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/image-20240407151157948.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="漏洞复现" tabindex="-1"><a class="header-anchor" href="#漏洞复现" aria-hidden="true">#</a> 漏洞复现</h2><p>使用帐号<code>vulhub@example.com</code>和密码<code>vulhub</code>登录pgAdmin。选择“Tools -&gt; Storage Manager”打开文件管理器：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/image-20240407151317890.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>创建一个新的目录，名字是我们的Payload <code>&quot;;id;#</code>：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/image-20240407151348622.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这个目录的完整路径是<code>/var/lib/pgadmin/storage/vulhub_example.com/&quot;;id;#</code>，我们后续就需要使用这个路径来利用漏洞。</p><p>选择“File -&gt; Preferences”打开设置页面，并来到“Paths -&gt; Binary paths”面板。在任意一个“PostgreSQL Binary Path”文本框中填入<code>/var/lib/pgadmin/storage/vulhub_example.com/&quot;;id;#</code>，并点击右侧的“验证”按钮：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/image-20240407151528419.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可见，<code>id</code>命令被成功执行：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/image-20240407151614950.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,19);function m(u,b){const a=n("ExternalLinkIcon");return r(),c("div",null,[l,e("ul",null,[e("li",null,[e("a",s,[i("https://github.com/pgadmin-org/pgadmin4/commit/35f05e49b3632a0a674b9b36535a7fe2d93dd0c2"),t(a)])]),e("li",null,[e("a",g,[i("https://github.com/advisories/GHSA-ghp8-52vx-77j4"),t(a)])])]),h])}const x=o(p,[["render",m],["__file","pgAdmin ≤ 7.6 后台远程命令执行漏洞 CVE-2023-5002.html.vue"]]);export{x as default};
