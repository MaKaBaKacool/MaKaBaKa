import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as d,c as h,a as e,b as t,d as s,e as a}from"./app-58e4a7d6.js";const c={},n=e("h2",{id:"漏洞描述",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#漏洞描述","aria-hidden":"true"},"#"),t(" 漏洞描述")],-1),r=e("p",null,"GIT-SHELL 沙盒绕过（CVE-2017-8386）导致任意文件读取、可能的任意命令执行漏洞。",-1),p=e("p",null,"参考链接：",-1),g={href:"https://insinuator.net/2017/05/git-shell-bypass-by-abusing-less-cve-2017-8386/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://www.leavesongs.com/PENETRATION/git-shell-cve-2017-8386.html",target:"_blank",rel:"noopener noreferrer"},_=a(`<h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建" aria-hidden="true">#</a> 环境搭建</h2><p>Vulhub编译及运行测试环境：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker-compose up -d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为了不和docker母机的ssh端口冲突，将容器的ssh端口设置成3322。本目录下我生成了一个<code>id_rsa</code>，这是ssh的私钥，连接的时候请指定之。</p><p>在连接以前，需要先设置私钥的权限为0600：<code>chmod 0600 id_rsa</code>，否则连接可能失败。</p><p>正常连接其ssh服务<code>ssh -p 3322 -i id_rsa git@127.0.0.1</code>，会被git-shell给拦截，返回错误<code>fatal: unrecognized command &#39;&#39;</code>，并且连接被关闭。</p><p>使用--help技巧，连接目标并进入帮助页面：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ssh -p 3322 -i id_rsa -t git@127.0.0.1 &quot;git-upload-archive &#39;--help&#39;&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>按<code>shift</code>+e，读取任意文件，例如/etc/passwd：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202231952479.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>输入回车，/etc/passwd文件读取结果：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202231953928.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>输入q，回到帮助页面，输入<code>!id</code>执行命令：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202231954658.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>显示用户id，为www-data。因为git用户和www-data用户编号都是33，其实是一个用户。</p><h2 id="原理分析" tabindex="-1"><a class="header-anchor" href="#原理分析" aria-hidden="true">#</a> 原理分析</h2><h3 id="基于ssh协议的git拉取流程" tabindex="-1"><a class="header-anchor" href="#基于ssh协议的git拉取流程" aria-hidden="true">#</a> 基于ssh协议的git拉取流程</h3><p>git-shell是git服务中重要的组成部分，众所周知，git服务支持ssh、git、https三种协议来传递项目，其中ssh是最安全，也最方便的一种方式。</p>`,18),m=e("code",null,"Clone with SSH",-1),b=e("code",null,"phith0n/vulhub.git",-1),f={href:"http://xn--github-o20k9dw90m.com",target:"_blank",rel:"noopener noreferrer"},v=e("code",null,"phith0n/vulhub.git",-1),x={href:"http://xn--gitsshgithub-bx4sf40dxtclv3c4q0a394cxd9fkera7nal6b.com",target:"_blank",rel:"noopener noreferrer"},k=e("p",null,"所以，基于ssh协议的git clone等操作，本质上就是通过ssh协议连接上git服务器，并将指定目录拉取下来的过程。",-1),w=e("p",null,[t("那么，既然这个过程是个ssh交互的过程，那么我直接执行"),e("code",null,"ssh git@github.com"),t("是不是就可以登录github服务器了呢？显然是不行的，你可以试试：")],-1),E=e("figure",null,[e("img",{src:"https://cb86160.webp.li/makabaka-r1-photo/202202231958438.png",alt:"",tabindex:"0",loading:"lazy"}),e("figcaption")],-1),q=e("p",null,"实际上，确实是连接上了其ssh服务，并验证身份通过了，但提示信息显示没有权限，然后关闭了连接。",-1),y=e("p",null,"所以，正常来说，基于ssh的git拉取过程对于git服务器是安全的。",-1),L={href:"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000",target:"_blank",rel:"noopener noreferrer"},V=a('<h3 id="如何禁止git用户执行系统shell" tabindex="-1"><a class="header-anchor" href="#如何禁止git用户执行系统shell" aria-hidden="true">#</a> 如何禁止git用户执行系统shell</h3><p>那么，github这类git服务商是怎么实现上述“安全”通信的流程的呢？</p><p>让用户可以通过ssh认证身份，但又不给用户shell，这个过程有两种方法实现：</p><ol><li>创建系统用户git的时候将其shell设置成git-shell</li><li>在authorized_keys文件每个ssh-key的前面设置command，覆盖或劫持重写原本的命令</li></ol><p>第一种方法比较直观，就是创建用户的时候不给其正常的bash或sh的shell，而是给它一个git-shell。git-shell是一个沙盒环境，在git-shell下，只允许执行沙盒内包含的命令。</p><p>第二种方法不仅在git服务器上使用，很多Linux发行版也会用到。比如aws，默认安装后是不允许root登录的，实现方法就是在/root/.ssh/authorized_keys中设置<code>command=&quot;echo &#39;Please login as the user \\&quot;ec2-user\\&quot; rather than the user \\&quot;root\\&quot;.&#39;;echo;sleep 10&quot;</code>。这句话相当于覆盖了原本执行的shell，变成了echo一段文字。</p><p>当然，第二种方法内也可以用git-shell，比如在添加git用户的时候赋予其正常的<code>/bin/bash</code>，但在authorized_keys中设置<code>command=&quot;git-shell -c \\&quot;$SSH_ORIGINAL_COMMAND\\&quot;&quot;</code>，实际上还是使用了git-shell。</p><h3 id="git-shell沙盒绕过漏洞-cve-2017-8386" tabindex="-1"><a class="header-anchor" href="#git-shell沙盒绕过漏洞-cve-2017-8386" aria-hidden="true">#</a> git-shell沙盒绕过漏洞（CVE-2017-8386）</h3><p>git-shell是一个可以限制用户执行命令的shell，如果我们在git用户家目录下创建一个新目录，叫<code>git-shell-commands</code>，然后将你允许用户执行的命令放在这个目录下，这就创建好了一个沙盒。在git-shell中，只能执行<code>/home/git/git-shell-commands</code>目录下的命令。</p><p>如果系统是没有<code>git-shell-commands</code>目录，那么git-shell默认只允许执行如下三个命令：</p><ul><li><code>git-receive-pack &lt;argument&gt;</code></li><li><code>git-upload-pack &lt;argument&gt;</code></li><li><code>git-upload-archive &lt;argument&gt;</code></li></ul><p>这就是白名单。</p><p>但CVE-2017-8386的作者发现，执行<code>git-upload-archive --help</code>（或<code>git-receive-pack --help</code>），将会进入一个交互式的man页面，man又调用了less命令，最后是一个可以上下翻页的帮助文档。</p><p>本来这也没什么，但是，less命令有一个特性，就是其支持一些交互式的方法。比如在less页面中，按<code>shift</code>+e可以打开Examine功能，通过这个功能可以读取任意文件；输入<code>!id</code>就可以执行id这个命令。</p><p>可以随便找台linux计算机试一下，执行<code>less /etc/passwd</code>来到less的页面，然后在英文输入法下输入<code>!id</code>，就可以执行id命令：</p><p>所以，利用这个特性，我们就可以绕过git-shell的沙盒读取任意文件，或执行任意命令了！</p><p>我们可以先试试，在Linux下直接执行<code>git-receive-pack --help</code>，再输入<code>!id</code>，看到的效果和上图是类似的。</p>',17),z={href:"https://evi1cg.me/archives/CVE-2017-8386.html",target:"_blank",rel:"noopener noreferrer"},N=a(`<h3 id="通过ssh进行利用" tabindex="-1"><a class="header-anchor" href="#通过ssh进行利用" aria-hidden="true">#</a> 通过ssh进行利用</h3><p>远程利用漏洞，直接<code>ssh git@gitserver</code>只能拿到git-shell（或返回一段提醒文字），我们就利用上一节里提到的沙盒绕过漏洞执行命令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ssh -p 3322 -i id_rsa -t git@127.0.0.1 &quot;git-upload-archive &#39;--help&#39;&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>进入帮助页面，然后按shift+e或<code>!id</code>即可。</p><h3 id="如何进行限制" tabindex="-1"><a class="header-anchor" href="#如何进行限制" aria-hidden="true">#</a> 如何进行限制</h3><p>一般配置git用户，不让ssh拥有shell，有两种方法：一是创建用户的时候设置其shell为<code>/usr/bin/git-shell</code>，二是在authorized_keys中覆盖command。</p><p>如果目标服务器使用了第一种方法，即使成功执行了<code>git-upload-archive &#39;--help&#39;</code>进入帮助页面，也不能执行命令。因为<code>!id</code>还是在git-shell下执行，git-shell中没有id命令，所以依旧执行不成功。</p><p>但读取文件是一定可以的，因为读取文件不是通过命令读取的，所以不受git-shell沙盒的影响。</p><p>如果目标服务器是用第二种方法配置的git-shell，比如我这里这个测试环境，我是在<code>/etc/passwd</code>文件设置git用户的shell是bash，而在authorized_keys中覆盖command，执行git-shell。</p><p>这种情况下，如果我进入了帮助页面，输入<code>!id</code>是可以成功执行id命令的，因为此时id是在bash下执行的，而不是在git-shell下执行的，所以没有沙盒限制。</p><p>总的来说，这个漏洞至少能做到任意文件读取，有可能可以执行任意命令。</p>`,11);function C(I,S){const i=o("ExternalLinkIcon");return d(),h("div",null,[n,r,p,e("ul",null,[e("li",null,[e("a",g,[t("https://insinuator.net/2017/05/git-shell-bypass-by-abusing-less-cve-2017-8386/"),s(i)])]),e("li",null,[e("a",u,[t("https://www.leavesongs.com/PENETRATION/git-shell-cve-2017-8386.html"),s(i)])])]),_,e("p",null,[t("我们随便打开Github上一个项目，找到"),m,t("里列出的地址："),b,t("，其实这个url就是告诉git，ssh用户名是git，"),e("a",f,[t("地址是github.com"),s(i)]),t("（默认端口是22），该项目位于"),v,t("这个目录下；"),e("a",x,[t("然后git就通过ssh协议连接上github.com"),s(i)]),t("，并将对应目录下的项目拉取下来。")]),k,w,E,q,y,e("p",null,[t("关于如何搭建一个git服务器，可以参考"),e("a",L,[t("这篇文章"),s(i)]),t("。")]),V,e("p",null,[e("a",z,[t("evi1cg大佬的博客"),s(i)]),t("中有动图，看的更直观。")]),N])}const H=l(c,[["render",C],["__file","GIT-SHELL 沙盒绕过 CVE-2017-8386.html.vue"]]);export{H as default};
